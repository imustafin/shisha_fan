.\" -*- mode: troff; coding: UTF-8 -*-
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" This is in the public domain
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LD.SO 8 2019\-08\-02 GNU "Руководство программиста Linux"
.SH ИМЯ
ld.so, ld\-linux.so \- динамический компоновщик/загрузчик
.SH ОБЗОР
Динамический компоновщик может запускаться неявно из динамически
скомпонованной программы или общего объекта (в этом случае динамическому
компоновщику невозможно передать параметры командной строки, как и в случае
с ELF, когда динамический компоновщик хранится в разделе \fB.interp\fP
исполняемой программы) или явно с помощью вызова:
.PP
\fI/lib/ld\-linux.so.*\fP [ПАРАМЕТРЫ] [ПРОГРАММА [АРГУМЕНТЫ]]
.SH ОПИСАНИЕ
Программы \fBld.so\fP и \fBld\-linux.so*\fP ищут и загружают общие объекты (общие
библиотеки), необходимые программе, а также подготавливают программу к
запуску и запускают её.
.PP
Для двоичных файлов Linux требуется динамическая компоновка (компоновка во
время выполнения), если при сборке программе \fBld\fP(1) не был передан
параметр \fB\-static\fP.
.PP
Программа \fBld.so\fP предназначена для обработки двоичных файлов в формате
a.out, который используется с давних пор. Программа \fBld\-linux.so*\fP
(\fI/lib/ld\-linux.so.1\fP, если используется libc5 и \fI/lib/ld\-linux.so.2\fP,
если glibc2) предназначена для обработки файлов в более современном формате
ELF. Обе программы ведут себя одинаково и используют одни и те же файлы
поддержки и программы (\fBldd\fP(1), \fBldconfig\fP(8) и \fI/etc/ld.so.conf\fP).
.PP
При определении зависимостей общего объекта, динамический компоновщик
сначала просматривает каждую строку зависимости в поисках символа косой
черты (такое случается, если путь общего объекта с косой чертой был задан во
время компоновки). Если косая черта найдена, то строка зависимости
воспринимается как путь (относительный или абсолютный), и общий объект
загружается исходя из этого пути.
.PP
Если в зависимости общего объекта отсутствует косая черта, то поиск
выполняется в следующем порядке:
.IP o 3
В каталогах, указанных в атрибуте DT_RPATH динамического раздела двоичного
файла, если он есть и если атрибут DT_RUNPATH не существует. Использование
DT_RPATH не рекомендуется.
.IP o
В переменной окружения \fBLD_LIBRARY_PATH\fP, если исполняемый файл не
выполняется в режиме безопасного выполнения (смотрите далее), в котором
данная переменная игнорируется.
.IP o
В каталогах, указанных в атрибуте DT_RUNPATH динамического раздела двоичного
файла, если он есть. Эти каталоги просматриваются только при поиске
объектов, требуемых элементами DT_NEEDED (прямые зависимости) и не
применяются к дочерним объектам, которые сами должны иметь свои собственные
элементы DT_RUNPATH. В этом отличие от DT_RPATH, которые применяются при
поиске для всех потомков в дереве зависимостей.
.IP o
В кэш\-файле \fI/etc/ld.so.cache\fP, содержащем скомпилированный список
кандидатов общих объектов, которые ранее были найдены по указанным путям
расположения библиотек. Однако, если при сборке двоичного файла компоновщику
был указан параметр \fB\-z nodeflib\fP, то общие объекты в путях по умолчанию
будут пропущены. Общие объекты, установленные в каталоги для аппаратных
возможностей (см. далее) имеют больший приоритет, чем остальные общие
объекты.
.IP o
В каталоге по умолчанию \fI/lib\fP и затем в \fI/usr/lib\fP (на некоторых
64\-битных архитектурах путь по умолчанию для 64\-битных объектов — \fI/lib64\fP
и затем \fI/usr/lib64\fP). Если при сборке двоичного файла компоновщику был
указан параметр \fB\-z nodeflib\fP, то этот шаг пропускается.
.SS "Раскрытие токена rpath"
.PP
Динамический компоновщик распознаёт определённые строковые токены в значении
rpath (DT_RPATH или DT_RUNPATH). Эти строки заменяются на:
.TP 
\fI$ORIGIN\fP (или \fI${ORIGIN}\fP)
Она раскрывается в каталог, содержащий программу или общий объект. Таким
образом, приложение, расположенное в \fIsomedir/app\fP может компилироваться с
.IP
    gcc \-Wl,\-rpath,\(aq$ORIGIN/../lib\(aq
.IP
для того, чтобы оно могло найти связанный общий объект в \fIsomedir/lib\fP и не
важно где в иерархии каталогов будет находиться \fIsomedir\fP. Это облегчает
создание приложений «под ключ», которые вместо установки в специальные
каталоги, можно просто распаковать в любой каталог, и они всё равно найдут
свои общие объекты.
.TP 
\fI$LIB\fP (или \fI${LIB}\fP)
Она раскрывается в \fIlib\fP или \fIlib64\fP, в зависимости от архитектуры
(например, на x86\-64 она заменяется на \fIlib64\fP, а на x86\-32 она заменяется
на \fIlib\fP).
.TP 
\fI$PLATFORM\fP (или \fI${PLATFORM}\fP)
.\" To get an idea of the places that $PLATFORM would match,
.\" look at the output of the following:
.\"
.\"     mkdir /tmp/d
.\"     LD_LIBRARY_PATH=/tmp/d strace -e open /bin/date 2>&1 | grep /tmp/d
.\"
.\" ld.so lets names be abbreviated, so $O will work for $ORIGIN;
.\" Don't do this!!
Преобразуется в строку, соответствующую типу процессора узла (например,
«x86_64»). На некоторых архитектурах ядро Linux не предоставляет строку
платформы динамическому компоновщику. Значение этой строки берётся из
значения \fBAT_PLATFORM\fP вспомогательного вектора (смотрите \fBgetauxval\fP(3)).
.SH ПАРАМЕТРЫ
.TP 
\fB\-\-audit\fP\fI список\fP
Использовать объекты из \fIсписка\fP в качестве аудиторов. Объекты в \fIlist\fP
разделяются двоеточиями.
.TP 
\fB\-\-inhibit\-cache\fP
Не использовать \fI/etc/ld.so.cache\fP.
.TP 
\fB\-\-library\-path\fP\fI путь\fP
Использовать \fIпуть\fP вместо значения переменной окружения \fBLD_LIBRARY_PATH\fP
(смотрите далее). Имена \fIORIGIN\fP, \fILIB\fP и \fIPLATFORM\fP рассматриваются
также как переменная окружения \fBLD_LIBRARY_PATH\fP.
.TP 
\fB\-\-inhibit\-rpath\fP\fI список\fP
Игнорировать информацию в RPATH и RUNPATH об именах объектов из
\fIсписка\fP. Этот параметр игнорируется в режиме безопасного выполнения
(смотрите далее). Объекты в \fIlist\fP разделяются двоеточиями или пробелами.
.TP 
\fB\-\-list\fP
Выдать список всех зависимостей и как они удовлетворяются.
.TP 
\fB\-\-preload\fP \fIlist\fP (начиная с glibc 2.30)
Предварительно загружать объекты, указанные в \fIlist\fP. Объекты в \fIlist\fP
разделяются двоеточиями или пробелами. Предварительная загрузка объектов
описана далее, в разделе о переменной окружения \fBLD_PRELOAD\fP.
.IP
В отличии от \fBLD_PRELOAD\fP, параметр \fB\-\-preload\fP предоставляет способ
выполнить предварительную загрузку для одного исполняемого файла не влияя
при этом на предварительную загрузку его дочерних процессов, которые
запускает новая программа.
.TP 
\fB\-\-verify\fP
Проверить, что программа является динамически скомпонованной и что
компоновщик понимает её формат.
.SH ОКРУЖЕНИЕ
.\"
На поведение динамического компоновщика влияют различные переменные
окружения.
.SS "Безопасный режим выполнения"
В целях безопасности, если динамический компоновщик определяет, что двоичный
файл должен быть запущен в безопасном режиме выполнения, действие некоторых
переменных окружения отменяется или изменяется; кроме этого, эти переменные
окружения удаляются из окружения, и программа даже не увидит, что они
определены. Некоторые из этих переменных окружения влияют на работу самого
динамического компоновщика, и они описаны ниже. Другие переменные окружения,
учитываемые подобным образом: \fBGCONV_PATH\fP, \fBGETCONF_DIR\fP, \fBHOSTALIASES\fP,
\fBLOCALDOMAIN\fP, \fBLOCPATH\fP, \fBMALLOC_TRACE\fP, \fBNIS_PATH\fP, \fBNLSPATH\fP,
\fBRESOLV_HOST_CONF\fP, \fBRES_OPTIONS\fP, \fBTMPDIR\fP и \fBTZDIR\fP.
.PP
Двоичный файл выполняется в безопасном режиме выполнения, если запись
\fBAT_SECURE\fP в вспомогательном векторе (смотрите \fBgetauxval\fP(3)) содержит
ненулевое значение. Эта запись может иметь ненулевое значение по разным
причинам:
.IP * 3
У процесса различаются реальный и эффективный идентификатор
пользователя/группы. Обычно, это происходит в результате выполнения программ
с установленным битом set\-user\-ID или set\-group\-ID.
.IP *
Процесс с пользовательским ID не равным root, выполняет файл, который
присваивает мандаты процессу.
.IP *
.\"
Ненулевое значение может установить Linux Security Module.
.SS "Переменные окружения"
Среди наиболее важных переменных окружения следует выделить следующие:
.TP 
\fBLD_ASSUME_KERNEL\fP (начиная с glibc 2.2.3)
Каждый общий объект может сообщать динамическому компоновщику о требуемой
минимальной версии ядерного ABI (это требование кодируется в разделе ELF
note, который можно просмотреть с помощью \fIreadelf\ \-n\fP, под меткой
\fBNT_GNU_ABI_TAG\fP). Во время выполнения динамический компоновщик определяет
версию ABI запущенного ядра и не будет загружать общие объекты, у которых
минимальная версия ABI превышает версию ядра.
.IP
\fBLD_ASSUME_KERNEL\fP можно использовать, чтобы заставить динамический
компоновщик предполагать, что он работает в системе с другой версией ядра
ABI. Например, следующая команда заставляет динамический компоновщик при
загрузке общих объектов, требуемых \fImyprog\fP, предполагать, что он запущен
на Linux с версией 2.2.5:
.IP
.in +4n
.EX
$ \fBLD_ASSUME_KERNEL=2.2.5 ./myprog\fP
.EE
.in
.IP
В системах, предоставляющих несколько версий общего объекта (в различных
каталогах пути поиска) с разными требованиями к минимальной версии ядра ABI,
\fBLD_ASSUME_KERNEL\fP может использоваться для выбора версии объекта, которую
нужно задействовать (в зависимости от порядка поиска в каталогах).
.IP
Исторически, свойство \fBLD_ASSUME_KERNEL\fP наиболее часто использовалось при
ручном выборе старых реализаций нитей POSIX LinuxThreads в системах, которые
предоставляли и LinuxThreads, и NPTL (в последствии стала базовой в таких
системах); смотрите \fBpthreads\fP(7).
.TP 
\fBLD_BIND_NOW\fP (начиная с glibc 2.1.1)
Если переменная содержит непустую строку, то динамический компоновщик будет
искать все символы при запуске программы вместо того, чтобы отложить поиск
вызовов функций до момента, когда они встретятся в первый раз. Это полезно
при отладке.
.TP 
\fBLD_LIBRARY_PATH\fP
Список каталогов, в которых будет производиться поиск библиотек ELF в момент
выполнения. Элементы списка разделяются двоеточиями или точками с запятой
(экранирование этих разделителей не поддерживается).
.IP
Данная переменная игнорируется в режиме безопасного выполнения.
.IP
Внутри путей, указанных в \fBLD_LIBRARY_PATH\fP, динамический компоновщик
раскрывает токены \fI$ORIGIN\fP, \fI$LIB\fP и \fI$PLATFORM\fP (или версии,
использующие фигурные скобки вокруг имён) как описано выше в разделе
\fIРаскрытие токена rpath\fP. Таким образом, например, следующее значение
заставит искать библиотеку в подкаталогах \fIlib\fP или \fIlib64\fP, находящихся
ниже каталога, содержащего исполняемую программу:
.IP
.in +4n
.EX
$ \fBLD_LIBRARY_PATH='$ORIGIN/$LIB' prog\fP
.EE
.in
.IP
(Обратите внимание на одиночные кавычки, которые не позволяют раскрывать
\fI$ORIGIN\fP и \fI$LIB\fP как переменные оболочки!)
.TP 
\fBLD_PRELOAD\fP
Список дополнительных, указанных пользователем, общих объектов ELF, которые
будут загружены раньше чем все остальные. Может использоваться для
выборочной замены функций из других общих объектов.
.IP
Элементы списка разделяются пробелами или двоеточиями, экранирование этих
разделителей не поддерживается. Объекты ищутся согласно правилам из
ОПИСАНИЯ. Найденные объекты добавляются в карту связей согласно списку, в
порядке слева направо.
.IP
 В режиме безопасного выполнения предварительная загрузка файлов с символами
косой черты не выполняется. Кроме того, загружаются общие объекты только из
стандартных каталогов поиска и с включённым битом режима set\-user\-ID (что не
типично).
.IP
.\" Tested with the following:
.\"
.\"	LD_PRELOAD='$LIB/libmod.so' LD_LIBRARY_PATH=. ./prog
.\"
.\" which will preload the libmod.so in 'lib' or 'lib64', using it
.\" in preference to the version in '.'.
Внутри имён, указанных в списке \fBLD_PRELOAD\fP, динамический компоновщик
раскрывает токены \fI$ORIGIN\fP, \fI$LIB\fP и \fI$PLATFORM\fP (или версии,
использующие фигурные скобки вокруг имён) как описано выше в разделе
\fIРаскрытие токена rpath\fP (также смотрите описание цитирования в
\fBLD_LIBRARY_PATH\fP).
.IP
Есть несколько методов указания библиотек для предварительной загрузки,они
обрабатываются в следующем порядке:
.RS
.IP (1) 4
Переменная окружения \fBLD_PRELOAD\fP.
.IP (2)
Параметр командной строки \fB\-\-preload\fP, при непосредственном вызове
динамического компоновщика.
.IP (3)
Файл \fI/etc/ld.so.preload\fP (смотрите ниже).
.RE
.TP 
\fBLD_TRACE_LOADED_OBJECTS\fP
Если установлена (любое значение), то вместо нормального запуска программы
будут выданы её динамические зависимости, как если бы она была запущена
\fBldd\fP(1).
.PP
Также существует большое количество более или менее полезных переменных,
многие из которых устарели или предназначены только для внутреннего
использования.
.TP 
\fBLD_AUDIT\fP (начиная с glibc 2.4)
Определяемый пользователем список общих объектов ELF, которые будут
загружены раньше всех остальных в отдельное пространство имён компоновщика
(т. е., они не внедряются вместо обычных привязываемых символов, которые
могли бы быть в этом процессе). Эти объекты можно использовать для
контрольной проверки операций динамического компоновщика. Элементы в списке
разделяются двоеточиями и двоеточия нельзя экранировать.
.IP
Переменная \fBLD_AUDIT\fP игнорируется в режиме безопасного выполнения.
.IP
Динамический компоновщик будет уведомлять общие объекты контроля в так
называемых точках контроля — например, при загрузке нового общего объекта,
поиске символа или при вызове символа из другого динамического объекта —
вызывая соответствующую функцию из общего объекта контроля. Подробности
смотрите в \fBrtld\-audit\fP(7). Интерфейс контроля в значительной степени
совместим с представленным в Solaris, описан в его \fIРуководстве по
компоновщику и библиотекам\fP (\fILinker and Libraries Guide\fP) в главе
\fIИнтерфейс контроля компоновщика во время выполнения\fP (\fIRuntime Linker
Auditing Interface\fP).
.IP
Внутри имён, указанных в списке \fBLD_AUDIT\fP, динамический компоновщик
раскрывает токены \fI$ORIGIN\fP, \fI$LIB\fP и \fI$PLATFORM\fP (или версии,
использующие фигурные скобки вокруг имён) как описано выше в разделе
\fIРаскрытие токена rpath\fP (также смотрите описание цитирования в
\fBLD_LIBRARY_PATH\fP).
.IP
.\" commit 8e9f92e9d5d7737afdacf79b76d98c4c42980508
Начиная с glibc 2.13 в режиме безопасного выполнения имена в списке
контрольной проверки, содержащие символы  косой черты, игнорируются, и
загружаются только общие объекты с включённым битом режима set\-user\-ID из
стандартных каталогов поиска.
.TP 
\fBLD_BIND_NOT\fP (начиная с glibc 2.1.95)
Если эта переменная окружения не равна пустой строке, то не обновлять GOT
(global offset table — таблицу глобальных перемещений) и PLT (procedure
linkage table — таблицу компоновки процедур) после определения символа
функции. Совместное использовав эту переменную с \fBLD_DEBUG\fP (с категориями
\fIbindings\fP и \fIsymbols\fP), можно увидеть все привязки функции во время
выполнения.
.TP 
\fBLD_DEBUG\fP (начиная с glibc 2.1)
Выводить подробную отладочную информацию об операции динамического
компоновщика. Содержимое этой переменной равно одной или нескольким
следующим категориям, разделённым двоеточием, запятой или (если значение в
кавычках) пробелом:
.RS
.TP  12
\fIhelp\fP
Слово \fIhelp\fP в значении этой переменной заставляет не выполнять указанную
программу и выводит справочное сообщение со списком категорий, которые можно
задать в этой переменной окружения.
.TP 
\fIall\fP
Показать всю отладочную информацию (за исключением \fIstatistics\fP и
\fIunused\fP; смотрите ниже).
.TP 
\fIbindings\fP
Показать информацию о том, какое определение привязано к каждому символу.
.TP 
\fIfiles\fP
Показать ход обработки входного файла.
.TP 
\fIlibs\fP
Показать пути поиска библиотек.
.TP 
\fIreloc\fP
Показать обработку перемещений.
.TP 
\fIscopes\fP
Показать информацию об областях.
.TP 
\fIstatistics\fP
Показать статистику по перемещениям.
.TP 
\fIsymbols\fP
Показать пути поиска при нахождении каждого символа.
.TP 
\fIunused\fP
Определить неиспользуемые DSO.
.TP 
\fIversions\fP
Показать зависимости от версий.
.RE
.IP
Начиная с glibc 2.3.4, \fBLD_DEBUG\fP игнорируется в режиме безопасного
выполнения, если существует файл \fI/etc/suid\-debug\fP (содержимое файла не
важно).
.TP 
\fBLD_DEBUG_OUTPUT\fP (начиная с glibc 2.1)
По умолчанию вывод \fBLD_DEBUG\fP записывается в стандартный поток ошибок. Если
\fBLD_DEBUG_OUTPUT\fP определена, то вывод записывается в указанной значением
файл с добавлением суффикса «.» (точка) ID процесса.
.IP
Переменная \fBLD_DEBUG_OUTPUT\fP игнорируется в режиме безопасного выполнения.
.TP 
\fBLD_DYNAMIC_WEAK\fP (начиная с glibc 2.1.91)
По умолчанию при поиске общих библиотек для разрешения символьной ссылки
динамический компоновщик будет использовать первое найденное.
.IP
В старых версией glibc (до 2.2) было другое поведение: если компоновщик
определяет, что символ слабый, то он запоминает этот символ и продолжает
поиск в оставшихся общих библиотеках. Если в последствии находится строгое
определение того же символа, то он используется вместо запомненного (если
больше символов не нашлось, то динамический компоновщик использует слабый
символ, который был найден раньше).
.IP
.\" More precisely 2.1.92
.\" See weak handling
.\"     https://www.sourceware.org/ml/libc-hacker/2000-06/msg00029.html
.\"     To: GNU libc hacker <libc-hacker at sourceware dot cygnus dot com>
.\"     Subject: weak handling
.\"     From: Ulrich Drepper <drepper at redhat dot com>
.\"     Date: 07 Jun 2000 20:08:12 -0700
.\"     Reply-To: drepper at cygnus dot com (Ulrich Drepper)
Поведение старой glibc является нестандартным (стандартной практикой
является учёт различия слабых и строгих символов только в момент статической
компоновки). Текущее поведение динамического компоновщика появилось в glibc
2.2 (такое поведение предоставлялось в то время большинством других
реализаций).
.IP
Создание переменной окружения \fBLD_DYNAMIC_WEAK\fP (с любым значением)
включает старое (нестандартное) поведение glibc, тем самым, слабые символы
одной общей библиотеки могут заменяться строгими символами, обнаруженными в
другой библиотеке (заметим, что даже когда эта переменная установлена,
строгие символы общей библиотеки не заменят слабые определения того же
символа в основной программе).
.IP
Начиная с glibc 2.3.4, \fBLD_DYNAMIC_WEAK\fP игнорируется в режиме безопасного
выполнения.
.TP 
\fBLD_HWCAP_MASK\fP (начиная с glibc 2.1)
Маска для совместимости с аппаратными возможностями.
.TP 
\fBLD_ORIGIN_PATH\fP (начиная с glibc 2.1)
.\" Used only if $ORIGIN can't be determined by normal means
.\" (from the origin path saved at load time, or from /proc/self/exe)?
Путь, где находится двоичный файл.
.IP
Начиная с glibc 2.4, \fBLD_ORIGIN_PATH\fP игнорируется в режиме безопасного
выполнения.
.TP 
\fBLD_POINTER_GUARD\fP (в glibc с 2.4 по 2.22)
.\" commit a014cecd82b71b70a6a843e250e06b541ad524f7
Значение 0 отключает защиту указателя. Любое другое значение включает защиту
указателя, что является действием по умолчанию. Защита указателя — это
механизм безопасности, в результате которого некоторые указатели на код,
хранящийся в перезаписываемой памяти программы (адреса возврата, сохраняемые
\fBsetjmp\fP(3) или указатели на функцию, используемые различными внутренними
функциями glibc), искажаются полупроизвольным образом, что затрудняет
атакующему подбор указателей для проведения атак переполнения буфера или
срыва стека. Начиная с glibc 2.23, \fBLD_POINTER_GUARD\fP можно больше не
использовать для отключения защиты указателя, так как теперь она всегда
включена.
.TP 
\fBLD_PROFILE\fP (начиная с glibc 2.1)
В переменной задаётся имя динамического объекта (одного) для профилирования,
в виде пути или имени so. Результат профилирования записывается в файл с
именем: «\fI$LD_PROFILE_OUTPUT\fP/\fI$LD_PROFILE\fP».
.IP
Начиная с glibc 2.2.5, \fBLD_PROFILE\fP игнорируется в режиме безопасного
выполнения.
.TP 
\fBLD_PROFILE_OUTPUT\fP (начиная с glibc 2.1)
Каталог, куда будет сохраняться результат работы с \fBLD_PROFILE\fP. Если эта
переменная не определена или её значение равно пустой строке, то по
умолчанию результат будет сохранён в каталог \fI/var/tmp\fP.
.IP
Переменная \fBLD_PROFILE_OUTPUT\fP игнорируется в режиме безопасного
выполнения; вместо неё всегда используется \fI/var/profile\fP (это относится
только к glibc до версии 2.2.5, так как в более новых версиях \fBLD_PROFILE\fP
также игнорируется в режиме безопасного выполнения).
.TP 
\fBLD_SHOW_AUXV\fP (начиная с glibc 2.1)
Если эта переменная окружения определена (с любым значением), то
показывается вспомогательный массив, переданный из ядра (смотрите также
\fBgetauxval\fP(3)).
.IP
Начиная с glibc 2.3.4, \fBLD_SHOW_AUXV\fP игнорируется в режиме безопасного
выполнения.
.TP 
\fBLD_TRACE_PRELINKING\fP (начиная с glibc 2.4)
.\" (This is what seems to happen, from experimenting)
Если эта переменная окружения определена, то выполнять трассировку объекта
предварительной компоновки, чьё имя указано в этой переменной окружения (для
получения списка трассируемых объектов используйте \fBldd\fP(1)). Если имя
объекта не распознано, то трассируется все действия предварительной
компоновки (prelinking activity).
.TP 
\fBLD_USE_LOAD_BIAS\fP (начиная с glibc 2.3.3)
.\" http://sources.redhat.com/ml/libc-hacker/2003-11/msg00127.html
.\" Subject: [PATCH] Support LD_USE_LOAD_BIAS
.\" Jakub Jelinek
По умолчанию (т. е., если переменная не определена) исполняемые и
предварительно скомпонованные объекты учитывают базовые адреса общих
объектов, от которых они зависят, а (предварительно не скомпонованные)
перемещаемые исполняемые (PIE) и другие общие объекты не учитывают их. Если
переменной \fBLD_USE_LOAD_BIAS\fP присвоено значение 1, то и исполняемые файлы,
и PIE учитывают базовые адреса. Если значение переменной \fBLD_USE_LOAD_BIAS\fP
равно 0, то ни исполняемые файлы ни PIE не учитывают базовые адреса.
.IP
Начиная с glibc 2.3.3, данная переменная игнорируется в режиме безопасного
выполнения.
.TP 
\fBLD_VERBOSE\fP (начиная с glibc 2.1)
Если значение равно непустой строке, то выводится информация о символах
программы (если также установлена переменная окружения
\fBLD_TRACE_LOADED_OBJECTS\fP).
.TP 
\fBLD_WARN\fP (начиная с glibc 2.1.3)
Если значение равно непустой строке, то выдаются предупреждения о
ненайденных символах.
.TP 
\fBLD_PREFER_MAP_32BIT_EXEC\fP (только для x86\-64; начиная с glibc 2.23)
Согласно руководству по оптимизации ПО Intel Silvermont для 64\-битных
приложений, выполнение предсказания ветвления может отразиться негативным
образом, если цель ветви находится дальше чем 4\ ГБ от ветви. Если эта
переменная окружения установлена (любое значение), то динамический
компоновщик сначала попытается отобразить исполняемые страницы с помощью
\fBmmap\fP(2) с флагом \fBMAP_32BIT\fP и, если это не удастся, то выполнит
отображение без флага. Примечание: с флагом MAP_32BIT отображение
выполняется в нижние 2\ ГБ (не 4\ ГБ) адресного пространства.
.IP
Так как при \fBMAP_32BIT\fP сокращается адресный диапазон, доступный для
случайного выравнивания адресного пространства (ASLR), то
\fBLD_PREFER_MAP_32BIT_EXEC\fP всегда отключается в режиме безопасного
выполнения.
.SH ФАЙЛЫ
.PD 0
.TP 
\fI/lib/ld.so\fP
динамический компоновщик/загрузчик a.out
.TP 
\fI/lib/ld\-linux.so.\fP{\fI1\fP,\fI2\fP}
динамический компоновщик/загрузчик ELF
.TP 
\fI/etc/ld.so.cache\fP
Файл с скомпилированным списком каталогов, в которых производится поиск
общих объектов и сортированный список общих объектов\-кандидатов. Смотрите
\fBldconfig\fP(8).
.TP 
\fI/etc/ld.so.preload\fP
Файл со списком общих объектов ELF (через пробел), которые будут загружены
перед программой. Смотрите описание \fBLD_PRELOAD\fP выше. Если одновременно
существуют \fBLD_PRELOAD\fP и \fI/etc/ld.so.preload\fP, то библиотеки, указанные в
\fBLD_PRELOAD\fP, загружаются первыми. Файл \fI/etc/ld.so.preload\fP влияет на всю
систему, вызывая предварительную загрузку указанных библиотек для всех
программ, выполняемых в системе (обычно, это нежелательно и используется как
спасательное средство, например, для временного обхода проблемы неправильно
настроенных библиотек).
.TP 
\fIlib*.so*\fP
общие объекты
.PD
.SH ЗАМЕЧАНИЯ
.SS "Аппаратные возможности"
.\" Presumably, this info comes from sysdeps/i386/dl-procinfo.c and
.\" similar files
Некоторые общие объекты скомпилированы с использованием специальных
аппаратных инструкций, которые существуют не в каждом ЦП. Такие объекты
должны быть установлены в каталоги, чью имена (например, \fI/usr/lib/sse2/\fP)
определяют требования к аппаратным возможностям. Динамический компоновщик
проверяет эти каталоги учитывая аппаратуру машины и выбирает наиболее
подходящую версию требуемого общего объекта. Каталоги аппаратных
возможностей могут каскадироваться для объединения свойств ЦП. Список имён
поддерживаемых аппаратных возможностей зависит от ЦП. В настоящее время
распознаются следующие имена:
.TP 
\fBAlpha\fP
ev4, ev5, ev56, ev6, ev67
.TP 
\fBMIPS\fP
loongson2e, loongson2f, octeon, octeon2
.TP 
\fBPowerPC\fP
4xxmac, altivec, arch_2_05, arch_2_06, booke, cellbe, dfp, efpdouble,
efpsingle, fpu, ic_snoop, mmu, notb, pa6t, power4, power5, power5+, power6x,
ppc32, ppc601, ppc64, smt, spe, ucache, vsx
.TP 
\fBSPARC\fP
flush, muldiv, stbar, swap, ultra3, v9, v9v, v9v2
.TP 
\fBs390\fP
dfp, eimm, esan3, etf3enh, g5, highgprs, hpage, ldisp, msa, stfle, z900,
z990, z9\-109, z10, zarch
.TP 
\fBx86 (только 32\-битные)\fP
acpi, apic, clflush, cmov, cx8, dts, fxsr, ht, i386, i486, i586, i686, mca,
mmx, mtrr, pat, pbe, pge, pn, pse36, sep, ss, sse, sse2, tm
.SH "СМОТРИТЕ ТАКЖЕ"
\fBld\fP(1), \fBldd\fP(1), \fBpldd\fP(1), \fBsprof\fP(1), \fBdlopen\fP(3), \fBgetauxval\fP(3),
\fBelf\fP(5), \fBcapabilities\fP(7), \fBrtld\-audit\fP(7), \fBldconfig\fP(8), \fBsln\fP(8)
.\" .SH AUTHORS
.\" ld.so: David Engel, Eric Youngdale, Peter MacDonald, Hongjiu Lu, Linus
.\"  Torvalds, Lars Wirzenius and Mitch D'Souza
.\" ld\-linux.so: Roland McGrath, Ulrich Drepper and others.
.\"
.\" In the above, (libc5) stands for David Engel's ld.so/ld\-linux.so.
