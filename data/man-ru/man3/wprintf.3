.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH WPRINTF 3 2019\-03\-06 GNU "Руководство программиста Linux"
.SH ИМЯ
wprintf, fwprintf, swprintf, vwprintf, vfwprintf, vswprintf \-
форматированный вывод широких символов
.SH ОБЗОР
.nf
\fB#include <stdio.h>\fP
\fB#include <wchar.h>\fP
.PP
\fBint wprintf(const wchar_t *\fP\fIformat\fP\fB, ...);\fP
\fBint fwprintf(FILE *\fP\fIstream\fP\fB, const wchar_t *\fP\fIformat\fP\fB, ...);\fP
\fBint swprintf(wchar_t *\fP\fIwcs\fP\fB, size_t \fP\fImaxlen\fP\fB,\fP
\fB             const wchar_t *\fP\fIformat\fP\fB, ...);\fP
.PP
\fBint vwprintf(const wchar_t *\fP\fIformat\fP\fB, va_list \fP\fIargs\fP\fB);\fP
\fBint vfwprintf(FILE *\fP\fIstream\fP\fB, const wchar_t *\fP\fIformat\fP\fB, va_list \fP\fIargs\fP\fB);\fP
\fBint vswprintf(wchar_t *\fP\fIwcs\fP\fB, size_t \fP\fImaxlen\fP\fB,\fP
\fB              const wchar_t *\fP\fIformat\fP\fB, va_list \fP\fIargs\fP\fB);\fP
.fi
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
.ad l
Все функции, показанные выше:
.RS 4
.\" .BR wprintf (),
.\" .BR fwprintf (),
.\" .BR swprintf (),
.\" .BR vwprintf (),
.\" .BR vfwprintf (),
.\" .BR vswprintf ():
_XOPEN_SOURCE\ >=\ 500 || _ISOC99_SOURCE ||
.br
_POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH ОПИСАНИЕ
Семейство функций \fBwprintf\fP() является эквивалентом семейства \fBprintf\fP(3)
для работы с широкими символами. Функции из этого семейства производят
форматированный вывод широких символов.
.PP
Функции \fBwprintf\fP() и \fBvwprintf\fP() выводят широкие символы в поток
\fIstdout\fP. \fIstdout\fP должен быть открыт не для байтовых операций;
подробности смотрите в \fBfwide\fP(3).
.PP
Функции \fBwprintf\fP() и \fBvwprintf\fP() выводят широкие символы в поток
\fIstream\fP. \fIstream\fP должен быть открыт не для байтовых операций;
подробности смотрите в \fBfwide\fP(3).
.PP
Функции \fBswprintf\fP() и \fBvswprintf\fP() выводят широкие символы в массив
широких символов. Программист должен быть уверен, что в \fIwcs\fP достаточно
места для \fImaxlen\fP широких символов.
.PP
Все эти функции очень похожи на \fBprintf\fP(3), \fBvprintf\fP(3), \fBfprintf\fP(3),
\fBvfprintf\fP(3), \fBsprintf\fP(3), \fBvsprintf\fP(3), но отличаются от них в
следующем:
.TP 
\fB\(bu\fP
Строка \fIformat\fP представляет собой строку широких символов.
.TP 
\fB\(bu\fP
Вывод представляет собой широкие символы, а не байты.
.TP 
\fB\(bu\fP
Функции \fBswprintf\fP() и \fBvswprintf\fP() имеют аргумент \fImaxlen\fP, а
\fBsprintf\fP(3) и \fBvsprintf\fP(3) нет (функции \fBsnprintf\fP(3) и \fBvsnprintf\fP(3)
имеют аргумент \fImaxlen\fP, но они не возвращают \-1 при переполнении буфера в
Linux).
.PP
Правила преобразования символов \fBc\fP и \fBs\fP различны:
.TP 
\fBc\fP
Если модификатора \fBl\fP нет, то аргумент \fIint\fP преобразуется в широкий
символ с помощью вызова функции \fBbtowc\fP(3); затем полученный широкий символ
записывается. Если модификатор \fBl\fP присутствует, то записывается аргумент
(широкий символ) \fIwint_t\fP.
.TP 
\fBs\fP
Если модификатор \fBl\fP отсутствует, то: аргумент \fIconst\ char\ *\fP ожидается
в виде указателя на массив элементов символьного типа (указателя на строку),
содержащего многобайтовую символьную последовательность, находящуюся в
исходном состоянии. Символы массива будут преобразованы в широкие символы
последовательным вызовом функции \fBmbrtowc\fP(3) с учётом исходного состояния
перед первым байтом. Получившиеся широкие символы будут записаны
последовательно до завершающего (но не включая его) широкого символа null
(L\(aq\e0\(aq). Если указано количество символов, то записывается количество
символов, меньшее определённого числа или равное ему. Обратите внимание, что
количеством символов определяется число \fIшироких символов\fP, а не \fIбайтов\fP
или \fIпозиций печати\fP, которые будут записаны. Массив должен содержать
завершающий байт null (\(aq\e0\(aq) на случай, если определённое в вызове
количество байтов окажется недостаточным, то есть при конвертировании
широкого символа возникнет ситуация, когда размер полученной
последовательности слишком велик для размещения её в массиве. Если имеется
модификатор \fBl\fP: аргумент \fIconst\ wchar_t\ *\fP ожидается в виде указателя
на массив широких символов. Широкие символы массива записываются до (но не
включая) завершающего нулевого широкого символа. Если указано количество
символов, то записывается количество символов, меньшее определённого числа
или равное ему. Массив должен содержать завершающий нулевой байт на случай,
если не указано количество или оно меньше или равно количеству широких
символов в массиве.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
Функции возвращают количество записанных широких символов, кроме
завершающего нулевого символа для функций \fBswprintf\fP() и \fBvswprintf\fP(). В
случае ошибки возвращается \-1.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw24 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBwprintf\fP(),
\fBfwprintf\fP(),
.br
\fBswprintf\fP(),
\fBvwprintf\fP(),
.br
\fBvfwprintf\fP(),
\fBvswprintf\fP()
T}	Безвредность в нитях	MT\-Safe locale
.TE
.sp 1
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008, C99.
.SH ЗАМЕЧАНИЯ
Поведение \fBwprintf\fP() зависит от категории \fBLC_CTYPE\fP текущей локали.
.PP
Если строка \fIformat\fP содержит широкие не ASCII символы, то программа будет
работать корректно, только если категория \fBLC_CTYPE\fP текущей локали в
момент выполнения действия совпадает с категорией \fBLC_CTYPE\fP текущей локали
в момент компиляции. Это происходит потому, что представление \fIwchar_t\fP
зависит от платформы и локали (glibc представляет широкие символы, используя
универсальную кодовую таблицу Unicode (ISO\-10646), но другие платформы могут
не следовать этому. Кроме того, использование универсальных имён символов
ISO C99 в форме \eunnnn не решает этой проблемы). Следовательно, в
многоязыковых программах строка \fIformat\fP должна содержать только широкие
символы из множества ASCII или должна создаваться во время выполнения с
учётом многозыковости (например, с помощью \fBgettext\fP(3) или \fBiconv\fP(3), с
последующим \fBmbstowcs\fP(3)).
.SH "СМОТРИТЕ ТАКЖЕ"
\fBfprintf\fP(3), \fBfputwc\fP(3), \fBfwide\fP(3), \fBprintf\fP(3), \fBsnprintf\fP(3)
.\" .BR wscanf (3)
