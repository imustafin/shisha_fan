.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright 2004 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LSEEK64 3 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
lseek64 \- изменяет смещение в файле, используемое при чтении/записи, в
соответствии с 64\-битным значением
.SH ОБЗОР
\fB#define _LARGEFILE64_SOURCE\fP /* См. feature_test_macros(7) */
.br
\fB#include <sys/types.h>\fP
.br
\fB#include <unistd.h>\fP
.PP
\fBoff64_t lseek64(int \fP\fIfd\fP\fB, off64_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.SH ОПИСАНИЕ
Семейство вызовов \fBlseek\fP(2) изменяет смещение в открытом файле, с которым
связан файловый дескриптор \fIfd\fP, на \fIoffset\fP байт относительно начала,
текущего положения или конца файла, в зависимости от значений \fIwhence\fP —
\fBSEEK_SET\fP, \fBSEEK_CUR\fP, или \fBSEEK_END\fP, соответственно.
.PP
Подробности, возвращаемое значение и ошибки смотрите в  \fBlseek\fP(2).
.PP
Доступно четыре интерфейса: \fBlseek\fP(2), \fBlseek64\fP(), \fBllseek\fP(2) и
\fB_llseek\fP(2).
.SS lseek()
Прототип:
.PP
.in +4n
.EX
\fBoff_t lseek(int \fP\fIfd\fP\fB, off_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
В \fBlseek\fP(2) используется тип \fIoff_t\fP, который в 32\-битной системе
является 32\-битным знаковым типом, если только при компиляция не определён
макрос
.PP
.in +4n
.EX
#define _FILE_OFFSET_BITS 64
.EE
.in
.PP
в этом случае он будет 64\-битным знаковым типом.
.SS lseek64()
Прототип:
.PP
.in +4n
.EX
\fBoff64_t lseek64(int \fP\fIfd\fP\fB, off64_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
В библиотечной функции \fBlseek64\fP() используется 64\-битный тип, даже если
\fIoff_t\fP является 32\-битным типом. Её прототип (и тип \fIoff64_t\fP) доступен
только когда при компиляции определён макрос
.PP
.in +4n
.EX
#define _LARGEFILE64_SOURCE
.EE
.in
.PP
.\" in glibc 2.0.94, not in 2.0.6
Функция \fBlseek64\fP() доступна начиная с glibc 2.1 и определена как псевдоним
\fBllseek\fP().
.SS llseek()
Прототип:
.PP
.in +4n
.EX
\fBloff_t llseek(int \fP\fIfd\fP\fB, loff_t \fP\fIoffset\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
.\" in libc 5.0.9, not in 4.7.6
Тип \fIloff_t\fP является 64\-битным знаковым типом. Библиотечная функция
\fBllseek\fP() доступна в glibc и работает без каких\-либо дополнительных
определений. Однако в glibc для неё нет  прототипа. Пользователи должны
добавить указанный выше прототип или его эквивалент в свой исходный
код. Когда пользователи стали жаловаться на потерю данных, вызванную
неправильной компиляцией \fBe2fsck\fP(8), в glibc 2.1.3 добавили предупреждение
времени компоновки.
.PP
.in +4n
"the \`llseek\' function may be dangerous; use \`lseek64\' instead."
.in
.PP
Это делает данную бесполезной в случае, если кто\-то захочет избавиться от
предупреждения.
.SS _llseek()
На 32\-битных архитектурах данный системный вызов используется для реализации
перечисленных выше функций. Прототип:
.PP
.in +4n
.EX
\fBint _llseek(int \fP\fIfd\fP\fB, off_t \fP\fIoffset_hi\fP\fB, off_t \fP\fIoffset_lo\fP\fB,\fP
\fB            loff_t *\fP\fIresult\fP\fB, int \fP\fIwhence\fP\fB);\fP
.EE
.in
.PP
Подробную информацию смотрите в \fBllseek\fP(2).
.PP
На 64\-битных архитектурах системный вызов \fB_llseek\fP() не требуется. Вместо
него в них используется системный вызов \fBlseek\fP(2), поддерживающий
64\-битные файловые смещения.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lb lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBlseek64\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBllseek\fP(2), \fBlseek\fP(2)
