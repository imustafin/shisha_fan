.\" -*- mode: troff; coding: UTF-8 -*-
.\" From dholland@burgundy.eecs.harvard.edu Tue Mar 24 18:08:15 1998
.\"
.\" This man page was written in 1998 by David A. Holland
.\" Polished a bit by aeb.
.\"
.\" %%%LICENSE_START(PUBLIC_DOMAIN)
.\" Placed in the Public Domain.
.\" %%%LICENSE_END
.\"
.\" 2005-06-16 mtk, mentioned freopen()
.\" 2007-12-08, mtk, Converted from mdoc to man macros
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STDIN 3 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
stdin, stdout, stderr \- стандартные потоки ввода/вывода
.SH ОБЗОР
.nf
\fB#include <stdio.h>\fP
.PP
\fBextern FILE *\fP\fIstdin\fP\fB;\fP
\fBextern FILE *\fP\fIstdout\fP\fB;\fP
\fBextern FILE *\fP\fIstderr\fP\fB;\fP
.fi
.SH ОПИСАНИЕ
В обычном состоянии каждая программа UNIX после запуска имеет при открытых
потока, один для ввода данных, один для вывода и один для печати
диагностических сообщений или ошибок. Обычно, они присоединены к терминалу
пользователя (смотрите \fBtty\fP(4)), но также они могут ссылаться на файлы или
другие устройства, в зависимости от того, как это настроил родительский
процесс (также смотрите раздел «Перенаправление (redirection)» в \fBsh\fP(1)).
.PP
Входной поток называют «стандартным вводом»; выходной поток называют
«стандартным выводом»; поток ошибок называют «стандартным потоком
ошибок». Эти термины в сокращённой форме (символы \fIstdin\fP, \fIstdout\fP и
\fIstderr\fP) используются для обращения к соответствующим файлам.
.PP
Каждый из этих символов является макросом \fBstdio\fP(3) с типом указателя на
\fIFILE\fP и может быть использован в функциях вроде \fBfprintf\fP(3) или
\fBfread\fP(3).
.PP
Так как \fIFILE\fP — буферная обёртка вокруг файловых дескрипторов UNIX, файлы,
на которые она ссылается, могут быть доступны через обычный низкоуровневый
файловый интерфейс UNIX, то есть через функции \fBread\fP(2) и \fBlseek\fP(2).
.PP
При запуске программы с потоками \fIstdin\fP, \fIstdout\fP и \fIstderr\fP связываются
целочисленные файловые дескрипторы 0, 1 и 2, соответственно. Для этих
значений в \fI<unistd.h>\fP определены препроцессорные символы
\fBSTDIN_FILENO\fP, \fBSTDOUT_FILENO\fP и \fBSTDERR_FILENO\fP (с помощью
\fBfreopen\fP(3) у любого из этих потоков можно изменить номер файлового
дескриптора, связанного с потоком).
.PP
Заметим, что одновременное использование \fIFILE\fP и низкоуровневых файловых
дескрипторов может привести к непредсказуемым результатам и этого нужно
избегать (для мазохистов: в POSIX.1, раздел 8.2.3, подробно описано как
должно работать такое взаимодействие). Общее правило: файловые дескрипторы
обрабатываются в ядре, а stdio всего лишь библиотека. Это означает, что,
например, после \fBexec\fP(3) потомок наследует все открытые файловые
дескрипторы, но все старые потоки становятся недоступными.
.PP
Так как символы \fIstdin\fP, \fIstdout\fP и \fIstderr\fP определены как макросы,
присвоение им значения непереносимо. Стандартные потоки можно связать с
различными файлами с помощью библиотечной функции \fBfreopen\fP(3), специально
созданной для переназначения \fIstdin\fP, \fIstdout\fP и \fIstderr\fP. Стандартные
потоки закрываются вызовом \fBexit\fP(3) и при нормально завершении программы.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Макросы \fIstdin\fP, \fIstdout\fP и \fIstderr\fP соответствуют C89 и этот стандарт
также оговаривает, что три этих потока должны открываться при запуске
программы.
.SH ЗАМЕЧАНИЯ
Поток \fIstderr\fP является небуферизованным. Поток \fIstdout\fP буферизируется
построчно, если подключён к терминалу. Часть строки не появляется до тех
пор, пока не будет вызвана функция \fBfflush\fP(3) или \fBexit\fP(3), или не
появится символ новой строки. Это может приводить к неожиданным результатам,
особенно при выводе диагностических сообщений. Режим буферизации стандартных
потоков (или любого другого потока) модно изменить с помощью вызова
\fBsetbuf\fP(3) или \fBsetvbuf\fP(3). Заметим, что в случае когда \fIstdin\fP связан
с терминалом, также может быть буферизация ввода в драйвере терминала, никак
не связанная с буферизацией stdio (более того, обычный терминальный ввод
буферизируется построчно в ядре). Работу ядра по обработке ввода можно
изменить с помощью вызова \fBtcsetattr\fP(3) и подобным; также смотрите
\fBstty\fP(1) и \fBtermios\fP(3).
.SH "СМОТРИТЕ ТАКЖЕ"
\fBcsh\fP(1), \fBsh\fP(1), \fBopen\fP(2), \fBfopen\fP(3), \fBstdio\fP(3)
