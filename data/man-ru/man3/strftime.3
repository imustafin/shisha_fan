.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"     GNU texinfo documentation on glibc date/time functions.
.\" Modified Sat Jul 24 18:03:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Applied fix by Wolfgang Franke, aeb, 961011
.\" Corrected return value, aeb, 970307
.\" Added Single UNIX Spec conversions and %z, aeb/esr, 990329.
.\" 2005-11-22 mtk, added Glibc Notes covering optional 'flag' and
.\"           'width' components of conversion specifications.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STRFTIME 3 2019\-03\-06 GNU "Руководство программиста Linux"
.SH ИМЯ
strftime \- форматирование даты и времени
.SH ОБЗОР
.nf
\fB#include <time.h>\fP
.PP
\fBsize_t strftime(char *\fP\fIs\fP\fB, size_t \fP\fImax\fP\fB, const char *\fP\fIformat\fP\fB,\fP
\fB                const struct tm *\fP\fItm\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
.\" FIXME . POSIX says: Local timezone information is used as though
.\" strftime() called tzset().  But this doesn't appear to be the case
Функция \fBstrftime\fP() преобразует время из структуры \fItm\fP в соответствии с
определённым форматом \fIformat\fP и помещает результат в символьный массив
\fIs\fP размера \fImax\fP. Структура \fItm\fP определена в
\fI<time.h>\fP. Смотрите также \fBctime\fP(3).
.PP
Формат представляет собой строку с null в конце, в которой могут содержаться
специальные символьные последовательности, называемые \fIопределителями
преобразования\fP, каждая из которых состоит из символа \(aq%\(aq и ещё одного
символа, называемого \fIсимволом определителя преобразования\fP. Все остальные
символьные последовательности являются \fIобычными символьными
последовательностями\fP.
.PP
Символы из обычных символьных последовательностей (включая байт null)
копируются как есть из \fIformat\fP в \fIs\fP. Однако, символы из определителей
преобразования заменяются согласно списку, представленному ниже. В этом
списке также показаны использованные поля из структуры \fItm\fP.
.TP 
\fB%a\fP
Сокращённое название дня недели в зависимости от текущей локали (вычисляется
из \fItm_wday\fP).
.TP 
\fB%A\fP
Полное название дня недели в зависимости от текущей локали (вычисляется из
\fItm_wday\fP).
.TP 
\fB%b\fP
Сокращённое название месяца в зависимости от текущей локали (вычисляется из
\fItm_mon\fP).
.TP 
\fB%B\fP
Полное название месяца в зависимости от текущей локали (вычисляется из
\fItm_mon\fP).
.TP 
\fB%c\fP
Предпочтительный формат даты и времени для текущей локали.
.TP 
\fB%C\fP
Век (год/100) как целое двухразрядное число (SU, вычисляется из \fItm_year\fP).
.TP 
\fB%d\fP
День месяца в десятичной форме (от 01 до 31) (вычисляется из \fItm_mday\fP).
.TP 
\fB%D\fP
Эквивалентно  \fB%m/%d/%y\fP (только для американцев, в других странах обычная
форма — \fB%d/%m/%y\fP. Это означает, что международный контекст этого формата
сомнителен и лучше этот формат не использовать). (SU)
.TP 
\fB%e\fP
То же, что и \fB%d\fP: десятичное число, обозначающее номер дня месяца, но
вместо начального нуля ставится пробел (SU, вычисляется из \fItm_mday\fP).
.TP 
\fB%E\fP
Модификатор: использовать другой формат, смотрите далее. (SU)
.TP 
\fB%F\fP
Эквивалентно \fB%Y\-%m\-%d\fP (формат даты согласно ISO\ 8601). (C99)
.TP 
\fB%G\fP
Год на основе недель с веком в виде десятичного числа, согласно ISO\ 8601
(смотрите ЗАМЕЧАНИЯ). Год как четырехзначное число, соответствующее номер
недели ISO (смотрите \fB%V\fP). Это тот же формат и значение, что и \fB%Y\fP, но
если номер недели ISO входит также в прошедший или последующий год, то в
этом случае отображается прошедший год (TZ, вычисляется из \fItm_wday\fP).
.TP 
\fB%g\fP
То же, что и \fB%G\fP, но без века, то есть двухразрядное число года (00\(en99)
(TZ, вычисляется из \fItm_wday\fP, \fItm_yday\fP и \fItm_wday\fP).
.TP 
\fB%h\fP
Эквивалентно \fB%b\fP.  (SU)
.TP 
\fB%H\fP
Час как десятичное число в 24\-часовых часах (от 00 до 23) (вычисляется из
\fItm_hour\fP).
.TP 
\fB%I\fP
Час как десятичное число в 12\-часовых часах (от 01 до 12) (вычисляется из
\fItm_hour\fP).
.TP 
\fB%j\fP
День года в десятичной форме (от 001 до 366) (вычисляется из \fItm_yday\fP).
.TP 
\fB%k\fP
Час (24\-часовые часы) в виде десятичного числа (от 0 до 23); цифры
предваряются пробелом (TZ, смотрите также \fB%H\fP, вычисляется из \fItm_hour\fP).
.TP 
\fB%l\fP
Час (12\-часовые часы) в виде десятичного числа (от 1 до 12); цифры
предваряются пробелом (TZ, смотрите также \fB%I\fP, вычисляется из \fItm_hour\fP).
.TP 
\fB%m\fP
Месяц в десятичной форме (от 01 до 12) (вычисляется из \fItm_mon\fP).
.TP 
\fB%M\fP
Минута в десятичной форме (от 00 до 59) (вычисляется из \fItm_min\fP).
.TP 
\fB%n\fP
Символ новой строки. (SU)
.TP 
\fB%O\fP
Модификатор: использовать другой формат, смотрите далее. (SU)
.TP 
\fB%p\fP
Или «AM» или «PM», в соответствии со значением времени, или соответствующая
строка из текущей локали. Полдень считается как «PM», а полночь как «AM»
(вычисляется из \fItm_hour\fP).
.TP 
\fB%P\fP
Подобно \fB%p\fP но в нижнем регистре: «am» или «pm»  или соответствующая
строка из текущей локали (GNU, вычисляется из \fItm_hour\fP).
.TP 
\fB%r\fP
Время в формате с a.m. или p.m. notation. В локали POSIX это эквивалентно
\fB%I:%M:%S %p\fP.  (SU)
.TP 
\fB%R\fP
Время в 24\-часовом формате (\fB%H:%M\fP). (SU) Версия с секундами описана для
\fB%T\fP далее.
.TP 
\fB%s\fP
Количество секунд, которое прошло с начала эпохи, 1970\-01\-01 00:00:00 +0000
(UTC, TZ, вычисляется из \fImktime(tm)\fP).
.TP 
\fB%S\fP
Секунда в виде десятичного числа (от 00 до 60) (диапазон до 60 включительно
позволяет учитывать високосные секунды, вычисляется из \fItm_sec\fP).
.TP 
\fB%t\fP
Символ табуляции. (SU)
.TP 
\fB%T\fP
Время в 24\-часовом формате (\fB%H:%M:%S\fP). (SU)
.TP 
\fB%u\fP
День недели в цифровом формате (от 1 до 7), понедельник это 1. Смотрите
также \fB%w\fP. (SU, вычисляется из \fItm_wday\fP).
.TP 
\fB%U\fP
Номер недели текущего года в виде десятичного числа (от 00 до 53), начиная с
первого воскресенья как первого дня недели 01. Смотрите также \fB%V\fP и \fB%W\fP
(вычисляется из \fItm_yday\fP и \fItm_wday\fP).
.TP 
\fB%V\fP
Номер недели согласно ISO\ 8601 (смотрите ЗАМЕЧАНИЯ) в текущем году в виде
десятичного числа (от 01 до 53), где неделя 1 это первая неделя, минимум 4
дня которой находятся в новом году. Смотрите также \fB%U\fP и \fB%W\fP (SU,
вычисляется из \fItm_year\fP, \fItm_yday\fP и \fItm_wday\fP).
.TP 
\fB%w\fP
День недели в цифровом формате (от 0 до 6), понедельник это 0. Смотрите
также \fB%u\fP (вычисляется из \fItm_wday\fP).
.TP 
\fB%W\fP
Номер недели текущего года в виде десятичного числа (от 00 до 53), начиная с
первого понедельника как первого дня недели 01 (вычисляется из \fItm_yday\fP и
\fItm_wday\fP).
.TP 
\fB%x\fP
Предпочтительный формат даты без времени для текущей локали.
.TP 
\fB%X\fP
Предпочтительный формат времени без даты для текущей локали.
.TP 
\fB%y\fP
Год без века в виде десятичного числа (от 00 до 99) (вычисляется из
\fItm_year\fP).
.TP 
\fB%Y\fP
Год с веком в виде десятичного числа (вычисляется из \fItm_year\fP).
.TP 
\fB%z\fP
Числовой часовой пояс \fI+hhmm\fP или \fI\-hhmm\fP (то есть смещение часов и минут
относительно UTC). (SU)
.TP 
\fB%Z\fP
Название или сокращение часового пояса.
.TP 
\fB%+\fP
.\" Nov 05 -- Not in Linux/glibc, but is in some BSDs (according to
.\" their man pages)
Дата и время в формате \fBdate\fP(1). (TZ) (не поддерживается в glibc2)
.TP 
\fB%%\fP
Символ \(aq%\(aq.
.PP
Некоторые определения преобразования могут быть изменены с помощью указания
перед символом определителя преобразования \fIмодификатора\fP \fBE\fP или \fBO\fP,
который указывает на необходимость использования альтернативного
формата. Если альтернативный формат или определение не существует в текущей
локали, то поведение будет таким же как если бы проводилось не изменённое
преобразование. (SU) В Single UNIX Specification упомянуты \fB%Ec\fP, \fB%EC\fP,
\fB%Ex\fP, \fB%EX\fP, \fB%Ey\fP, \fB%EY\fP, \fB%Od\fP, \fB%Oe\fP, \fB%OH\fP, \fB%OI\fP, \fB%Om\fP,
\fB%OM\fP, \fB%OS\fP, \fB%Ou\fP, \fB%OU\fP, \fB%OV\fP, \fB%Ow\fP, \fB%OW\fP, \fB%Oy\fP, где
модификатор \fBO\fP означает использование альтернативных численных символов
(например, римские цифры), а модификатор E отражает альтернативное
представление, зависящее от текущей локали.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
.\" (This behavior applies since at least libc 4.4.4;
.\" very old versions of libc, such as libc 4.4.1,
.\" would return
.\" .I max
.\" if the array was too small.)
Предоставляя строку результата с завершающим байтом null, не превышающую
\fImax\fP байт, функция \fBstrftime\fP() возвращает количество символов (без учёта
конечного байта null), помещённых в массив \fIs\fP. Если длина строки
результата (включая завершающий байт null) превысила бы \fImax\fP байт, то
\fBstrftime\fP() возвращает 0, а содержимое массива будет неопределенным.
.PP
Заметим, что возвращаемое значение 0 не всегда означает ошибку. Например, во
многих локалях \fB%p\fP представляет собой пустую строку. Пустая строка
\fIformat\fP считается пустой строкой.
.SH ОКРУЖЕНИЕ
Используются переменные окружения \fBTZ\fP и \fBLC_TIME\fP.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lb lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBstrftime\fP()
T}	Безвредность в нитях	MT\-Safe env locale
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
.\" FIXME strftime() is in POSIX.1-2001 and POSIX.1-2008, but the details
.\" in the standards changed across versions. Investigate and
.\" write up.
SVr4, C89, C99. Большинство этих определителей поддерживаются стандартом
ANSI C (не помечен), Single UNIX Specification (помечен как SU), пакетом
часовых поясов Олсона (Olson) (помечен как TZ) и glibc (помечен как GNU),
кроме \fB%+\fP, которое не поддерживается в glibc2. С другой стороны, в glibc2
есть несколько дополнительных расширений. В POSIX.1 есть ссылка только на
ANSI C; в POSIX.2 описание \fBdate\fP(1) содержит несколько расширений, которые
можно применить и к \fBstrftime\fP(). Преобразование \fB%F\fP есть в C99 и
POSIX.1\-2001.
.PP
В SUSv2 определитель \fB%S\fP позволяет использовать диапазон от 00 до 61, что
даёт теоретическую возможность включать в минуту двойную високосную секунду
(такой минуты ещё никогда не было).
.SH ЗАМЕЧАНИЯ
.SS "Учёт недель в ISO 8601"
Определители \fB%G\fP, \fB%g\fP и \fB%V\fP заменяются значениями, вычисленными из
года на основе недели, который определяется стандартом ISO\ 8601. В этой
системе недели начинаются с понедельника и нумеруются с 01 до 52 или
53. Неделя 1 — это первая неделя, где четыре или более дней находятся в
новом году (иначе говоря, неделя 01 это первая неделя года, в которой есть
четверг; или неделя с 4 января). Если три или менее дней первой календарной
недели выпадают на новый год, то согласно системе счёта недель ISO 8601 эти
дни являются частью недели 53 предыдущего года. Например, 1 января 2010 это
пятница, то есть только три дня этой календарной недели выпадают на 2010. То
есть согласно системе недель ISO\ 8601 эти три дня являются частью недели 53
(\fB%V\fP) 2009 года (\fB%G\fP); неделя 01 по ISO\ 8601 для 2010 года начинается с
понедельника 4 января 2010 года.
.SS "Замечания по glibc"
.\" HP-UX and Tru64 also have features like this.
В glibc есть несколько расширений определений преобразования (эти расширения
не входят в POSIX.1\-2001, но в некоторых других системах есть подобные
возможности). Между символом \(aq%\(aq и символом определителя
преобразования может быть указан \fIflag\fP и поле \fIwidth\fP (и они указываются
до модификаторов \fBE\fP или \fBO\fP).
.PP
Допускаются следующие символьные флаги:
.TP 
\fB_\fP
(подчёркивание) Дополнять строку числового результата пробелами.
.TP 
\fB\-\fP
(перенос) Не дополнять строку числового результата.
.TP 
\fB0\fP
Дополнять строку числового результата нулями, даже если для символа
определителя преобразования по умолчанию используются пробелы для
дополнения.
.TP 
\fB^\fP
Преобразовывать алфавитные символы в строке результата в заглавные.
.TP 
\fB#\fP
Изменять регистр символов в строке результата на противоположный (этот флаг
работает только с некоторыми символами определителей преобразования, и среди
них действительно реально полезно только с \fB%Z\fP).
.PP
После флага (возможно отсутствующего) может быть указан десятичный
определитель ширины. Если реальный размер поля меньше чем эта ширина, то
строка результата дополняется (слева) до указанной ширины.
.SH ДЕФЕКТЫ
Если строка результата превысила бы \fImax\fP байт, значение \fIerrno\fP \fIне\fP
изменяется. Это делает невозможным отличить данную ошибку от случая, когда
для строки \fIformat\fP обоснованно создаётся строка результата нулевой
длины. В POSIX.1\-2001 \fIне\fP определены какие\-либо значения \fIerrno\fP для
\fBstrftime\fP().
.PP
Некоторые дефектные версии \fBgcc\fP(1) выдают сообщение об использовании
\fB%c\fP: \fIwarning: `%c' yields only last 2 digits of year in some
locales\fP. Естественно, программистам предлагается использовать \fB%c\fP, что
даёт предпочтительное представление даты и времени. Каждый, кто встречает
подобного вида странные путаницы, обходит эту проблему
\fBgcc\fP(1). Относительно понятный способ — это добавить промежуточную функцию
.PP
.in +4n
.EX
size_t
my_strftime(char *s, size_t max, const char *fmt,
            const struct tm *tm)
{
    return strftime(s, max, fmt, tm);
}
.EE
.in
.PP
В настоящее время, у \fBgcc\fP(1) есть параметр \fI\-Wno\-format\-y2k\fP, который
отключает предупреждение, поэтому такой способ решения больше не нужен.
.SH ПРИМЕР
\fBФормат даты согласно RFC\ 2822\fP (в английской локали с %a и %b)
.PP
.in +2n
"%a,\ %d\ %b\ %Y\ %T\ %z"
.PP
\fBФормат даты согласно RFC\ 822\fP (в английской локали с %a и %b)
.PP
.in +2n
"%a,\ %d\ %b\ %y\ %T\ %z"
.SS "Пример программы"
Представленную ниже программу можно использовать для экспериментов с
\fBstrftime\fP().
.PP
Несколько примеров строк результата, созданных \fBstrftime\fP() в реализации
glibc:
.PP
.in +4n
.EX
$\fB ./a.out \(aq%m\(aq\fP
Строка результата: "11"
$\fB ./a.out \(aq%5m\(aq\fP
Строка результата: "00011"
$\fB ./a.out \(aq%_5m\(aq\fP
Строка результата: "   11"
.EE
.in
.SS "Исходный код программы"
\&
.EX
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    char outstr[200];
    time_t t;
    struct tm *tmp;

    t = time(NULL);
    tmp = localtime(&t);
    if (tmp == NULL) {
        perror("localtime");
        exit(EXIT_FAILURE);
    }

    if (strftime(outstr, sizeof(outstr), argv[1], tmp) == 0) {
        fprintf(stderr, "strftime вернула 0");
        exit(EXIT_FAILURE);
    }

    printf("Строка результата: \e"%s\e"\en", outstr);
    exit(EXIT_SUCCESS);
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBdate\fP(1), \fBtime\fP(2), \fBctime\fP(3), \fBsetlocale\fP(3), \fBsprintf\fP(3),
\fBstrptime\fP(3)
