.\" -*- mode: troff; coding: UTF-8 -*-
'\" t
.\" Copyright (C) 2017 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PTHREAD_ATFORK 3 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
pthread_atfork \- регистрирует обработчики ветвления
.SH ОБЗОР
.nf
\fB#include <pthread.h>\fP
.PP
\fBint pthread_atfork(void (*\fP\fIprepare\fP\fB)(void), void (*\fP\fIparent\fP\fB)(void),\fP
\fB                   void (*\fP\fIchild\fP\fB)(void));\fP
.fi
.PP
Компонуется при указании параметра \fI\-pthread\fP.
.SH ОПИСАНИЕ
Функция \fBpthread_atfork\fP() регистрирует обработчик ветвления, которые будут
запускаться при вызове \fBfork\fP(2) этой нитью. Обработчики запускаются в
контексте нити, которая вызвала \fBfork\fP(2).
.PP
Можно регистрировать три типа обработчиков:
.IP * 3
Типом \fIprepare\fP задаётся обработчик, который выполняется од начала работы
\fBfork\fP(2).
.IP *
Типом \fIparent\fP задаётся обработчик, который выполняется в родительском
процессе после завершения работы \fBfork\fP(2).
.IP *
Типом \fIchild\fP задаётся обработчик, который выполняется в потомке после
завершения работы \fBfork\fP(2).
.PP
Любой из трёх аргументов может быть равен NULL, если обработчик не требуется
на соответствующем шаге работы \fBfork\fP(2).
.PP
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBpthread_atfork\fP() возвращается ноль. При ошибке
возвращается номер ошибки. Функция \fBpthread_atfork\fP() может быть вызвана
нитью несколько раз для регистрации нескольких обработчиков каждого
шага. Обработчики каждого шага вызываются в определённом порядке:
обработчики \fIprepare\fP вызываются в порядке обратном регистрации;
обработчики \fIparent\fP и \fIchild\fP вызываются в порядке их регистрации.
.SH ОШИБКИ
.TP 
\fBENOMEM\fP
Невозможно выделить память для записи элемента обработчика.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008.
.SH ЗАМЕЧАНИЯ
При вызове \fBfork\fP(2) в многонитевом процессе в дочернем процессе делается
копия только вызвавшей нити. Первоначальной целью \fBpthread_atfork\fP() было
позволить возвращаться в вызывающей нити в целостном состоянии. Например, на
момент вызова \fBfork\fP(2) другие нити могут заблокировать мьютексы, которые
видимы в памяти пользовательского пространства копии в потомке. Такие
мьютексы никогда не разблокируются, так как нити, создавшие блокировку, не
копируются в потомок. Целью \fBpthread_atfork\fP() было предоставить механизм,
позволяющий приложению (или библиотеке) сделать так, чтобы мьютексы, другой
процесс и состояние нити восстанавливались бы в целостном состоянии. На
практике, эта задача очень сложна для реализации.
.PP
В многонитевом процессе \fBfork\fP(2) возвращает управление в потомок; потомок
должен вызывать только функции async\-signal\-safe (смотрите
\fBsignal\-safety\fP(7)) до момента, пока не вызовет \fBexecve\fP(2) для выполнения
новой программы.
.PP
В POSIX.1 указано, что \fBpthread_atfork\fP() не должен завершаться ошибкой
\fBEINTR\fP.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBfork\fP(2), \fBatexit\fP(3), \fBpthreads\fP(7)
