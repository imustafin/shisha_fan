.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"	<mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETSERVENT_R 3 2019\-03\-06 GNU "Руководство программиста Linux"
.SH ИМЯ
getservent_r, getservbyname_r, getservbyport_r \- возвращает запись о службе
(реентерабельные версии)
.SH ОБЗОР
.nf
\fB#include <netdb.h>\fP
.PP
\fBint getservent_r(struct servent *\fP\fIresult_buf\fP\fB, char *\fP\fIbuf\fP\fB,\fP
\fB                size_t \fP\fIbuflen\fP\fB, struct servent **\fP\fIresult\fP\fB);\fP
.PP
\fBint getservbyname_r(const char *\fP\fIname\fP\fB, const char *\fP\fIproto\fP\fB,\fP
\fB                struct servent *\fP\fIresult_buf\fP\fB, char *\fP\fIbuf\fP\fB,\fP
\fB                size_t \fP\fIbuflen\fP\fB, struct servent **\fP\fIresult\fP\fB);\fP
.PP
\fBint getservbyport_r(int \fP\fIport\fP\fB, const char *\fP\fIproto\fP\fB,\fP
\fB                struct servent *\fP\fIresult_buf\fP\fB, char *\fP\fIbuf\fP\fB,\fP
\fB                size_t \fP\fIbuflen\fP\fB, struct servent **\fP\fIresult\fP\fB);\fP
.PP
.fi
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.ad l
.in
.PP
\fBgetservent_r\fP(),
\fBgetservbyname_r\fP(),
\fBgetservbyport_r\fP():
    начиная с glibc 2.19:
        _DEFAULT_SOURCE
    в glibc 2.19 и старее:
        _BSD_SOURCE || _SVID_SOURCE
.ad b
.SH ОПИСАНИЕ
Функции \fBgetservent_r\fP(), \fBgetservbyname_r\fP() и \fBgetservbyport_r\fP()
являются реентерабельными эквивалентами \fBgetservent\fP(3),
\fBgetservbyname\fP(3) и \fBgetservbyport\fP(3), соответственно. Они отличаются
способом возврата структуры \fIservent\fP и списком параметров и типом
возвращаемого значения. В этой справочной странице описаны только различия с
нереентерабельными функциями.
.PP
Вместо возврата указателя на статически выделенную структуру \fIservent\fP в
качестве результата эти функции копируют структуру в расположение, указанное
\fIresult_buf\fP.
.PP
.\" I can find no information on the required/recommended buffer size;
.\" the nonreentrant functions use a 1024 byte buffer -- mtk.
Массив \fIbuf\fP используется для хранения строковых полей из возвращаемой
структуры \fIservent\fP (нереентерабельные функции выделяют эти строки из
статического хранилища). Размер данного массива задаётся в \fIbuflen\fP. Если
\fIbuf\fP слишком мал, то вызов завершается с ошибкой \fBERANGE\fP, вызывающий
должен его повторить с большим буфером (для большинства приложений должно
быть достаточно буфера длиной 1024 байт).
.PP
Если вызов получил запись о службе, то  \fI*result\fP указывает на
\fIresult_buf\fP; в противном случае \fI*result\fP устанавливается в NULL.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении эти функции возвращают 0. При ошибке возвращается
одно из положительных значений ошибок.
.PP
При ошибке, отсутствии записи (\fBgetservbyname_r\fP(), \fBgetservbyport_r\fP())
или конце данных (\fBgetservent_r\fP()) значение \fIresult\fP равно NULL.
.SH ОШИБКИ
.TP 
\fBENOENT\fP
(\fBgetservent_r\fP()) Больше нет записей в базе данных.
.TP 
\fBERANGE\fP
Размер \fIbuf\fP слишком мал. Попробуйте ещё раз с большим буфером (и
увеличенным значением \fIbuflen\fP).
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.ad l
.TS
allbox;
lbw18 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBgetservent_r\fP(),
\fBgetservbyname_r\fP(),
\fBgetservbyport_r\fP()
T}	Безвредность в нитях	MT\-Safe locale
.TE
.ad
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Эти функции являются расширениями GNU. Функции с похожими именами есть и в
других системах, хотя и с другим набором параметров.
.SH ПРИМЕР
Программа, представленная ниже, использует \fBgetservbyport_r\fP() для
получения записи о службе для заданного порта и протокола, указанных в
командной строке. Если задан и третий параметр (целое), то он используется
как начальное значение \fIbuflen\fP; если \fBgetservbyport_r\fP() завершается с
ошибкой \fBERANGE\fP, то программа повторяет попытки с большими значениями
буфера. Пара примеров работы в сеансовой оболочке:
.PP
.in +4n
.EX
$\fB ./a.out 7 tcp 1\fP
ERANGE! Повтор с большим буфером
getservbyport_r() returned: 0 (success)  (buflen=87)
s_name=echo; s_proto=tcp; s_port=7; aliases=
$\fB ./a.out 77777 tcp\fP
getservbyport_r() returned: 0 (success)  (buflen=1024)
Ошибка вызова/запись не найдена
.EE
.in
.SS "Исходный код программы"
\&
.EX
#define _GNU_SOURCE
#include <ctype.h>
#include <netdb.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define MAX_BUF 10000

int
main(int argc, char *argv[])
{
    int buflen, erange_cnt, port, s;
    struct servent result_buf;
    struct servent *result;
    char buf[MAX_BUF];
    char *protop;
    char **p;

    if (argc < 3) {
        printf("Использование: %s ном\-порта имя\-прото [длина\-буф]\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    port = htons(atoi(argv[1]));
    protop = (strcmp(argv[2], "null") == 0 ||
              strcmp(argv[2], "NULL") == 0) ?  NULL : argv[2];

    buflen = 1024;
    if (argc > 3)
        buflen = atoi(argv[3]);

    if (buflen > MAX_BUF) {
        printf("Превышен размер буфера (%d)\en", MAX_BUF);
        exit(EXIT_FAILURE);
    }

    erange_cnt = 0;
    do {
        s = getservbyport_r(port, protop, &result_buf,
                     buf, buflen, &result);
        if (s == ERANGE) {
            if (erange_cnt == 0)
                printf("ERANGE! Повтор с большим буфером\en");
            erange_cnt++;

            /* Увеличиваем по байту за раз для того, чтобы мы могли
               точно узнать какой размер буфера требуется */

            buflen++;

            if (buflen > MAX_BUF) {
                printf("Превышен размер буфера (%d)\en", MAX_BUF);
                exit(EXIT_FAILURE);
            }
        }
    } while (s == ERANGE);

    printf("getservbyport_r() returned: %s  (buflen=%d)\en",
            (s == 0) ? "0 (success)" : (s == ENOENT) ? "ENOENT" :
            strerror(s), buflen);

    if (s != 0 || result == NULL) {
        printf("Ошибка вызова/запись не найдена\en");
        exit(EXIT_FAILURE);
    }

    printf("s_name=%s; s_proto=%s; s_port=%d; aliases=",
                result_buf.s_name, result_buf.s_proto,
                ntohs(result_buf.s_port));
    for (p = result_buf.s_aliases; *p != NULL; p++)
        printf("%s ", *p);
    printf("\en");

    exit(EXIT_SUCCESS);
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBgetservent\fP(3), \fBservices\fP(5)
