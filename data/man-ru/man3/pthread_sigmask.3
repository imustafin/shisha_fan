.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PTHREAD_SIGMASK 3 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
pthread_sigmask \- проверяет и изменяет маску заблокированных сигналов
.SH ОБЗОР
.nf
\fB#include <signal.h>\fP
.PP
\fBint pthread_sigmask(int \fP\fIhow\fP\fB, const sigset_t *\fP\fIset\fP\fB, sigset_t *\fP\fIoldset\fP\fB);\fP
.fi
.PP
Компилируется и компонуется вместе с \fI\-pthread\fP.
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
.ad l
\fBpthread_sigmask\fP():
.RS 4
_POSIX_C_SOURCE\ >=\ 199506L || _XOPEN_SOURCE\ >=\ 500
.RE
.ad b
.SH ОПИСАНИЕ
Функция \fBpthread_sigmask\fP() подобна \fBsigprocmask\fP(2), но используется в
многонитевых программах, что явно указано в POSIX.1. Другие отличия
приведены в этой странице.
.PP
Описание аргументов и работы функции смотрите в \fBsigprocmask\fP(2).
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBpthread_sigmask\fP() возвращается 0; при ошибке
возвращается номер ошибки.
.SH ОШИБКИ
Смотрите \fBsigprocmask\fP(2).
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lb lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBpthread_sigmask\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008.
.SH ЗАМЕЧАНИЯ
Новая нить наследует копию маски сигналов своего создателя.
.PP
Функция glibc \fBpthread_sigmask\fP() просто игнорирует попытки блокирования
двух сигналов реального времени, которые используются внутри реализации
NPTL. Подробности смотрите в \fBnptl\fP(7).
.SH ПРИМЕР
Показанная далее программа блокирует некоторые сигналы в главной нити, а
затем создаёт отдельную нить для получения этих сигналов с помощью
\fBsigwait\fP(3). Пример работы программы:
.PP
.in +4n
.EX
$\fB ./a.out &\fP
[1] 5423
$\fB kill \-QUIT %1\fP
Нить обработки сигналов получила сигнал 3
$\fB kill \-USR1 %1\fP
Нить обработки сигналов получила сигнал 10
$\fB kill \-TERM %1\fP
[1]+  Terminated              ./a.out
.EE
.in
.SS "Исходный код программы"
\&
.EX
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>

/* Простая функция обработки сигналов */

#define handle_error_en(en, msg) \e
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
sig_thread(void *arg)
{
    sigset_t *set = arg;
    int s, sig;

    for (;;) {
        s = sigwait(set, &sig);
        if (s != 0)
            handle_error_en(s, "sigwait");
        printf("Нить обработки сигналов получила сигнал %d\en", sig);
    }
}

int
main(int argc, char *argv[])
{
    pthread_t thread;
    sigset_t set;
    int s;

    /* Блокируем SIGQUIT и SIGUSR1; нити, созданные main(),
       унаследуют копию маски сигналов. */

    sigemptyset(&set);
    sigaddset(&set, SIGQUIT);
    sigaddset(&set, SIGUSR1);
    s = pthread_sigmask(SIG_BLOCK, &set, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_sigmask");

    s = pthread_create(&thread, NULL, &sig_thread, (void *) &set);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    /* Главная нить служит для создания других нитей и/или
       выполняет другую работу */

    pause();            /* Просто пауза, чтобы мы могли протестировать
                           программу */
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBsigaction\fP(2), \fBsigpending\fP(2), \fBsigprocmask\fP(2), \fBpthread_create\fP(3),
\fBpthread_kill\fP(3), \fBsigsetops\fP(3), \fBpthreads\fP(7), \fBsignal\fP(7)
