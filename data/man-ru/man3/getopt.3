.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 19:27:50 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon Aug 30 22:02:34 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"  longindex is a pointer, has_arg can take 3 values, using consistent
.\"  names for optstring and longindex, "\n" in formats fixed.  Documenting
.\"  opterr and getopt_long_only.  Clarified explanations (borrowing heavily
.\"  from the source code).
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990715, aeb: changed `EOF' into `-1' since that is what POSIX
.\"  says; moreover, EOF is not defined in <unistd.h>.
.\" Modified 2002-02-16, joey: added information about nonexistent
.\"  option character and colon as first option character
.\" Modified 2004-07-28, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added text to explain how to order both '[-+]' and ':' at
.\"		the start of optstring
.\" Modified 2006-12-15, mtk, Added getopt() example program.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETOPT 3 2019\-03\-06 GNU "Руководство программиста Linux"
.SH ИМЯ
getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt \-
разбираю параметры командной строки
.SH ОБЗОР
.nf
\fB#include <unistd.h>\fP
.PP
\fBint getopt(int \fP\fIargc\fP\fB, char * const \fP\fIargv[]\fP\fB,\fP
\fB           const char *\fP\fIoptstring\fP\fB);\fP
.PP
\fBextern char *\fP\fIoptarg\fP\fB;\fP
\fBextern int \fP\fIoptind\fP\fB, \fP\fIopterr\fP\fB, \fP\fIoptopt\fP\fB;\fP
.PP
\fB#include <getopt.h>\fP
.PP
\fBint getopt_long(int \fP\fIargc\fP\fB, char * const \fP\fIargv[]\fP\fB,\fP
\fB           const char *\fP\fIoptstring\fP\fB,\fP
\fB           const struct option *\fP\fIlongopts\fP\fB, int *\fP\fIlongindex\fP\fB);\fP
.PP
\fBint getopt_long_only(int \fP\fIargc\fP\fB, char * const \fP\fIargv[]\fP\fB,\fP
\fB           const char *\fP\fIoptstring\fP\fB,\fP
\fB           const struct option *\fP\fIlongopts\fP\fB, int *\fP\fIlongindex\fP\fB);\fP
.fi
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.ad l
.in
.PP
\fBgetopt\fP(): _POSIX_C_SOURCE\ >=\ 2 || _XOPEN_SOURCE
.br
\fBgetopt_long\fP(), \fBgetopt_long_only\fP(): _GNU_SOURCE
.ad b
.SH ОПИСАНИЕ
Функция \fBgetopt\fP() разбирает аргументы командной строки. Её аргументы
\fIargc\fP и \fIargv\fP являются счётчиком и массивом аргументов, которые
передаются функции \fImain\fP() при запуске программы. Элемент \fIargv\fP,
начинающийся с «\-» (и не являющийся «\-» или «\-\-»), считается
параметром. Символы этого элемента (не считая начального «\-») являются
символами параметра. При каждом повторном вызове \fBgetopt\fP() возвращают
следующий символ параметра и так для каждого следующего параметра.
.PP
Переменная \fIoptind\fP — это индекс следующего обрабатываемого элемента
\fIargv\fP. Система инициализирует это значение 1. Вызывающий может сбросить
его в 1 для перезапуска сканирования того же \fIargv\fP, или при сканировании
нового вектора аргументов.
.PP
Если \fBgetopt\fP() встречает символ другого параметра, она возвращает этот
символ, обновляя внешнюю переменную \fIoptind\fP и статическую переменную
\fInextchar\fP, так что следующий вызов \fBgetopt\fP() может продолжить проверку с
символа следующего параметра или элемента \fIargv\fP.
.PP
Если символов параметров больше нет, то \fBgetopt\fP() возвращает \-1. При этом
\fIoptind\fP станет индексом первого элемента \fIargv\fP, не являющегося
параметром.
.PP
Аргумент \fIoptstring\fP является строкой, содержащей допустимые символы
параметров. Если за таким символом стоит двоеточие, то параметр требует
указания аргумента. При этом \fBgetopt\fP() помещает указатель на следующий за
символом параметра текст в тот же элемент \fIargv\fP, или на текст следующего
элемента \fIargv\fP в \fIoptarg\fP. Два двоеточия означают, что параметр имеет
необязательный аргумент; если текущий элемент \fIargv\fP содержит текст (то
есть в самом имени слова, например «\-oarg»), то он возвращается в \fIoptarg\fP,
в противном случае \fIoptarg\fP содержит ноль. Это является расширением
GNU. Если \fIoptstring\fP содержит \fBW\fP, за которой следует точка с запятой, то
\fB\-W foo\fP рассматривается как длинный параметр \fB\-\-foo\fP (параметр \fB\-W\fP
зарезервирован POSIX.2 для реализации расширений). Такое поведение является
расширением GNU и недоступно в библиотеках до glibc 2.
.PP
По умолчанию \fBgetopt\fP() переставляет элементы содержимого \fIargv\fP в
процессе поиска, так что в конечном счёте все аргументы, не являющиеся
параметрами, оказываются в конце. Реализованы также два других режима. Если
первым символом \fIoptstring\fP является «+» или задана переменная окружения
\fBPOSIXLY_CORRECT\fP, то обработка параметров прерывается сразу, как только
находится символ не параметра. Если первым символом \fIoptstring\fP является
«\-», то каждый элемент \fIargv\fP, не являющийся параметром, обрабатывается
так, как если бы он был аргументом параметра с символом, имеющим код 1 (это
используется программами, которые требуют параметры и другие элементы
\fIargv\fP в любом порядке и их порядок важен). Специальный аргумент «\-\-»
служит для обозначения конца параметров независимо от режима.
.PP
При обработке списка параметров \fBgetopt\fP() может определить два типа
ошибок: (1) — символ параметра, не заданный в \fIoptstring\fP и (2) —
отсутствующий аргумент параметра (т. е., параметра в конце командной строки
без ожидаемого аргумента). Эти ошибки обрабатываются и о них сообщается
следующем образом:
.IP * 3
По умолчанию, \fBgetopt\fP() печатает сообщение об ошибке в стандартный поток
ошибок, помещает ошибочный символ параметра в \fIoptopt\fP и возвращает
\(aq?\(aq как результат функции.
.IP *
Если вызывающий присвоил глобальной переменной \fIopterr\fP значение 0, то
\fBgetopt\fP() не печатает сообщение об ошибке. Вызывающий может определить,
что произошла ошибка, сравнив возвращаемое значение функции с \(aq?\(aq (по
умолчанию \fIopterr\fP имеет ненулевое значение).
.IP *
.\"
Если первый символ (после необязательных \(aq+\(aq или \(aq\-\(aq, описанных
выше) \fIoptstring\fP — двоеточие (\(aq:\(aq), то \fBgetopt\fP() также не печатает
сообщение об ошибке. При этом возвращается \(aq:\(aq вместо \(aq?\(aq, что
показывает отсутствие аргумента параметра. Это позволяет вызывающему
отличить один тип ошибок от другого.
.SS "getopt_long() и getopt_long_only()"
Функция \fBgetopt_long\fP() работает так же, как \fBgetopt\fP(), за исключением
того, что она воспринимает и длинные параметры, начинающиеся с двух дефисов
(если программа принимает только длинные параметры, то значение \fIoptstring\fP
должно быть равно пустой строке (""), не NULL). Длинные параметры можно
сокращать, если сокращение сохраняет уникальность параметра или полностью
совпадает с одним из определённых параметров. Длинный параметр может иметь
значение вида \fB\-\-параметр=значение\fP или \fB\-\-параметр значение\fP.
.PP
Аргумент \fIlongopts\fP является указателем на первый элемент массива структур
\fIstruct option\fP, объявленного в \fI<getopt.h>\fP следующим образом
.PP
.in +4n
.EX
struct option {
    const char *name;
    int         has_arg;
    int        *flag;
    int         val;
};
.EE
.in
.PP
Значения различных полей:
.TP 
\fIname\fP
имя длинного параметра
.TP 
\fIhas_arg\fP
может быть: \fBno_argument\fP (или 0), если параметр не требует значения;
\fBrequired_argument\fP (или 1), если параметр требует значения;
\fBoptional_argument\fP (или 2), если параметр может иметь необязательное
значение.
.TP 
\fIflag\fP
способ возвращения результатов для длинного параметра. Если \fIflag\fP равен
NULL, то \fBgetopt_long\fP() возвращает \fIval\fP (например, вызывающая программа
может назначить \fIval\fP эквивалентом символа короткого параметра). В
противном случае \fBgetopt_long\fP() возвращает 0, а \fIflag\fP указывает на
переменную, устанавливаемое значение которой равно \fIval\fP, если параметр
найден; и оставляемую без изменений, если параметр не найден.
.TP 
\fIval\fP
значение, которое возвращается или загружается в переменную, на которую
указывает \fIflag\fP.
.PP
Последний элемент массива должен быть заполнен нулями.
.PP
Если \fIlongindex\fP не равен NULL, то он указывает на переменную, содержащую
индекс длинного параметра в соответствии с \fIlongopts\fP.
.PP
Функция \fBgetopt_long_only\fP() работает так же, как \fBgetopt_long\fP(), но в
качестве указателя длинного параметра может служить не только «\-\-», но и
«\-». Если параметр, начинающийся с «\-» (не с «\-\-»), не совпадает с длинным
параметром, но совпадает с коротким, то он обрабатывается как короткий
параметр.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
Если параметр найден, то \fBgetopt\fP() возвращает символ параметра. Если все
параметры командной строки обработаны, то \fBgetopt\fP() возвращает \-1. Если
\fBgetopt\fP() находит символ, которого нет в \fIoptstring\fP, то возвращается
«?». Если \fBgetopt\fP() находит символ с отсутствующим аргументом, то
возвращаемое значение зависит от первого символа \fIoptstring\fP: если это «:»,
то возвращается «:», в противном случае возвращается «?».
.PP
Функции \fBgetopt_long\fP() и \fBgetopt_long_only\fP() также возвращают символ
параметра, если распознан короткий параметр. Для длинного параметра они
возвращают \fIval\fP, если \fIflag\fP равен NULL, и 0 в противном
случае. Возвращаемые ошибки и \-1 имеют то же значение, что и для
\fBgetopt\fP(), кроме того, «?» возвращается при двусмысленном толковании
параметра.
.SH ОКРУЖЕНИЕ
.TP 
\fBPOSIXLY_CORRECT\fP
Если установлена эта переменная, то обработка параметров прерывается на
первом аргументе, не являющемся параметром.
.TP 
\fB_<PID>_GNU_nonoption_argv_flags_\fP
Эта переменная использовалась \fBbash\fP(1) 2.0 для связи с glibc, аргументы
которой являются результатом раскрытия шаблонов и, таким образом, не должны
рассматриваться как параметры. Такое поведение было удалено из \fBbash\fP(1)
версии 2.01, но поддержка осталась в glibc.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw24 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBgetopt\fP(),
\fBgetopt_long\fP(),
\fBgetopt_long_only\fP()
T}	Безвредность в нитях	MT\-Unsafe race:getopt env
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
.TP 
\fBgetopt\fP():
В POSIX.1\-2001, POSIX.1\-2008 и POSIX.2 описана переменная окружения
\fBPOSIXLY_CORRECT\fP. В противном случае элементы \fIargv\fP на самом деле не
являются \fIconst\fP, потому что мы изменяем их порядок. Мы будем считать их
\fIconst\fP в прототипах для совместимости этих прототипов с другими
операционными системами.
.IP
Использование «+» и «\-» в \fIoptstring\fP является расширением GNU.
.IP
В некоторых старых реализациях \fBgetopt\fP() объявлялась в
\fI<stdio.h>\fP. В SUSv1 разрешено её объявлять в \fI<unistd.h>\fP
или \fI<stdio.h>\fP. В POSIX.1\-1996 отмечено, что использование
\fI<stdio.h>\fP УСТАРЕЛО. В POSIX.1\-2001 не требуется объявлять эту
функцию в \fI<stdio.h>\fP.
.TP 
\fBgetopt_long\fP() и \fBgetopt_long_only\fP():
Эти функции являются расширениями GNU.
.SH ЗАМЕЧАНИЯ
В программе, где анализируется несколько векторов параметров, или
разбирается один вектор более одного раза и нужно использовать расширения
GNU «+» и «\-» в начале \fIoptstring\fP или изменять значение \fBPOSIXLY_CORRECT\fP
между разборами, должна повторно инициализировать \fBgetopt\fP() сбрасывая
\fIoptind\fP в 0, а не в обычное значение 1 (сброс в 0 вызывает принудительный
вызов внутренней процедуры, повторно проверяющей \fBPOSIXLY_CORRECT\fP и
расширения GNU в \fIoptstring\fP).
.SH ПРИМЕР
.SS getopt()
В приведённом ниже пример программы \fBgetopt\fP() используется два параметра
программы: \fI\-n\fP без значения и \fI\-t значение\fP со значением.
.PP
.EX
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
    int flags, opt;
    int nsecs, tfnd;

    nsecs = 0;
    tfnd = 0;
    flags = 0;
    while ((opt = getopt(argc, argv, "nt:")) != \-1) {
        switch (opt) {
        case \(aqn\(aq:
            flags = 1;
            break;
        case \(aqt\(aq:
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        default: /* \(aq?\(aq */
            fprintf(stderr, "Использование: %s [\-t nsecs] [\-n] имя\en",
                    argv[0]);
            exit(EXIT_FAILURE);
        }
    }

    printf("flags=%d; tfnd=%d; nsecs=%d; optind=%d\en",
            flags, tfnd, nsecs, optind);

    if (optind >= argc) {
        fprintf(stderr, "После параметра требуется значение\en");
        exit(EXIT_FAILURE);
    }

    printf("параметр = %s\en", argv[optind]);

    /* остальной код не показан */

    exit(EXIT_SUCCESS);
}
.EE
.SS getopt_long()
Приведённый ниже пример программы иллюстрирует использование большинства
возможностей \fBgetopt_long\fP().
.PP
.EX
#include <stdio.h>     /* для printf */
#include <stdlib.h>    /* для exit */
#include <getopt.h>

int
main(int argc, char **argv)
{
    int c;
    int digit_optind = 0;

    while (1) {
        int this_option_optind = optind ? optind : 1;
        int option_index = 0;
        static struct option long_options[] = {
            {"add",     required_argument, 0,  0 },
            {"append",  no_argument,       0,  0 },
            {"delete",  required_argument, 0,  0 },
            {"verbose", no_argument,       0,  0 },
            {"create",  required_argument, 0, \(aqc\(aq},
            {"file",    required_argument, 0,  0 },
            {0,         0,                 0,  0 }
        };

        c = getopt_long(argc, argv, "abc:d:012",
                 long_options, &option_index);
        if (c == \-1)
            break;

        switch (c) {
        case 0:
            printf("параметр %s", long_options[option_index].name);
            if (optarg)
                printf(" со значением %s", optarg);
            printf("\en");
            break;

        case \(aq0\(aq:
        case \(aq1\(aq:
        case \(aq2\(aq:
            if (digit_optind != 0 && digit_optind != this_option_optind)
              printf("Встречена цифра в двух различных элементах argv.\en");
            digit_optind = this_option_optind;
            printf("параметр %c\en", c);
            break;

        case \(aqa\(aq:
            printf("параметр a\en");
            break;

        case \(aqb\(aq:
            printf("параметр b\en");
            break;

        case \(aqc\(aq:
            printf("параметр c со значением «%s»\en", optarg);
            break;

        case \(aqd\(aq:
            printf("параметр d со значением «%s»\en", optarg);
            break;

        case \(aq?\(aq:
            break;

        default:
            printf("?? getopt вернула код символа 0%o ??\en", c);
        }
    }

    if (optind < argc) {
        printf("элементы ARGV не параметры: ");
        while (optind < argc)
            printf("%s ", argv[optind++]);
        printf("\en");
    }

    exit(EXIT_SUCCESS);
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBgetopt\fP(1), \fBgetsubopt\fP(3)
