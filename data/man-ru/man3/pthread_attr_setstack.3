.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PTHREAD_ATTR_SETSTACK 3 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
pthread_attr_setstack, pthread_attr_getstack \- изменяет/возвращает атрибуты
стека из объекта атрибутов нити
.SH ОБЗОР
.nf
\fB#include <pthread.h>\fP
.PP
\fBint pthread_attr_setstack(pthread_attr_t *\fP\fIattr\fP\fB,\fP
\fB                          void *\fP\fIstackaddr\fP\fB, size_t \fP\fIstacksize\fP\fB);\fP
\fBint pthread_attr_getstack(const pthread_attr_t *\fP\fIattr\fP\fB,\fP
\fB                          void **\fP\fIstackaddr\fP\fB, size_t *\fP\fIstacksize\fP\fB);\fP
.PP
Компилируется и компонуется вместе с \fI\-pthread\fP.
.fi
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
.ad l
\fBpthread_attr_getstack\fP(), \fBpthread_attr_setstack\fP():
.RS 4
_POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad b
.SH ОПИСАНИЕ
Функция \fBpthread_attr_setstack\fP() изменяет атрибуты адреса и размера стека
в объекте атрибутов нити, на который указывает \fIattr\fP, на значения,
задаваемые в \fIstackaddr\fP и \fIstacksize\fP, соответственно. Данными атрибутами
задаёт расположение и размер стека, который будет использоваться нитью,
создаваемой с использованием объекта атрибутов нити \fIattr\fP.
.PP
Значение \fIstackaddr\fP должно указывать на самый младший адресуемый байт
буфера из \fIstacksize\fP байт, выделенного вызывающим. Страницы выделенного
буфера должны быть доступны на чтение и запись.
.PP
Функция \fBpthread_attr_getstack\fP() возвращает атрибуты адреса и размера
стека  из объекта атрибутов нити, на который указывает \fIattr\fP, в буфер, на
который указывает \fIstackaddr\fP и \fIstacksize\fP, соответственно.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении эти функции возвращают 0; при ошибке возвращается
ненулевой номер ошибки.
.SH ОШИБКИ
Функция \fBpthread_attr_setstack\fP() может завершиться со следующей ошибкой:
.TP 
\fBEINVAL\fP
Значение \fIstacksize\fP меньше \fBPTHREAD_STACK_MIN\fP (16384) байт. В некоторых
системах эта ошибка также может возникать, если значения \fIstackaddr\fP или
\fIstackaddr\ +\ stacksize\fP не выровнены правильным образом.
.PP
В POSIX.1 также описана ошибка \fBEACCES\fP, которая возникает, если область
стека, определённая \fIstackaddr\fP и \fIstacksize\fP, недоступна вызывающему на
чтение и запись.
.SH ВЕРСИИ
Эти функции определены в glibc начиная с версии 2.2.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw24 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBpthread_attr_setstack\fP(),
\fBpthread_attr_getstack\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008.
.SH ЗАМЕЧАНИЯ
Эти функции нужны приложениям, в которых нужно размещать стек в определённом
месте. В большинстве приложений это не нужно и эти функции использовать не
стоит (используйте \fBpthread_attr_setstacksize\fP(3), если приложению нужно
задать только размер стека, отличный от умолчательного).
.PP
Когда приложение использует \fBpthread_attr_setstack\fP(), оно самостоятельно
выделяет место под стек. Защитный размер, задаваемый
\fBpthread_attr_setguardsize\fP(3), игнорируется. Если его учитывать
необходимо, то приложение должно самостоятельно выделять защитную область
(одну или несколько страниц, защищённых от чтения и записи) для обработки
возможного переполнения стека.
.PP
Адрес, указанный в \fIstackaddr\fP, должен быть выровнен соответствующим
образом: для полной переносимости выравнивайте его по границе страницы
(\fIsysconf(_SC_PAGESIZE)\fP). Для выделения полезно использовать функцию
\fBposix_memalign\fP(3). Вероятно, значение \fIstacksize\fP также должно быть
кратно размеру системной страницы.
.PP
Если \fIattr\fP используется при создании нескольких нитей, то вызывающий
должен изменять атрибут адреса стека между вызовами \fBpthread_create\fP(3); в
противном случае нити будут пытаться использовать одну и ту же область
памяти для стека и возникнет хаос.
.SH ПРИМЕР
Смотрите \fBpthread_attr_init\fP(3).
.SH "СМОТРИТЕ ТАКЖЕ"
.ad l
.nh
\fBmmap\fP(2), \fBmprotect\fP(2), \fBposix_memalign\fP(3), \fBpthread_attr_init\fP(3),
\fBpthread_attr_setguardsize\fP(3), \fBpthread_attr_setstackaddr\fP(3),
\fBpthread_attr_setstacksize\fP(3), \fBpthread_create\fP(3), \fBpthreads\fP(7)
