.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2001 by John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2001-10-11, 2003-08-22, aeb, added some details
.\" 2012-03-23, Michael Kerrisk <mtk.manpages@mail.com>
.\"     Document pvalloc() and aligned_alloc()
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH POSIX_MEMALIGN 3 2019\-05\-09 GNU "Руководство программиста Linux"
.SH ИМЯ
posix_memalign, aligned_alloc, memalign, valloc, pvalloc \- выделяет
выровненную область памяти
.SH ОБЗОР
.nf
\fB#include <stdlib.h>\fP
.PP
\fBint posix_memalign(void **\fP\fImemptr\fP\fB, size_t \fP\fIalignment\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *aligned_alloc(size_t \fP\fIalignment\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *valloc(size_t \fP\fIsize\fP\fB);\fP

\fB#include <malloc.h>\fP
.PP
\fBvoid *memalign(size_t \fP\fIalignment\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *pvalloc(size_t \fP\fIsize\fP\fB);\fP
.fi
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
.ad l
\fBposix_memalign\fP(): _POSIX_C_SOURCE\ >=\ 200112L
.PP
\fBaligned_alloc\fP(): _ISOC11_SOURCE
.PP
\fBvalloc\fP():
.br
.PD 0
.RS 4
.TP  4
Начиная с glibc 2.12:
.nf
(_XOPEN_SOURCE\ >=\ 500) && !(_POSIX_C_SOURCE\ >=\ 200112L)
    || /* начиная с glibc 2.19: */ _DEFAULT_SOURCE
    || /* в версии glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
.br
.fi
.TP 
До glibc 2.12:
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500
.ad b
.br
(Заголовочный файл \fI<malloc.h>\fP (нестандартный) также содержит
объявление \fBvalloc\fP(); макросов тестирования свойств не требуется)
.RE
.PD
.SH ОПИСАНИЕ
.\" glibc does this:
Функция \fBposix_memalign\fP() выделяет \fIsize\fP байт и помещает адрес
выделенной памяти в \fI*memptr\fP. Этот адрес будет кратен значению
\fIalignment\fP, которое должно быть степенью двойки и кратно \fIsizeof(void\ *)\fP. Если \fIsize\fP равно 0, то значение, помещаемое в \fI*memptr\fP, равно NULL,
или является уникальным значением указателя, который позднее можно
передавать в \fBfree\fP(3).
.PP
.\" The behavior of memalign() for size==0 is as for posix_memalign()
.\" but no standards govern this.
Устаревшая функция \fBmemalign\fP() выделяет \fIsize\fP байт и возвращает
указатель на выделенную память. Адрес памяти будет кратен значению
\fIalignment\fP, которое должны быть степенью двойки.
.PP
Функция \fBaligned_alloc\fP() подобна \fBmemalign\fP(), но добавляет ограничение
для значения \fIsize\fP, которое должно быть кратно \fIalignment\fP.
.PP
Устаревшая функция \fBvalloc\fP() выделяет \fIsize\fP байт и возвращает указатель
на выделенную память. Адрес памяти будет кратен размеру страницы. Она
эквивалентна вызову \fImemalign(sysconf(_SC_PAGESIZE),size)\fP.
.PP
Устаревшая функция \fBpvalloc\fP() подобна \fBvalloc\fP(), но округляет выделяемый
размер до следующего кратного значения системной страницы.
.PP
Эти функции не обнуляют выделяемую память.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
Функции \fBaligned_alloc\fP(), \fBmemalign\fP(), \fBvalloc\fP() и \fBpvalloc\fP() при
успешном выполнении возвращают указатель на выделенную память. При ошибке
возвращается NULL, а \fIerrno\fP присваивается номер ошибки.
.PP
.\" http://austingroupbugs.net/view.php?id=520
При успешном выполнении функция\ \fBposix_memalign\fP()  возвращает ноль и одно
из значений, перечисленных в далее, при ошибке. Значение \fIerrno\fP не
изменяется. В Linux (и других системах) \fBposix_memalign\fP() при ошибке не
изменяет \fImemptr\fP. Требование стандартизации такого поведения было
добавлено в POSIX.1\-2016.
.SH ОШИБКИ
.TP 
\fBEINVAL\fP
Аргумент \fIalignment\fP не является степенью двойки или не кратен
\fIsizeof(void\ *)\fP.
.TP 
\fBENOMEM\fP
Недостаточно памяти для выполнения запроса о выделении.
.SH ВЕРСИИ
Функции \fBmemalign\fP(), \fBvalloc\fP() и \fBpvalloc\fP() доступны во всех
библиотеках Linux libc.
.PP
Функция \fBaligned_alloc\fP() впервые появилась в glibc 2.16.
.PP
Функция \fBposix_memalign\fP() доступна в glibc начиная с версии 2.1.91.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lb lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBaligned_alloc\fP(),
.br
\fBmemalign\fP(),
.br
\fBposix_memalign\fP()
T}	Безвредность в нитях	MT\-Safe
T{
\fBvalloc\fP(),
.br
\fBpvalloc\fP()
T}	Безвредность в нитях	MT\-Unsafe init
.TE
.sp 1
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Функция \fBvalloc\fP() появилась из 3.0BSD. Она описана как устаревшая\ в 4.3BSD
и в SUSv2. Отсутствует в POSIX.1.
.PP
Функция \fBpvalloc\fP() является расширением GNU.
.PP
Функция \fBmemalign\fP() появилась из SunOS 4.1.3, но отсутствует в 4.4BSD.
.PP
Функция \fBposix_memalign\fP() появилась из POSIX.1d и описана в POSIX.1\-2001 и
POSIX.1\-2008.
.PP
.\"
Функция \fBaligned_alloc\fP() описана в стандарте C11.
.SS Заголовки
Функция \fBposix_memalign\fP() везде объявлена в \fI<stdlib.h>\fP.
.PP
В некоторых системах \fBmemalign\fP() объявлена в \fI<stdlib.h>\fP, а не в
\fI<malloc.h>\fP.
.PP
В SUSv2 функция \fBvalloc\fP() объявлена в \fI<stdlib.h>\fP. В Libc4,5 и
glibc она объявлена в \fI<malloc.h>\fP, а также в
\fI<stdlib.h>\fP, если определены соответствующие макросы тестирования
свойств (смотрите выше).
.SH ЗАМЕЧАНИЯ
Во многих системах накладываются ограничения по выравниванию, например, на
буферы, используемые для прямого ввода\-вывода в блочные устройства. В POSIX
определён вызов \fIpathconf(path,_PC_REC_XFER_ALIGN)\fP, показывающий
необходимость выравнивания. В настоящее время можно использовать
\fBposix_memalign\fP() для удовлетворения этого требования.
.PP
Функция \fBposix_memalign\fP() проверяет, что \fIalignment\fP удовлетворяет
требованиям, описанным выше. Функция \fBmemalign\fP() может не проверять
корректность аргумента \fIalignment\fP.
.PP
.\" Other systems allow passing the result of
.\" .IR valloc ()
.\" to
.\" .IR free (3),
.\" but not to
.\" .IR realloc (3).
В POSIX требуется, чтобы память, полученная через \fBposix_memalign\fP(), могла
освобождаться с помощью \fBfree\fP(3). В некоторых системах отсутствует
механизм освобождения памяти, выделенной \fBmemalign\fP() или \fBvalloc\fP() (так
как в них во \fBfree\fP(3) передаётся только указатель, полученный из
\fBmalloc\fP(3), но, например, \fBmemalign\fP() выполняет вызов \fBmalloc\fP(3) и
затем выравнивает полученное значение). Реализация glibc позволяет
освобождать память, полученную через эти функции, с помощью \fBfree\fP(3).
.PP
Функция glibc \fBmalloc\fP(3) всегда возвращает адреса памяти, выровненные по
8\-байтовой границе, поэтому данные функции требуются только, если нужны
значения с большим выравниванием.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBbrk\fP(2), \fBgetpagesize\fP(2), \fBfree\fP(3), \fBmalloc\fP(3)
