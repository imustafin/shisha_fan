.\" -*- mode: troff; coding: UTF-8 -*-
'\" t
.\" Copyright (c) 2005 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SIGSET 3 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
sigset, sighold, sigrelse, sigignore \- программный интерфейс сигналов System
V
.SH ОБЗОР
\fB#include <signal.h>\fP
.PP
\fBtypedef void (*sighandler_t)(int);\fP
.PP
\fBsighandler_t sigset(int \fP\fIsig\fP\fB, sighandler_t \fP\fIdisp\fP\fB);\fP
.PP
\fBint sighold(int \fP\fIsig\fP\fB);\fP
.PP
\fBint sigrelse(int \fP\fIsig\fP\fB);\fP
.PP
\fBint sigignore(int \fP\fIsig\fP\fB);\fP
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
.ad l
\fBsigset\fP(), \fBsighold\fP(), \fBsigrelse\fP(), \fBsigignore\fP():
.br
.RS 4
.\"    || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
_XOPEN_SOURCE\ >=\ 500
.RE
.ad
.SH ОПИСАНИЕ
Данные функции предоставляются glibc для совместимости с программами, в
которых используются старый программный интерфейс сигналов System V. Данный
программный интерфейс устарел: в новых приложениях нужно использовать
программный интерфейс сигналов POSIX (\fBsigaction\fP(2), \fBsigprocmask\fP(2) и
т.п.).
.PP
Функция \fBsigset\fP() изменяет обработку сигнала \fIsig\fP. В аргументе \fIdisp\fP
может быть указан адрес функции обработчика сигнала или одна из следующих
констант:
.TP 
\fBSIG_DFL\fP
Сбросить обработку \fIsig\fP в значение по умолчанию.
.TP 
\fBSIG_IGN\fP
Игнорировать \fIsig\fP.
.TP 
\fBSIG_HOLD\fP
Добавить \fIsig\fP в маску сигналов процесса, но оставить обработку \fIsig\fP
неизменной.
.PP
Если в \fIdisp\fP задан адрес обработчика сигналов, то при его выполнении
\fIsig\fP добавляется в маску сигналов процесса.
.PP
Если в \fIdisp\fP было указано значение отличное от \fBSIG_HOLD\fP, то \fIsig\fP
удаляется из маски сигналов процесса.
.PP
Обработку сигналов \fBSIGKILL\fP и \fBSIGSTOP\fP невозможно изменить.
.PP
Функция \fBsighold\fP() добавляет \fIsig\fP в маску сигналов вызвавшего процесса.
.PP
Функция \fBsigrelse\fP() удаляет \fIsig\fP из маски сигналов вызвавшего процесса.
.PP
Функция \fBsigignore\fP() устанавливает обработку \fIsig\fP равной \fBSIG_IGN\fP.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBsigset\fP() возвращает \fBSIG_HOLD\fP, если \fIsig\fP был
заблокирован до вызова, или предыдущий обработчик сигнала, если блокировки
не было. При ошибке \fBsigset\fP() возвращает \-1, а \fIerrno\fP записывает номер
ошибки (но смотрите раздел ДЕФЕКТЫ далее).
.PP
При успешном выполнении функции \fBsighold\fP(), \fBsigrelse\fP() и \fBsigignore\fP()
возвращают 0; при ошибке возвращается \-1, а в \fIerrno\fP — номер ошибки.
.SH ОШИБКИ
Для функции \fBsigset\fP() смотрите раздел ОШИБКИ в \fBsigaction\fP(2) и
\fBsigprocmask\fP(2).
.PP
Для функции \fBsighold\fP() и \fBsigrelse\fP() смотрите раздел ОШИБКИ в
\fBsigprocmask\fP(2).
.PP
Для функции \fBsigignore\fP() смотрите раздел ОШИБКИ в \fBsigaction\fP(2).
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw23 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBsigset\fP(),
\fBsighold\fP(),
.br
\fBsigrelse\fP(),
\fBsigignore\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Существует в SVr4, POSIX.1\-2001, POSIX.1\-2008. Эти функции устарели: не
используйте их в новых программах. В POSIX.1\-2008 функции \fBsighold\fP(),
\fBsigignore\fP(), \fBsigpause\fP(3), \fBsigrelse\fP() и \fBsigset\fP() помечены как
устаревшие, вместо них рекомендуется использовать \fBsigaction\fP(2),
\fBsigprocmask\fP(2), \fBpthread_sigmask\fP(3) и \fBsigsuspend\fP(2).
.SH ЗАМЕЧАНИЯ
Данные функции впервые появились в glibc 2.1.
.PP
Тип \fIsighandler_t\fP является расширением GNU; в этой странице он
используется только для более понятного описания прототипа \fBsigset\fP().
.PP
Функция \fBsigset\fP() предоставляет семантику надёжной обработки сигналов (как
при вызове \fBsigaction\fP(2) с значением \fIsa_mask\fP равным 0).
.PP
В System V, функция \fBsignal\fP() предоставляет ненадёжную семантику (как при
вызове \fBsigaction\fP(2) со значением \fIsa_mask\fP равным \fISA_RESETHAND |
SA_NODEFER\fP). В BSD, \fBsignal\fP() предоставляет надёжную семантику. В
POSIX.1\-2001 эти аспекты \fBsignal\fP() не определены. Подробности смотрите в
\fBsignal\fP(2).
.PP
Для ожидания сигналов в BSD и System V предоставляется функция
\fBsigpause\fP(3), но в других системах она описана с другим
аргументом. Подробности смотрите в \fBsigpause\fP(3).
.SH ДЕФЕКТЫ
В версиях glibc до 2.2, \fBsigset\fP() не блокирует \fIsig\fP, если в \fIdisp\fP было
указано значение, отличное от \fBSIG_HOLD\fP.
.PP
.\" See http://sourceware.org/bugzilla/show_bug.cgi?id=1951
В версиях glibc до 2.5, \fBsigset\fP() в двух случаях некорректно возвращает
предыдущий обработчик сигнала. Во\-первых, если \fIdisp\fP равно \fBSIG_HOLD\fP, то
при успешном выполнении \fBsigset\fP() всегда возвращается \fBSIG_HOLD\fP. Вместо
этого должен возвращаться предыдущий обработчик сигнала (если сигнал не
заблокирован, в этом случае должно возвращаться \fBSIG_HOLD\fP). Во\-вторых,
если сигнал в данный момент заблокирован, то  возвращаемое значение
успешного выполнения \fBsigset\fP() должно быть равно \fBSIG_HOLD\fP. Вместо этого
возвращается предыдущий обработчик сигнала. Эти проблемы были устранены
начиная с glibc 2.5.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBkill\fP(2), \fBpause\fP(2), \fBsigaction\fP(2), \fBsignal\fP(2), \fBsigprocmask\fP(2),
\fBraise\fP(3), \fBsigpause\fP(3), \fBsigvec\fP(3), \fBsignal\fP(7)
