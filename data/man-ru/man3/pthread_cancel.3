.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PTHREAD_CANCEL 3 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
pthread_cancel \- посылает нити запрос отмены
.SH ОБЗОР
.nf
\fB#include <pthread.h>\fP
.PP
\fBint pthread_cancel(pthread_t \fP\fIthread\fP\fB);\fP
.PP
Компилируется и компонуется вместе с \fI\-pthread\fP.
.fi
.SH ОПИСАНИЕ
Функция \fBpthread_cancel\fP() посылает нити \fIthread\fP запрос
отмены. Отреагирует нити назначения и когда на запрос отмены зависит от двух
атрибутов, которые управляют этой нитью: \fIсостояние\fP и \fIтип\fP возможности
отмены.
.PP
Состояние отменяемости нити, определённое в \fBpthread_setcancelstate\fP(3),
может быть \fIвключено\fP (по умолчанию у новых нитей) или \fIвыключено\fP. Если
отменяемость у нити выключена, то запрос отменяемости остаётся в очереди до
тех пор, пока нить не включит отменяемость. Если отменяемость у нити
включена, то когда произойдёт отмена определяется типом отменяемости.
.PP
Тип отменяемости нити, определённый в \fBpthread_setcanceltype\fP(3), может
быть \fIасинхронным\fP или \fIотложенным\fP (по умолчанию у новых
нитей). Асинхронная отменяемость означает, что нить может быть отменена в
любое время (обычно, немедленно, но система не гарантирует
этого). Отложенная отменяемость означает, что отмена будет задержана до тех
пор, пока нить не вызовет функцию, являющуюся \fIточкой отмены\fP. Список
функций, которые могут быть точками отмены, представлен в \fBpthreads\fP(7).
.PP
Когда выполняется запрошенная отмена, для \fIthread\fP выполняются следующие
шаги (в таком порядке):
.IP 1. 3
Отмена поднимает очищающие обработчики (в обратном порядке их регистрации) и
они вызываются (смотрите \fBpthread_cleanup_push\fP(3)).
.IP 2.
Вызываются деструкторы данных нити, в неопределённом порядке (смотрите
\fBpthread_key_create\fP(3)).
.IP 3.
Нить завершается (смотрите \fBpthread_exit\fP(3)).
.PP
Приведённые выше шаги выполняются асинхронно по отношению к вызову
\fBpthread_cancel\fP(); возвращаемое \fBpthread_cancel\fP() состояние всего лишь
информирует вызывающего, что  запрос отмены успешно попал в очередь.
.PP
После завершения отменённой нити, при объединении с этой нитью с помощью
\fBpthread_join\fP(3) возвращается \fBPTHREAD_CANCELED\fP в качестве состояния
выхода (объединение с нитью — единственный способ узнать о завершении
отмены).
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBpthread_cancel\fP() возвращается 0; при ошибке
возвращается ненулевой номер ошибки.
.SH ОШИБКИ
.TP 
\fBESRCH\fP
.\" .SH VERSIONS
.\" Available since glibc 2.0
Нить с идентификатором \fIthread\fP не найдена.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lb lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBpthread_cancel\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.sp 1
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008.
.SH ЗАМЕЧАНИЯ
В Linux отменяемость реализована с помощью сигналов. В реализации нитей NPTL
для этой цели используется первый сигнал реального времени (т. е.,
сигнал). В LinuxThreads используется второй сигнал реального времени (если
сигналы реального времени доступны, в противном случае используется
\fBSIGUSR2\fP).
.SH ПРИМЕР
Программа, представленная ниже, создаёт нить и затем отменяет её. Главная
нить объединяется с отменённой нитью, чтобы получить состояние выхода
\fBPTHREAD_CANCELED\fP. Далее представлен сеанс работы программы:
.PP
.in +4n
.EX
$ ./a.out
thread_func(): запущена; отмена выключена
main(): отправляем запрос отмены
thread_func(): для включения отмены
main(): нить была отменена
.EE
.in
.SS "Исходный код программы"
\&
.EX
#include <pthread.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>

#define handle_error_en(en, msg) \e
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
thread_func(void *ignored_argument)
{
    int s;

    /* выключаем отмена на некоторое время для того, чтобы
       запрос на отмену не сработал сразу же */

    s = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_setcancelstate");

    printf("thread_func(): запущена; отмена выключена\en");
    sleep(5);
    printf("thread_func(): для включения отмены\en");

    s = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_setcancelstate");

    /* sleep() является точкой отмены */

    sleep(1000);        /* должна произойти отмена во время сна */

    /* не должно до сюда дойти */

    printf("thread_func(): не отменена!\en");
    return NULL;
}

int
main(void)
{
    pthread_t thr;
    void *res;
    int s;

    /* запускаем нить, а затем посылаем ей запрос отмены */

    s = pthread_create(&thr, NULL, &thread_func, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    sleep(2);           /* даём время нити запуститься */

    printf("main(): посылаем запрос отмены\en");
    s = pthread_cancel(thr);
    if (s != 0)
        handle_error_en(s, "pthread_cancel");

    /* присоединяемся к нити для получения её кода выхода */

    s = pthread_join(thr, &res);
    if (s != 0)
        handle_error_en(s, "pthread_join");

    if (res == PTHREAD_CANCELED)
        printf("main(): нить была отменена\en");
    else
        printf("main(): нить не была отменена, чего быть не должно!)\en");
    exit(EXIT_SUCCESS);
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
.ad l
.nh
\fBpthread_cleanup_push\fP(3), \fBpthread_create\fP(3), \fBpthread_exit\fP(3),
\fBpthread_join\fP(3), \fBpthread_key_create\fP(3), \fBpthread_setcancelstate\fP(3),
\fBpthread_setcanceltype\fP(3), \fBpthread_testcancel\fP(3), \fBpthreads\fP(7)
