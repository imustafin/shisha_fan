.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH CLOCK_GETCPUCLOCKID 3 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
clock_getcpuclockid \- возвращает ID процессорных часов процесса
.SH ОБЗОР
\fB#include <time.h>\fP
.nf
.PP
\fBint clock_getcpuclockid(pid_t \fP\fIpid\fP\fB, clockid_t *\fP\fIclock_id\fP\fB);\fP
.fi
.PP
Компонуется при указании параметра \fI\-lrt\fP (только для glibc до версии
2.17).
.PP
.ad l
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
\fBclock_getcpuclockid\fP():
.RS 4
_POSIX_C_SOURCE\ >=\ 200112L
.RE
.ad
.SH ОПИСАНИЕ
Функция \fBclock_getcpuclockid\fP() возвращает ID процессорных часов процесса с
заданным \fIpid\fP в виде указателя в \fIclock_id\fP. Если значение \fIpid\fP равно
0, то возвращается ID процессорных часов вызывающего процесса.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBclock_getcpuclockid\fP() возвращает 0; при ошибке
возвращается одно из положительных значений ошибки, перечисленных в разделе
ОШИБКИ.
.SH ОШИБКИ
.TP 
\fBENOSYS\fP
Ядро не поддерживает возврат процессорных часов другого процесса и значение
\fIpid\fP не указывает на вызывающий процесс.
.TP 
\fBEPERM\fP
Вызывающий не имеет прав доступа к процессорным часам процесса, указанного в
\fIpid\fP (определено в POSIX.1\-2001; не возникает в Linux, если ядро не
собрано с поддержкой получения процессорных часов процесса, отличного от
вызывающего).
.TP 
\fBESRCH\fP
Процесс с идентификатором \fIpid\fP не найден.
.SH ВЕРСИИ
Функция \fBclock_getcpuclockid\fP() доступна в glibc начиная с версии 2.2.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw21 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBclock_getcpuclockid\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008.
.SH ЗАМЕЧАНИЯ
Вызов \fBclock_gettime\fP(2) с ID часов, полученных от вызова
\fBclock_getcpuclockid\fP() с \fIpid\fP равным 0, делает то же, что и с ID часов,
равным \fBCLOCK_PROCESS_CPUTIME_ID\fP.
.SH ПРИМЕР
Представленный ниже пример программы возвращает ID процессорных часов
процесса, чей ID указан в командной строке, а затем используется
\fBclock_gettime\fP(2) для получения времени этих часов. Пример запуска:
.PP
.in +4n
.EX
$\fB ./a.out 1\fP              # показать процессорные часы процесса init
Процессорные часы для PID 1 показывают 2.213466748 секунд
.EE
.in
.SS "Исходный код программы"
\&
.EX
#define _XOPEN_SOURCE 600
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

int
main(int argc, char *argv[])
{
    clockid_t clockid;
    struct timespec ts;

    if (argc != 2) {
        fprintf(stderr, "%s <ID_процесса>\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (clock_getcpuclockid(atoi(argv[1]), &clockid) != 0) {
        perror("clock_getcpuclockid");
        exit(EXIT_FAILURE);
    }

    if (clock_gettime(clockid, &ts) == \-1) {
        perror("clock_gettime");
        exit(EXIT_FAILURE);
    }

    printf("процессорные часы для PID %s показывают %ld.%09ld секунд\en",
            argv[1], (long) ts.tv_sec, (long) ts.tv_nsec);
    exit(EXIT_SUCCESS);
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBclock_getres\fP(2), \fBtimer_create\fP(2), \fBpthread_getcpuclockid\fP(3),
\fBtime\fP(7)
