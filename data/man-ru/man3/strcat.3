.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:11:47 1993 by Rik Faith (faith@cs.unc.edu)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncat().
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STRCAT 3 2019\-08\-02 GNU "Руководство программиста Linux"
.SH ИМЯ
strcat, strncat \- объединяет две строки
.SH ОБЗОР
.nf
\fB#include <string.h>\fP
.PP
\fBchar *strcat(char *\fP\fIdest\fP\fB, const char *\fP\fIsrc\fP\fB);\fP
.PP
\fBchar *strncat(char *\fP\fIdest\fP\fB, const char *\fP\fIsrc\fP\fB, size_t \fP\fIn\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
Функция \fBstrcat\fP() добавляет строку \fIsrc\fP к строке \fIdest\fP, перезаписывая
байт null (\(aq\e0\(aq) в конце \fIdest\fP и добавляет завершающий байт
null. Строки не могут перекрываться, а в строке \fIdest\fP должно хватать
свободного места для размещения объединённой строки. Если размер \fIdest\fP
мал, то поведение программы непредсказуемо; \fIпереполнение буфера — любимое
средство для атаки защищённых программ\fP.
.PP
Функция \fBstrncat\fP() работает аналогичным образом, но
.IP * 3
задействует не более \fIn\fP первых байт строки \fIsrc\fP и
.IP *
строка \fIsrc\fP может не завершаться байтом null, если в ней содержится \fIn\fP
или более байт.
.PP
Как и \fBstrcat\fP(), строка\-результат в \fIdest\fP всегда заканчивается байтом
null.
.PP
Если в \fIsrc\fP содержится \fIn\fP или более байт, то \fBstrncat\fP() записывает
\fIn+1\fP байт в \fIdest\fP (\fIn\fP из \fIsrc\fP плюс завершающий байт null). Поэтому
размер \fIdest\fP должен быть не менее \fIstrlen(dest)+n+1\fP.
.PP
Простейшей реализацией \fBstrncat\fP() может быть:
.PP
.in +4n
.EX
char *
strncat(char *dest, const char *src, size_t n)
{
    size_t dest_len = strlen(dest);
    size_t i;

    for (i = 0 ; i < n && src[i] != \(aq\e0\(aq ; i++)
        dest[dest_len + i] = src[i];
    dest[dest_len + i] = \(aq\e0\(aq;

    return dest;
}
.EE
.in
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
Функции \fBstrcat\fP() и \fBstrncat\fP() возвращают указатель на скопированную
строку \fIdest\fP.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw19 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fBstrcat\fP(),
\fBstrncat\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
POSIX.1\-2001, POSIX.1\-2008, C89, C99, SVr4, 4.3BSD.
.SH ЗАМЕЧАНИЯ
В некоторых системах (BSD, Solaris и других) есть следующая функция:
.PP
    size_t strlcat(char *dest, const char *src, size_t size);
.PP
.\" https://lwn.net/Articles/506530/
.\"
Эта функция добавляет строку \fIsrc\fP, оканчивающуюся null, к строке \fIdest\fP,
копируя не более \fIsize\-strlen(dest)\-1\fP байт из \fIsrc\fP, и добавляет к
результату конечный байт null, \fIесли\fP \fIsize\fP менее \fIstrlen(dest)\fP. Эта
функция исправляет проблему с переполнением буфера в \fBstrcat\fP(), но
вызывающий по прежнему должен рассматривать возможность потери данных, если
\fIsize\fP слишком мал. Функция возвращает длину строки, которую \fBstrlcat\fP()
пыталась создать; если возвращаемое значение больше или равно \fIsize\fP, то
произошла потеря данных. Если потеря данных критична, то вызывающий
\fIдолжен\fP или проверять аргументы перед вызовом, или проверять возвращаемое
функцией значение. Функция \fBstrlcat\fP() отсутствует в glibc и не
стандартизована POSIX, но доступна в Linux в библиотеке \fIlibbsd\fP.
.SH ПРИМЕР
.\"
Так как \fBstrcat\fP() и \fBstrncat\fP() должны найти байт null, завершающий
строку \fIdest\fP, начиная поиск от начала строки, время выполнения этих
функций пропорционально длине строки \fIdest\fP. Это можно увидеть из запуска
программы, представленной ниже (если целью является склейка несколько строк
в одну, то ручное копирование байт из одного источника и управление концом
строки назначения будет более производительным).
.SS "Исходный код программы"
\&
.EX
#include <string.h>
#include <time.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
#define LIM 4000000
    int j;
    char p[LIM + 1];    /* +1 для конечного байта null */
    time_t base;

    base = time(NULL);
    p[0] = \(aq\e0\(aq;

    for (j = 0; j < LIM; j++) {
        if ((j % 10000) == 0)
            printf("%d %ld\en", j, (long) (time(NULL) \- base));
        strcat(p, "a");
    }
}
.EE
.\"
.SH "СМОТРИТЕ ТАКЖЕ"
\fBbcopy\fP(3), \fBmemccpy\fP(3), \fBmemcpy\fP(3), \fBstrcpy\fP(3), \fBstring\fP(3),
\fBstrncpy\fP(3), \fBwcscat\fP(3), \fBwcsncat\fP(3)
