.\" -*- mode: troff; coding: UTF-8 -*-
.\" rtc.4
.\" Copyright 2002 Urs Thuermann (urs@isnogud.escape.de)
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" $Id: rtc.4,v 1.4 2005/12/05 17:19:49 urs Exp $
.\"
.\" 2006-02-08 Various additions by mtk
.\" 2006-11-26 cleanup, cover the generic rtc framework; David Brownell
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH RTC 4 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
rtc \- часы реального времени
.SH ОБЗОР
#include <linux/rtc.h>
.PP
\fBint ioctl(\fP\fIfd\fP\fB, RTC_\fP\fIrequest\fP\fB, \fP\fIparam\fP\fB);\fP
.SH ОПИСАНИЕ
Данное устройство представляет собой интерфейс к драйверам часов реального
времени (RTC).
.PP
В большинстве компьютеров есть одни и более аппаратных часов,  ведущих отчёт
"обычного" времени. Они называются "часами реального времени" (Real Time
Clock, RTC). Некоторые из них имеют батарею резервного питания для
продолжения работы в периоды, когда компьютер выключен. В RTC часто встроены
будильники и другие прерывания.
.PP
Все ПК i386 и системы с ACPI содержат RTC, которые совместимы с микросхемой
Motorola MC146818 из первоначальной модели PC/AT. Сегодня такие RTC обычно
встраивают в чипсет материнской платы (в южный мост), и они используют
заменяемую резервную батарею (типа «таблетки»).
.PP
В системах, несовместимых с PC (например, встраиваемые системы, собираемые
на процессоре "всё в одном"), используются другие варианты. Обычно, они не
предоставляют таких возможностей, как RTC в PC/AT.
.SS "RTC и системные часы"
Не нужно путать RTC с системными часами, которые представляют собой часы,
реализованные в ядре программно и используемые для работы \fBgettimeofday\fP(2)
и \fBtime\fP(2), а также при указании временных меток файлов и т. п. Системные
часы выдают секунды и микросекунды, начиная отсчёт от эпохи POSIX:
1970\-01\-01 00:00:00 +0000 (UTC) (в основном, реализуется на основе таймера
прерываний ведя подсчёт «мигов» (jiffy) c частотой 100, 250 или 1000 Гц). То
есть, предполагается, что они показывают обычное время как и RTC.
.PP
Ключевым отличием RTC от системных часов, является то, что RTC работают даже
когда система находится в состоянии пониженного энергопотребления (даже в
выключенном), а для системных часов такое недоступно. До своей инициализации
системные часы показывают время, прошедшее с момента запуска системы, а не с
начала эпохи POSIX. Поэтому при загрузке и после восстановления из состояния
пониженного энергопотребления в системных часах часто подстраивают текущее
время с помощью RTC. Системам без RTC требуется установить свои системные
часы с помощью других часов, возможно через сеть или ручного ввода данных.
.SS "Назначение RTC"
Из RTC можно читать или писать с помощью \fBhwclock\fP(8) или через вызовы
ioctl, перечисленные ниже.
.PP
Помимо контроля даты и времени многие RTC также позволяют генерировать
прерывания
.IP * 3
при каждом обновлении часов (т.е. раз в секунду);
.IP *
через периодические интервалы с частотой, значение которой может быть любой
степенью 2 в диапазоне от 2 Гц до 8192 Гц;
.IP *
по достижению указанного времени будильника.
.PP
Каждый из этих источников прерываний можно включать или выключать независимо
друг от друга. Во многих системах прерывание будильника можно настроить как
событие пробуждения системы, для вывода системы из состояний пониженного
энергопотребления таких как: ждущего режима (Suspend\-to\-RAM (STR), S3 в
терминологии ACPI), спящего режима (hibernation, S4 в терминологии ACPI) или
даже из "выключенного" состояния (S5 в терминологии ACPI). Но в некоторых
системах RTC с резервной батареей не могут генерировать прерывания.
.PP
Устройство \fI/dev/rtc\fP (или \fI/dev/rtc0\fP, \fI/dev/rtc1\fP и т.д.) можно открыть
только один раз (до тех пор, пока не будет закрыто) и только для чтения. При
вызове \fBread\fP(2) и \fBselect\fP(2) вызывающий процесс блокируется до
следующего приёма прерывания от RTC. После прерывания процесс может
прочитать длинное целое, в котором наименее значимый байт содержит битовую
маску типа произошедшего прерывания, а остальные 3 байта содержат количество
прерываний, произошедших с последнего вызова \fBread\fP(2).
.SS "Интерфейс ioctl(2)"
Для файловых дескрипторов, указывающих на открытые устройства RTC, доступны
следующие запросы \fBioctl\fP(2):
.TP 
\fBRTC_RD_TIME\fP
Получить время RTC в виде следующей структуры:
.IP
.in +4n
.EX
struct rtc_time {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;     /* не используется */
    int tm_yday;     /* не используется */
    int tm_isdst;    /* не используется */
};
.EE
.in
.IP
Поля структуры имеют те же значения и диапазоны что и у структуры \fItm\fP,
описанной в \fBgmtime\fP(3). Указатель на эту структуру должен передаваться в
третьем аргументе \fBioctl\fP(2).
.TP 
\fBRTC_SET_TIME\fP
Установить время RTC в значение, заданное в структуре \fIrtc_time\fP, на
которую указывает третий аргумент \fBioctl\fP(2). Для установки времени RTC
процесс должен иметь права (т.е., мандат \fBCAP_SYS_TIME\fP).
.TP 
\fBRTC_ALM_READ\fP, \fBRTC_ALM_SET\fP
Получить и установить время будильника, если он поддерживается
RTC. Прерывание будильника должно быть включено или выключено отдельно с
помощью запросов \fBRTC_AIE_ON\fP, \fBRTC_AIE_OFF\fP. Третий аргумент \fBioctl\fP(2)
является указателем на структуру \fIrtc_time\fP. В структуре используются
только поля \fItm_sec\fP, \fItm_min\fP и \fItm_hour\fP.
.TP 
\fBRTC_IRQP_READ\fP, \fBRTC_IRQP_SET\fP
Получить и установить частоту периодических прерываний, если они
поддерживаются RTC. Периодическое прерывание должно быть включено или
выключено отдельно с помощью запросов \fBRTC_PIE_ON\fP, \fBRTC_PIE_OFF\fP. Третий
аргумент \fBioctl\fP(2) имеет тип \fIunsigned long\ *\fP или \fIunsigned long\fP,
соответственно. Значение задаёт частоту прерываний в секунду. Можно
указывать частоты кратны степени 2 в диапазоне от 2 до 8192. Только
привилегированный процесс (т.е., имеющий мандат \fBCAP_SYS_RESOURCE\fP) может
устанавливать частоты выше значения, указанного в
\fI/proc/sys/dev/rtc/max\-user\-freq\fP. (По умолчанию в этом файле содержится
значение 64.)
.TP 
\fBRTC_AIE_ON\fP, \fBRTC_AIE_OFF\fP
Включить или выключить прерывание от будильника, если RTC поддерживает
будильники. Третий аргумент \fBioctl\fP(2) игнорируется.
.TP 
\fBRTC_UIE_ON\fP, \fBRTC_UIE_OFF\fP
Включить или выключить прерывание при каждом обновлении часов, если RTC
поддерживает создание прерываний один раз в секунду. Третий аргумент
\fBioctl\fP(2) игнорируется.
.TP 
\fBRTC_PIE_ON\fP, \fBRTC_PIE_OFF\fP
Включить или выключить периодическое прерывание, если RTC поддерживает
периодические прерывания. Третий аргумент \fBioctl\fP(2) игнорируется. Только
привилегированный процесс (т.е., имеющий мандат \fBCAP_SYS_RESOURCE\fP) может
устанавливать частоты выше значения, указанного в
\fI/proc/sys/dev/rtc/max\-user\-freq\fP.
.TP 
\fBRTC_EPOCH_READ\fP, \fBRTC_EPOCH_SET\fP
В многих RTC год кодируется в 8\-битном регистре, значение которого может
учитываться как 8\-битное двоичное число или как число в двоично\-десятичном
коде (BCD). В обоих случаях, число учитывается относительно начала эпохи
RTC. Эпоха RTC на большинстве систем начинается с 1900 года, но на Alpha и
MIPS также она может начинаться с 1952, 1980 или 2000 года, в зависимости от
значения годового регистра RTC. С некоторыми RTC эти операции можно
использовать для чтения или установки эпохи RTC, соответственно. Третий
аргумент \fBioctl\fP(2) имеет тип \fIunsigned long\ *\fP или \fIunsigned long\fP,
соответственно, а возвращаемое значение (или назначаемое) является
эпохой. Чтобы установить эпоху RTC процесс должен быть привилегированным
(т.е., иметь мандат \fBCAP_SYS_TIME\fP).
.TP 
\fBRTC_WKALM_RD\fP, \fBRTC_WKALM_SET\fP
Некоторые RTC поддерживают более универсальный интерфейс будильника, в
котором эти ioctl используются для чтения и записи времени будильника RTC
(соответственно) с помощью структуры:
.PP
.RS
.in +4n
.EX
struct rtc_wkalrm {
    unsigned char enabled;
    unsigned char pending;
    struct rtc_time time;
};
.EE
.in
.RE
.IP
Флаг \fIenabled\fP используется для включения или отключения прерывания
будильника, или для чтения его текущего состояния; когда совершаются данные
вызовы \fBRTC_AIE_ON\fP и \fBRTC_AIE_OFF\fP не используются. Флаг \fIpending\fP
используется \fBRTC_WKALM_RD\fP для сообщения об ожидающем прерывании (хотя это
практически бесполезно в Linux, за исключением RTC, управляемого
микропрограммой EFI). Поле \fItime\fP используется \fBRTC_ALM_READ\fP и
\fBRTC_ALM_SET\fP, но поля \fItm_mday\fP, \fItm_mon\fP и \fItm_year\fP также
учитываются. Указатель на эту структуру должен передаваться в третьем
аргументе \fBioctl\fP(2).
.SH ФАЙЛЫ
.TP 
\fI/dev/rtc\fP, \fI/dev/rtc0\fP, \fI/dev/rtc1\fP, и тд.
Файлы специального символьного устройства RTC.
.TP 
\fI/proc/driver/rtc\fP
состояние (первого) RTC.
.SH ЗАМЕЧАНИЯ
Когда системное время ядра синхронизируется с внешним источником с помощью
\fBadjtimex\fP(2), оно будет обновляться назначенным RTC с периодичностью
каждые 11 минут. Для этого ядро на время отключает периодические прерывания;
это может повлиять на программы, использующие RTC.
.PP
Эпоха RTC не имеет ничего общего с эпохой POSIX, которая используется только
в системных часах.
.PP
Если год, согласно эпохи RTC и регистр года меньше чем 1970, то
предполагается, что время на 100 лет позже, то есть, между 2000 и 2069
годами.
.PP
Некоторые RTC поддерживают значения «шаблона» в полях будильника, чтобы
обеспечить поддержку сценариев, например периодические будильники, через
первые 15 минут в начале каждого часа, или первый день каждого месяца. Но
это непереносимо; переносимый код пользовательского пространства только
ожидает единичное прерывание от будильника, и будет или отключать, или
реинициализировать будильник после приёма.
.PP
Некоторые RTC поддерживают периодические прерывания с периодами кратными
степени 2, а не дробной секунде; несколько будильников; программируемые
выходные сигналы часов; энергонезависимую память; другие аппаратные
свойства, для которых пока ещё не предусмотрено программного интерфейса.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBdate\fP(1), \fBadjtimex\fP(2), \fBgettimeofday\fP(2), \fBsettimeofday\fP(2),
\fBstime\fP(2), \fBtime\fP(2), \fBgmtime\fP(3), \fBtime\fP(7), \fBhwclock\fP(8)
.PP
Файл \fIDocumentation/rtc.txt\fP в дереве исходного кода ядра Linux
