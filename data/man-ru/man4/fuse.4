.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2016 Julia Computing Inc, Keno Fischer
.\" Description based on include/uapi/fuse.h and code in fs/fuse
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FUSE 4 2018\-02\-02 Linux "Руководство программиста Linux"
.SH ИМЯ
fuse \- устройство файловой системы в пользовательском пространстве (FUSE)
.SH ОБЗОР
.nf
\fB#include <linux/fuse.h>\fP
.fi
.SH ОПИСАНИЕ
.PP
Это устройство является основным интерфейсом между драйвером файловой
системы FUSE и процессом в пользовательском пространстве, который будет
предоставлять файловую систему (далее здесь называется \fIслужбой файловой
системы\fP (filesystem daemon)). Данная справочная страница предназначена
тому, кто заинтересован в понимании интерфейса самого ядра. Тем, кто
реализует файловую систему FUSE, важнее описание библиотеки
пользовательского пространства такой как \fIlibfuse\fP, которая скрывает
низкоуровневый интерфейс.
.PP
.\"
В основе FUSE лежит простой клиент\-серверный протокол, в котором ядро Linux
является клиентом, а служба — сервером. После получения файлового
дескриптора этого устройства, служба может читать запросы с помощью
\fBread\fP(2) из этого файлового дескриптора и писать ответы с помощью
\fBwrite\fP(2). Важно отметить, что данный файловый дескриптор, связанный с
файловой системой FUSE, является индивидуальным. В частности, открытие
второй копии этого устройства не даст доступ к ресурсам, созданным через
первый файловый дескриптор (и наоборот).
.SS "Основной протокол"
Каждое сообщение, читаемое службой, начинается с заголовка следующей
структуры:
.PP
.in +4n
.EX
struct fuse_in_header {
    uint32_t len;       /* общая длина данных,
                           включая этот заголовок */
    uint32_t opcode;    /* тип операции (смотрите ниже) */
    uint64_t unique;    /* уникальный идентификатор этого запроса */
    uint64_t nodeid;    /* ID объекта файловой системы, с
                           которым выполняется действие */
    uint32_t uid;       /* UID запрашивающего процесса */
    uint32_t gid;       /* GID запрашивающего процесса */
    uint32_t pid;       /* PID запрашивающего процесса */
    uint32_t padding;
};
.EE
.in
.PP
После заголовка располагаются данные произвольной длины (их может и не
быть), используемые вместе с запрашиваемой операцией (запрашиваемая операция
указывается в \fIopcode\fP).
.PP
Служба обрабатывает запрос и, если нужен ответ (почти все операции требуют
ответа; если нет, то это описано далее), выполняет запись с помощью
\fBwrite\fP(2) в файловый дескриптор. Все ответы должны начинаться со
следующего заголовка:
.PP
.in +4n
.EX
struct fuse_out_header {
    uint32_t len;       /* общая длина данных, записываемых
                           в файловый дескриптор */
    int32_t  error;     /* возникшая ошибка (0, если нет) */
    uint64_t unique;    /* значение из
                           соответствующего запроса */
};
.EE
.in
.PP
.\"
После этого заголовка также располагаются данные произвольной длины
(возможно их отсутствие), в зависимости от запроса. Однако, если ответ
является ответом, содержащим ошибку, (т. е., \fIerror\fP не равно нулю), то
дополнительных данных посылаться не должно, независимо от запроса.
.SS "Расширенные сообщения"
В этом разделе должна быть документация по каждому сообщению
протокола. Данная справочная страница не закончена, поэтому описаны не все
сообщения. Для каждого сообщения сначала приводится структура, посылаемая
ядром, после чего описывается семантика сообщения.
.TP 
\fBFUSE_INIT\fP
.IP
.in +4n
.EX
struct fuse_init_in {
    uint32_t major;
    uint32_t minor;
    uint32_t max_readahead; /* начиная с протокола v7.6 */
    uint32_t flags;         /* начиная с протокола v7.6 */
};
.EE
.in
.IP
Это первый запрос, посылаемый ядром службе. Он используется для согласования
версии протокола и других параметров файловой системы. Заметим, что версия
протокола может влиять на любую структуру протокола (включая эту). Служба
должна запоминать согласованную версию и флаги для каждого сеанса. На момент
написания этой справочной страницы наибольшей версией поддерживаемого ядром
протокола была \fI7.26\fP.
.IP
Пользователи должны учесть, что описания в этой справочной странице могут
быть неполны или некорректны по отношению к старым или более новым версиям
протокола.
.IP
Ответ на этот запрос имеет следующий формат:
.IP
.in +4n
.EX
struct fuse_init_out {
    uint32_t major;
    uint32_t minor;
    uint32_t max_readahead;   /* Начиная с v7.6 */
    uint32_t flags;           /* Начиная с v7.6; некоторые биты флагов были введены позднее */
    uint16_t max_background;  /* Начиная с v7.13 */
    uint16_t congestion_threshold;  /* Начиная с v7.13 */
    uint32_t max_write;       /* Начиная с v7.5 */
    uint32_t time_gran;       /* Начиная с v7.6 */
    uint32_t unused[9];
};
.EE
.in
.IP
Если главная (major) версия, поддерживаемая ядром, больше чем поддерживаемая
службой, то ответ должен содержать только \fIuint32_t major\fP (как обычный
заголовок), показывающий наибольшую главную версию, поддерживаемую
службой. После этого ядро создаст новый запрос \fBFUSE_INIT\fP, соответствующий
более старой версии. В противном случае (то есть, если версия службы новее),
служба должна переключиться на работу с главной версией ядра.
.IP
Согласованной вспомогательной (minor) версией считается минимальная из
вспомогательных версий, поддерживаемых службой и ядром, и обе стороны должны
использовать протокол, соответствующий указанной вспомогательной версии.
.TP 
\fBFUSE_GETATTR\fP
.IP
.in +4n
.EX
struct fuse_getattr_in {
    uint32_t getattr_flags;
    uint32_t dummy;
    uint64_t fh;      /* задаётся, только если
                         (getattr_flags & FUSE_GETATTR_FH)
};
.EE
.in
.IP
Операция запроса вычисления атрибутов, возвращаемых \fBstat\fP(2) и подобными
операциями для указанного объекта файловой системы. Объект, для которого
вычисляются атрибуты, задаётся в виде \fIheader\->nodeid\fP или, если указан
флаг \fIFUSE_GETATTR_FH\fP, в виде файлового описателя (handle) \fIfh\fP. Для
последнего случая операция аналогична \fBfstat\fP(2).
.IP
С целью оптимизации производительности, эти атрибуты могут кэшироваться в
ядре на указанный период времени. Пока срок хранения кэша не истёк, атрибуты
будут браться из кэша и дополнительные запросы \fBFUSE_GETATTR\fP выполняться
не будут.
.IP
Вычисленные атрибуты и срок хранения в кэше возвращаются в следующей
структуре:
.IP
.in +4n
.EX
struct fuse_attr_out {
    /* срок хранения атрибута в кэше (секунды + наносекунды) */
    uint64_t attr_valid;
    uint32_t attr_valid_nsec;
    uint32_t dummy;
    struct fuse_attr {
        uint64_t ino;
        uint64_t size;
        uint64_t blocks;
        uint64_t atime;
        uint64_t mtime;
        uint64_t ctime;
        uint32_t atimensec;
        uint32_t mtimensec;
        uint32_t ctimensec;
        uint32_t mode;
        uint32_t nlink;
        uint32_t uid;
        uint32_t gid;
        uint32_t rdev;
        uint32_t blksize;
        uint32_t padding;
    } attr;
};
.EE
.in
.IP
.TP 
\fBFUSE_ACCESS\fP
.IP
.in +4n
.EX
struct fuse_access_in {
    uint32_t mask;
    uint32_t padding;
};
.EE
.in
.IP
Если не используется параметр монтирования \fIdefault_permissions\fP, то этот
запрос можно использовать для проверки прав доступа. Данных в ответе не
ожидается, но могут возвращаться ошибки, как обычно в поле \fIerror\fP
заголовка ответа (в частности, при ошибках отказа в доступе может
возвращаться \fB\-EACCES\fP).
.TP 
\fBFUSE_OPEN\fP и \fBFUSE_OPENDIR\fP
.in +4n
.EX
struct fuse_open_in {
    uint32_t flags;     /* флаги, передаваемые
                           в open(2) */
    uint32_t unused;
};
.EE
.in
.IP
Этот запрос открывает ноду, указанную в \fIheader\->nodeid\fP. Точна
семантика будет зависеть от реализации в файловой системе. Однако, по
крайней мере, файловая система должна проверить что запрашиваемые \fIflags\fP
корректны для указанного ресурса и затем послать ответ в следующем формате:
.IP
.IP
.in +4n
.EX
struct fuse_open_out {
    uint64_t fh;
    uint32_t open_flags;
    uint32_t padding;
};
.EE
.in
.IP
.IP
Поле \fIfh\fP представляет собой закрытый (opaque) идентификатор, который ядро
будет использовать для ссылки на этот ресурс. Поле \fIopen_flags\fP
представляет собой битовую маску с набором флагов, которые определяют
свойства этого описателя в ядре:
.RS 7
.TP  18
\fBFOPEN_DIRECT_IO\fP
Не использовать страничный кэш для этого открытого файла.
.TP 
\fBFOPEN_KEEP_CACHE\fP
Не делать недействительными данные кэша при открытии.
.TP 
\fBFOPEN_NONSEEKABLE\fP
Внутри файла не поддерживается смена положения.
.RE
.TP 
\fBFUSE_READ\fP и \fBFUSE_READDIR\fP
.IP
.in +4n
.EX
struct fuse_read_in {
    uint64_t fh;
    uint64_t offset;
    uint32_t size;
    uint32_t read_flags;
    uint64_t lock_owner;
    uint32_t flags;
    uint32_t padding;
};
.EE
.in
.IP
.IP
По этому запросу читается до \fIsize\fP байт файла или каталога, начиная с
\fIoffset\fP. Байты должны возвращаться сразу за обычным заголовком ответа.
.TP 
\fBFUSE_INTERRUPT\fP
.in +4n
.EX
struct fuse_interrupt_in {
    uint64_t unique;
};
.EE
.in
.IP
По этому запросу отменяется ожидающая операция, указанная в \fIunique\fP. По
запросу не формируется ответ. Однако, само получение сообщения не отменяет
указанную операцию. Ядро всё равно будет ждать ответа на указанную операцию
(например, ошибку \fIEINTR\fP или короткое чтение). Для указанной операции
будет выдано не более одно запроса \fBFUSE_INTERRUPT\fP. После выдачи указанной
операции ядро будет непрерывно ожидать завершения указанного запроса.
.TP 
\fBFUSE_LOOKUP\fP
Непосредственно после заголовка указывается имя файла, которое будет
искаться в каталоге, указанном в \fIheader\->nodeid\fP. Ожидается ответ в
виде:
.IP
.in +4n
.EX
struct fuse_entry_out {
    uint64_t nodeid;            /* идентификатор inode */
    uint64_t generation;        /* поколение inode */
    uint64_t entry_valid;
    uint64_t attr_valid;
    uint32_t entry_valid_nsec;
    uint32_t attr_valid_nsec;
    struct fuse_attr attr;
};
.EE
.in
.IP
Комбинация \fInodeid\fP и \fIgeneration\fP должна быть уникальной на время
существования файловой системы.
.IP
Параметры сроков хранения и \fIattr\fP такие же как в \fBFUSE_GETATTR\fP.
.TP 
\fBFUSE_FLUSH\fP
.in +4n
.EX
struct fuse_flush_in {
    uint64_t fh;
    uint32_t unused;
    uint32_t padding;
    uint64_t lock_owner;
};
.EE
.in
.IP
По этому запросу сбрасываются (flush) все ожидающие изменения для указанного
файлового описателя. Данных в ответе не ожидается. Однако, всё равно
требуется ответное сообщения после завершения операции сброса.
.TP 
\fBFUSE_RELEASE\fP и \fBFUSE_RELEASEDIR\fP
.in +4n
.EX
struct fuse_release_in {
    uint64_t fh;
    uint32_t flags;
    uint32_t release_flags;
    uint64_t lock_owner;
};
.EE
.in
.IP
Запросы, обратные \fBFUSE_OPEN\fP и \fBFUSE_OPENDIR\fP, соответственно. Служба
теперь может освободить ресурсы, связанные с файловым описателем \fIfh\fP, так
как ядру он больше не нужен. Данных в ответе не посылается, но ответ нужно
отправить после обработки запроса.
.TP 
\fBFUSE_STATFS\fP
Данная операция реализует \fBstatfs\fP(2) для этой файловой системы. В запросе
нет данных. В ответе ожидаются данные следующей структуры:
.IP
.in +4n
.EX
struct fuse_kstatfs {
    uint64_t blocks;
    uint64_t bfree;
    uint64_t bavail;
    uint64_t files;
    uint64_t ffree;
    uint32_t bsize;
    uint32_t namelen;
    uint32_t frsize;
    uint32_t padding;
    uint32_t spare[6];
};

struct fuse_statfs_out {
    struct fuse_kstatfs st;
};
.EE
.in
.IP
Информацию об этих полях смотрите в \fBstatfs\fP(2).
.SH ОШИБКИ
.TP 
\fBE2BIG\fP
Возвращается из операций \fBread\fP(2), когда запросы ядра слишком велики для
предоставляемого буфера и запросом является \fBFUSE_SETXATTR\fP.
.TP 
\fBEINVAL\fP
Возвращается из операции \fBwrite\fP(2), если ответ не прошёл тест на
правильность. При этом не все ошибки в ответах будут пойманы. Однако
обнаруживаются простые ошибки, такие как короткие ответы или некорректное
значение \fIunique\fP.
.TP 
\fBEIO\fP
Возвращается из операции \fBread\fP(2), когда запросы ядра слишком велики для
предоставляемого буфера.
.IP
\fIЗамечание\fP: Есть несколько вариантов, в которых неправильное использование
этих интерфейсов с предоставляемыми файловой системой файлами и каталогами
может завершиться ошибкой \fBEIO\fP. Например:
.RS
.IP * 3
изменение \fImode & S_IFMT\fP для иноды, о которой ранее было сообщено ядру;
или
.IP *
выдача более коротких ответов ядру, чем оно ожидает.
.RE
.TP 
\fBENODEV\fP
Возвращается из операций \fBread\fP(2) и \fBwrite\fP(2), если файловая система
FUSE была размонтирована.
.TP 
\fBEPERM\fP
Возвращается из операций над файловым дескриптором \fI/dev/fuse\fP, если он не
был смонтирован.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Файловая система FUSE есть только в Linux.
.SH ЗАМЕЧАНИЯ
Следующие сообщения пока не документированы в этой справочной странице:
.PP
.\" FIXME: Document the following.
.in +4n
.EX
\fBFUSE_BATCH_FORGET\fP
\fBFUSE_BMAP\fP
\fBFUSE_CREATE\fP
\fBFUSE_DESTROY\fP
\fBFUSE_FALLOCATE\fP
\fBFUSE_FORGET\fP
\fBFUSE_FSYNC\fP
\fBFUSE_FSYNCDIR\fP
\fBFUSE_GETLK\fP
\fBFUSE_GETXATTR\fP
\fBFUSE_IOCTL\fP
\fBFUSE_LINK\fP
\fBFUSE_LISTXATTR\fP
\fBFUSE_LSEEK\fP
\fBFUSE_MKDIR\fP
\fBFUSE_MKNOD\fP
\fBFUSE_NOTIFY_REPLY\fP
\fBFUSE_POLL\fP
\fBFUSE_READDIRPLUS\fP
\fBFUSE_READLINK\fP
\fBFUSE_REMOVEXATTR\fP
\fBFUSE_RENAME\fP
\fBFUSE_RENAME2\fP
\fBFUSE_RMDIR\fP
\fBFUSE_SETATTR\fP
\fBFUSE_SETLK\fP
\fBFUSE_SETLKW\fP
\fBFUSE_SYMLINK\fP
\fBFUSE_UNLINK\fP
\fBFUSE_WRITE\fP
.EE
.in
.SH "СМОТРИТЕ ТАКЖЕ"
\fBfusermount\fP(1), \fBmount.fuse\fP(8)
