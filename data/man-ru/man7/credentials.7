.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2007 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-06-13 Creation
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH CREDENTIALS 7 2019\-08\-02 Linux "Руководство программиста Linux"
.SH ИМЯ
credentials \- идентификаторы процесса
.SH ОПИСАНИЕ
.SS "ID (PID) процесса"
Каждый процесс имеет уникальный неотрицательный целочисленный идентификатор
(PID), который ему назначается при создании с помощью \fBfork\fP(2). Процесс
может узнать свой PID с помощью вызова \fBgetpid\fP(2). PID имеет тип \fIpid_t\fP
(определён в \fI<sys/types.h>\fP).
.PP
.\" .BR sched_rr_get_interval (2),
.\" .BR sched_getaffinity (2),
.\" .BR sched_setaffinity (2),
.\" .BR sched_getparam (2),
.\" .BR sched_setparam (2),
.\" .BR sched_setscheduler (2),
.\" .BR sched_getscheduler (2),
.\" .BR getsid (2),
.\" .BR waitid (2),
.\" .BR wait4 (2),
PID используется в различных системных вызовах для указания процесса, с
которым работает вызов, например: \fBkill\fP(2), \fBptrace\fP(2),
\fBsetpriority\fP(2) \fBsetpgid\fP(2), \fBsetsid\fP(2), \fBsigqueue\fP(3) и
\fBwaitpid\fP(2).
.PP
PID процесса сохраняется после \fBexecve\fP(2).
.SS "Родительский ID (PPID) процесса"
ID родительского процесса — это ID процесса, который создал данный процесс с
помощью \fBfork\fP(2). Процесс может получить свой PPID с помощью
\fBgetppid\fP(2). PPID имеет тип \fIpid_t\fP.
.PP
PPID процесса сохраняется после \fBexecve\fP(2).
.SS "ID группы процессов и сеанса"
У каждого процесса есть ID сеанса и ID группы процессов; они имеют тип
\fIpid_t\fP. Процесс может получить ID своего сеанса с помощью \fBgetsid\fP(2), а
ID своей группы процессов с помощью \fBgetpgrp\fP(2).
.PP
Потомок, создаваемый с помощью \fBfork\fP(2), наследует ID сеанса и группы
процессов своего родителя. Идентификатор сеанса и группы сохраняется после
\fBexecve\fP(2).
.PP
Сеансы и группы процессов — это абстракции, предназначенные для поддержки
управления заданиями оболочки. Группа процессов (иногда называемая
«заданием» (job)) — это набор процессов, у которых одинаковый ID группы
процессов; оболочка создаёт новую группу процессов для процессов,
используемых в одной команде или конвейере (например, два процесса,
созданные командой «ls\ |\ wc», помещаются в одну группу
процессов). Членство в группе процессов может быть определено с помощью
\fBsetpgid\fP(2). Процесс, чей ID процесса совпадает с его ID группы процессов,
называется \fIлидером группы процессов\fP этой группы.
.PP
Сеанс — это набор процессов, у которых одинаковый ID сеанса. Все члены
группы процессов также имеют одинаковый ID сеанса (т. е., все члены группы
процессов всегда принадлежат одному сеансу; таким образом, сеансы и группы
процессов формируют из процессов жёсткую двухуровневую иерархию). Новый
сеанс создаётся при вызове процессом \fBsetsid\fP(2), который создаёт новый
сеанс, чей ID сеанса совпадает с PID процесса, который вызвал
\fBsetsid\fP(2). Создатель сеанса также называется \fIлидером сеанса\fP.
.PP
Все процессы в сеансе используют общий \fIуправляющий терминал\fP. Управляющий
терминал назначается в момент, когда лидер сеанса впервые открывает терминал
(если при вызове \fBopen\fP(2) не указан флаг \fBO_NOCTTY\fP). Терминал может быть
управляющим терминалом не более чем для одного сеанса.
.PP
В сеансе может быть только одно \fIактивное задание\fP (foreground job); все
остальные задания в сеансе считаются \fIфоновыми заданиями\fP (background
jobs). Только активное задание может читать данные из терминала; когда
процесс в фоне пытается прочитать данные с терминала, его группе процессов
посылается сигнал \fBSIGTTIN\fP, который приостанавливает (suspends)
задание. Если у терминала установлен флаг \fBTOSTOP\fP (смотрите
\fBtermios\fP(3)), то только активное задание может писать в терминал; попытка
записи из фонового задания приводит к генерации сигнала \fBSIGTTOU\fP, который
приостанавливает задание. Если нажимаются клавиши терминала, которые
генерируют сигнал (например клавиша \fIinterrupt\fP, обычно это комбинация
control\-C), то сигнал посылается процессам в активном задании.
.PP
С членами группы процессов могут работать различные системные вызовы и
библиотечные функции, такие как: \fBkill\fP(2), \fBkillpg\fP(3),
\fBgetpriority\fP(2), \fBsetpriority\fP(2), \fBioprio_get\fP(2), \fBioprio_set\fP(2),
\fBwaitid\fP(2) и \fBwaitpid\fP(2). Также смотрите описание операций \fBF_GETOWN\fP,
\fBF_GETOWN_EX\fP, \fBF_SETOWN\fP и \fBF_SETOWN_EX\fP в \fBfcntl\fP(2).
.SS "Идентификаторы пользователя и группы"
С каждым процессом связаны идентификатор пользователя и различных групп. Эти
идентификаторы представляются в виде целых чисел с типами \fIgid_t\fP и
\fIuid_t\fP, соответственно (определены в \fI<sys/types.h>\fP).
.PP
В Linux каждый процесс имеет следующие идентификаторы пользователя и групп:
.IP * 3
Реальный ID пользователя (real user) и реальный ID группы. Эти ID определяют
кто владелец процесса. Реальный ID пользователя (группы) процесса можно
получить с помощью \fBgetuid\fP(2) (\fBgetgid\fP(2)).
.IP *
Эффективный ID пользователя (effective user) и эффективный ID группы. Эти ID
используются ядром для определения прав, которые будет иметь процесс при
доступе к общим ресурсам, таким как очереди сообщений, общая память и
семафоры. В большинстве систем UNIX эти ID также определяют права доступа к
файлам. Однако в Linux для этой задачи используются ID файловой системы,
описанные далее. Эффективный ID пользователя (группы) процесса можно
получить с помощью \fBgeteuid\fP(2) (\fBgetegid\fP(2)).
.IP *
Сохранённые set\-user\-ID и set\-group\-ID. Эти ID используются в программах с
set\-user\-ID и set\-group\-ID битами для сохранения копии соответствующих
эффективных ID, которые были установлены в момент запуска программы
(смотрите \fBexecve\fP(2)). Программа с set\-user\-ID может повышать и понижать
права, переключая свой ID эффективного пользователя туда и обратно между
значениями её ID реального пользователя и сохранённым set\-user\-ID. Такое
переключение производится с помощью вызовов \fBseteuid\fP(2), \fBsetreuid\fP(2)
или \fBsetresuid\fP(2). Программа с set\-group\-ID выполняет аналогичные задачи с
помощью \fBsetegid\fP(2), \fBsetregid\fP(2) или \fBsetresgid\fP(2). Сохранённый
set\-user\-ID (set\-group\-ID) процесса можно получить с помощью \fBgetresuid\fP(2)
(\fBgetresgid\fP(2)).
.IP *
ID пользователя файловой системы и ID группы файловой системы (есть только в
Linux). Эти ID, совместно с ID дополнительных групп (supplementary group),
описанных ниже, используются для определения прав доступа к файлам;
подробней смотрите \fBpath_resolution\fP(7). Каждый раз при изменении ID
эффективного пользователя (группы) ядро также автоматически изменяет ID
пользователя (группы) файловой системы на то же значение. Следовательно, ID
файловой системы, обычно, равны соответствующим эффективным ID, а семантика
проверки прав доступа к файлам в Linux такая же как и у других систем
UNIX. ID файловой системы можно сделать отличным от эффективных ID с помощью
вызова \fBsetfsuid\fP(2) и \fBsetfsgid\fP(2).
.IP *
.\" Since kernel 2.6.4, the limit is visible via the read-only file
.\" /proc/sys/kernel/ngroups_max.
.\" As at 2.6.22-rc2, this file is still read-only.
ID дополнительных групп (supplementary group). Определяет ID добавочных
групп, которые используются при проверке доступа к файлам и другим общим
ресурсам. В ядрах Linux до версии 2.6.4 процесс может быть членом 32
дополнительных групп; начиная с версии 2.6.4 процесс может быть членом 65536
дополнительных групп. В помощью вызова \fIsysconf(_SC_NGROUPS_MAX)\fP можно
узнать количество дополнительных групп, в которых процесс может быть
членом. Процесс может получить список ID дополнительных групп с помощь
\fBgetgroups\fP(2), и изменить этот список с помощью \fBsetgroups\fP(2).
.PP
Дочерний процесс, созданный \fBfork\fP(2), наследует копии ID пользователя и
группы своего предка. При \fBexecve\fP(2) сохраняются ID реального пользователя
и группы процесса, а также ID дополнительных групп; эффективный и
сохранённый ID могут измениться (описано в \fBexecve\fP(2)).
.PP
Кроме целей, отмеченных выше, идентификаторы пользователя процесса также
используются:
.IP * 3
при определении права на отправку сигналов (смотрите \fBkill\fP(2));
.IP *
при определении права на установку параметров планировщика процесса
(значение уступчивости, политика и приоритет планирования в реальном
времени, увязывание ЦП, приоритет ввода\-вывода) с помощью \fBsetpriority\fP(2),
\fBsched_setaffinity\fP(2), \fBsched_setscheduler\fP(2), \fBsched_setparam\fP(2),
\fBsched_setattr\fP(2) и \fBioprio_set\fP(2);
.IP *
при проверке ограничения по ресурсам (смотрите \fBgetrlimit\fP(2));
.IP *
при проверке ограничения на количество экземпляров inotify, которые процесс
может создать (смотрите \fBinotify\fP(7)).
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
ID процесса, ID родительского процесса, ID группы процессов и ID сеанса
определены в POSIX.1. ID реального, эффективного и сохранённого пользователя
и группы, а также ID дополнительных групп определены в POSIX.1. ID
пользователя и группы файловой системы являются расширением Linux.
.SH ЗАМЕЧАНИЯ
Различные поля в файле \fI/proc/[pid]/status\fP отражают идентификаторы
процесса, описанные выше. Подробности смотрите в \fBproc\fP(5).
.PP
Согласно спецификации на нити POSIX требуется, чтобы идентификаторы были
одинаковыми у всех нитей процесса. Однако на уровне ядра в Linux ведутся
отдельные идентификаторы пользователя и группы для каждой нити. Реализация
нитей NPTL выполняет дополнительные действия, чтобы любое изменение
идентификаторов пользователя и группы (например, с помощью \fBsetuid\fP(2),
\fBsetresuid\fP(2)) отражалось на всех нитях POSIX процесса. Дополнительную
информацию смотрите в \fBnptl\fP(7).
.SH "СМОТРИТЕ ТАКЖЕ"
\fBbash\fP(1), \fBcsh\fP(1), \fBgroups\fP(1), \fBid\fP(1), \fBnewgrp\fP(1), \fBps\fP(1),
\fBrunuser\fP(1), \fBsetpriv\fP(1), \fBsg\fP(1), \fBsu\fP(1), \fBaccess\fP(2),
\fBexecve\fP(2), \fBfaccessat\fP(2), \fBfork\fP(2), \fBgetgroups\fP(2), \fBgetpgrp\fP(2),
\fBgetpid\fP(2), \fBgetppid\fP(2), \fBgetsid\fP(2), \fBkill\fP(2), \fBsetegid\fP(2),
\fBseteuid\fP(2), \fBsetfsgid\fP(2), \fBsetfsuid\fP(2), \fBsetgid\fP(2),
\fBsetgroups\fP(2), \fBsetpgid\fP(2), \fBsetresgid\fP(2), \fBsetresuid\fP(2),
\fBsetsid\fP(2), \fBsetuid\fP(2), \fBwaitpid\fP(2), \fBeuidaccess\fP(3),
\fBinitgroups\fP(3), \fBkillpg\fP(3), \fBtcgetpgrp\fP(3), \fBtcgetsid\fP(3),
\fBtcsetpgrp\fP(3), \fBgroup\fP(5), \fBpasswd\fP(5), \fBshadow\fP(5),
\fBcapabilities\fP(7), \fBnamespaces\fP(7), \fBpath_resolution\fP(7),
\fBpid_namespaces\fP(7), \fBpthreads\fP(7), \fBsignal\fP(7), \fBunix\fP(7),
\fBuser_namespaces\fP(7), \fBsudo\fP(8)
