.\" -*- mode: troff; coding: UTF-8 -*-
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: udp.7,v 1.7 2000/01/22 01:55:05 freitag Exp $
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH UDP 7 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
udp \- протокол UDP (User Datagram Protocol) для IPv4
.SH ОБЗОР
\fB#include <sys/socket.h>\fP
.br
\fB#include <netinet/in.h>\fP
.br
\fB#include <netinet/udp.h>\fP
.PP
\fBudp_socket = socket(AF_INET, SOCK_DGRAM, 0);\fP
.SH ОПИСАНИЕ
Это реализация протокола пользовательских датаграмм (User Datagram Protocol,
UDP), который описан в RFC\ 768. Он обеспечивает ненадежную передачу
датаграмм без установления соединения. При пересылке пакеты могут
дублироваться, а их порядок может быть нарушен. UDP генерирует и проверяет
контрольные суммы, чтобы отловить ошибки передачи.
.PP
При создании UDP\-сокета его локальный и удалённый адрес не
указываются. Датаграммы могут быть посланы немедленно с помощью \fBsendto\fP(2)
или \fBsendmsg\fP(2) с правильным адресом назначения в качестве
аргумента. Когда для сокета вызывается \fBconnect\fP(2), то устанавливается
адрес назначения по умолчанию и с этого момента датаграммы могут отсылаться
с помощью \fBsend\fP(2) или \fBwrite\fP(2) без указания адреса назначения. При
этом всё ещё сохраняется возможность послать пакет другому адресату,
передавая его адрес через вызовы \fBsendto\fP(2) или \fBsendmsg\fP(2). Для
получения пакетов сокет сначала можно привязать к локальному адресу с
помощью \fBbind\fP(2). В противном случае сокетный уровень автоматически
присвоит свободный локальный порт из диапазона, заданного в
\fI/proc/sys/net/ipv4/ip_local_port_range\fP, и привяжет сокет к \fBINADDR_ANY\fP.
.PP
Все операции приёма возвращают только один пакет. Если пакет меньше, чем
размер буфера приема, то он возвращается целиком; если пакет больше, то он
обрезается и устанавливается флаг \fBMSG_TRUNC\fP. Флаг \fBMSG_WAITALL\fP не
поддерживается.
.PP
Параметры IP могут быть посланы или получены при помощи параметров сокета,
описанных в \fBip\fP(7). Они обрабатываются ядром, только если включён
соответствующий параметр в \fI/proc\fP (но даже если он отключен, параметры всё
равно передаются пользователю). Смотрите \fBip\fP(7).
.PP
Если при отсылке установлен флаг \fBMSG_DONTROUTE\fP, то адрес назначения
должен указывать на адрес локального интерфейса, и пакеты посылаются только
на этот интерфейс.
.PP
По умолчанию, Linux UDP выполняет обнаружение MTU (Maximum Transmission
Unit) пути. Это означает, что ядро будет следить за MTU до IP\-адреса
назначения и возвращать \fBEMSGSIZE\fP, если запись пакета UDP превысит это
значение. Когда это происходит, приложение должно уменьшить размер
пакета. Также обнаружение MTU пути можно выключить с помощью параметра
сокета \fBIP_MTU_DISCOVER\fP или в файле \fI/proc/sys/net/ipv4/ip_no_pmtu_disc\fP;
подробней смотрите в \fBip\fP(7). При отключении обнаружения UDP фрагментирует
исходящий пакет, если его общий размер превышает MTU интерфейса. Однако по
соображениям производительности и надёжности отключение не рекомендуется.
.SS "Формат адреса"
В UDP используется формат адреса IPv4 \fIsockaddr_in\fP, который описан в
\fBip\fP(7).
.SS "Обработка ошибок"
Все критические ошибки передаются пользователю в виде кода ошибки, который
возвращается, даже если сокет не был соединен. Это относится также и к
асинхронным ошибкам, при работе с сетью. Вы можете получить ошибку,
относящуюся к предыдущим пакетам, посланным на том же сокете. Такое
поведение отличается от поведения многих других реализаций BSD\-сокетов,
которые никогда не передают коды ошибок, если на сокете не установлено
соединение. Поведение Linux в этом случае соответствует \fBRFC\ 1122\fP.
.PP
Для совместимости со старым кодом в Linux 2.0 и 2.2 можно установить
параметр \fBSOL_SOCKET\fP равным \fBSO_BSDCOMPAT\fP, чтобы получать ошибки при
работе с сетью, только если сокет был соединён (кроме ошибок \fBEPROTO\fP и
\fBEMSGSIZE\fP). Ошибки, возникшие локально, передаются всегда. Поддержка
данного параметра сокета была удалена в более новых ядрах; подробней
смотрите в \fBsocket\fP(7).
.PP
Если включён параметр \fBIP_RECVERR\fP, то все ошибки хранятся в очереди ошибок
сокета и могут быть получены с помощью вызова \fBrecvmsg\fP(2) с установленным
флагом \fBMSG_ERRQUEUE\fP.
.SS "Интерфейс /proc"
Системные настройки параметров UDP доступны через файлы в каталоге
\fI/proc/sys/net/ipv4/\fP.
.TP 
\fIudp_mem\fP (начиная с Linux 2.6.25)
Вектор из трёх значений, управляющий количеством страниц, выделенных для
очереди под все сокеты UDP.
.RS
.TP  10
\fImin\fP
При значении ниже этого количества страниц UDP не беспокоится о том, как
потребляется память. Когда количество памяти, выделенной для UDP, превышает
это значение, UDP начинает регулировать расход памяти.
.TP 
\fIpressure\fP
Формат этого значения совпадает с \fItcp_mem\fP (смотрите \fBtcp\fP(7)).
.TP 
\fImax\fP
Количество страниц, выделенных для очереди под все сокеты UDP.
.RE
.IP
Значения по умолчанию этих трёх параметров вычисляются при запуске ОС исходя
из количества имеющейся памяти.
.TP 
\fIudp_rmem_min\fP (integer; значение по умолчанию: PAGE_SIZE; начиная с Linux 2.6.25)
Минимальный размер (в байтах) буферов приёма, используемых сокетами UDP в
режиме регулирования. Каждый сокет UDP может использовать этот объём
принимаемых данных, даже если общее количество страниц сокетов UDP превышает
ограничение \fIudp_mem\fP.
.TP 
\fIudp_wmem_min\fP (integer; значение по умолчанию: PAGE_SIZE; начиная с Linux 2.6.25)
Минимальный размер (в байтах) буферов отправки, используемых сокетами UDP в
режиме регулирования. Каждый сокет UDP может использовать этот объём
отправляемых данных, даже если общее количество страниц сокетов UDP
превышает ограничение \fIudp_mem\fP.
.SS "Параметры сокета"
Для получения и задания параметров сокетов UDP используйте вызовы
\fBgetsockopt\fP(2) и \fBsetsockopt\fP(2), соответственно. Значение аргумента
уровня параметров должно быть равно \fBIPPROTO_UDP\fP. Если не указано
обратного, значение \fIoptval\fP является указателем на \fIint\fP.
.PP
В следующем списке представлены параметры только для сокетов UDP. О других
параметрах, применимых к сокетам UDP, читайте в \fBsocket\fP(7).
.TP 
\fBUDP_CORK\fP (начиная с Linux 2.5.44)
.\" FIXME document UDP_ENCAP (new in kernel 2.5.67)
.\" From include/linux/udp.h:
.\"     UDP_ENCAP_ESPINUDP_NON_IKE draft-ietf-ipsec-nat-t-ike-00/01
.\"     UDP_ENCAP_ESPINUDP draft-ietf-ipsec-udp-encaps-06
.\"     UDP_ENCAP_L2TPINUDP rfc2661
.\" FIXME Document UDP_NO_CHECK6_TX and UDP_NO_CHECK6_RX, added in Linux 3.16
Если этот параметр установлен, то все выходные данные сокета накапливаются в
одной датаграмме, которая отправляется после того, как параметр
сбрасывается. Данный параметр не должен использоваться в переносимом коде.
.SS "Вызовы ioctl"
Данные ioctl доступны через вызов \fBioctl\fP(2). Синтаксис:
.PP
.RS
.nf
\fBint\fP\fI value\fP\fB;\fP
\fIerror\fP\fB = ioctl(\fP\fIudp_socket\fP\fB, \fP\fIioctl_type\fP\fB, &\fP\fIvalue\fP\fB);\fP
.fi
.RE
.TP 
\fBFIONREAD\fP (\fBSIOCINQ\fP)
.\" See http://www.securiteam.com/unixfocus/5KP0I15IKO.html
.\" "GNUnet DoS (UDP Socket Unreachable)", 14 May 2006
В качестве параметра ожидается указатель на integer. Возвращает размер (в
байтах) следующей ожидающей датаграммы, помещая его по указанному адресу,
или 0, если нет ожидающей датаграммы. \fBПредупреждение:\fP при использовании
\fBFIONREAD\fP невозможно понять, есть ли ожидающие датаграммы или просто
следующая датаграмма не содержит данных. В этих случаях безопасней
использовать \fBselect\fP(2), \fBpoll\fP(2), или \fBepoll\fP(7).
.TP 
\fBTIOCOUTQ\fP (\fBSIOCOUTQ\fP)
Возвращает количество байт данных в локальной очереди
отправки. Поддерживается только в Linux 2.4 и выше.
.PP
Дополнительно поддерживаются все ioctl, описанные в \fBip\fP(7) и \fBsocket\fP(7).
.SH ОШИБКИ
При отправке или приёме на сокете UDP могут быть получены все коды ошибок,
описанные в \fBsocket\fP(7) или \fBip\fP(7).
.TP 
\fBECONNREFUSED\fP
С адресом назначения не связан ни один получатель. Эта ошибка может быть
вызвана предыдущим пакетом, посланным через этот сокет.
.SH ВЕРСИИ
.\" .SH CREDITS
.\" This man page was written by Andi Kleen.
Параметр \fBIP_RECVERR\fP появился в Linux 2.2.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBip\fP(7), \fBraw\fP(7), \fBsocket\fP(7), \fBudplite\fP(7)
.PP
Протокол пользовательских датаграмм описан в RFC\ 768.
.br
В RFC\ 1122 описаны требования к узлу.
.br
В RFC\ 1191 описан процесс обнаружения MTU маршрута.
