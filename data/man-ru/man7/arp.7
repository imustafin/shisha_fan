.\" -*- mode: troff; coding: UTF-8 -*-
'\" t
.\" This man page is Copyright (C) 1999 Matthew Wilcox <willy@bofh.ai>.
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" Modified June 1999 Andi Kleen
.\" $Id: arp.7,v 1.10 2000/04/27 19:31:38 ak Exp $
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH ARP 7 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
arp \- модуль ядра Linux для ARP
.SH ОПИСАНИЕ
Этот модуль ядра реализует Address Resolution Protocol (протокол разрешения
адресов), определённый в RFC\ 826. Протокол предназначен для преобразования
аппаратных адресов второго уровня (Layer2) в адреса протокола IPv4 в
соединённых напрямую сетях. Как правило, пользователю не приходится работать
с этим модулем непосредственно, исключая случаи его настройки — модуль
используется другими протоколами ядра.
.PP
Процесс пользователя может получать пакеты ARP через сокеты
\fBpacket\fP(7). Кроме того, существует механизм управления кэшем ARP из
пространства пользователя с помощью сокетов \fBnetlink\fP(7). Таблицей ARP
также можно управлять с помощью \fBioctl \fP(2) из произвольного сокета
\fBAF_INET\fP.
.PP
Модуль ARP поддерживает кэш отображения аппаратных адресов в протокольные
адреса. Размер кэша ограничен, поэтому старые и мало используемые записи
удаляются. Записи, помеченные как постоянные, не удаляются никогда. Кэшем
можно управлять непосредственно, с помощью ioctl\-вызовов. Работа кэша может
быть настроена с помощью интерфейсов \fI/proc\fP, описанных ниже.
.PP
Если в течение некоторого времени (см. \fI/proc\fP интерфейсы ниже) не
подтверждается корректность (positive feedback) существующей записи кэша, то
она считается устаревшей. Подтверждение может быть получено от более
высокого уровня, например, при получении TCP ACK. Другие протоколы могут
выполнить подтверждение, используя флаг \fBMSG_CONFIRM\fP при вызове
\fBsendmsg\fP(2). Если подтверждения нет, то ARP пытается повторить
запрос. Сначала он пытается запросить обновлённый MAC\-адрес у локальной
службы arp \fBapp_solicit\fP раз. Если получить адрес не удалось, а старый
MAC\-адрес известен, то посылается адресный запрос \fBucast_solicit\fP раз. Если
и после этого адрес определить не удалось, то по сети посылается новый
широковещательный ARP\-запрос. Запросы посылаются только при наличии данных в
очереди для отправки.
.PP
Linux автоматически добавляет динамическую запись proxy arp, когда система
получает запрос адреса, для которого она производит пересылку и если proxy
arp включён на принимающем интерфейсе. При наличии маршрута отказа (reject
route) добавление proxy arp не производится.
.SS "Вызовы ioctl"
Для всех сокетов \fBAF_INET\fP доступно три ioctl\-вызова. В качестве параметра
ожидается указатель на структуру \fIstruct arpreq\fP.
.PP
.in +4n
.EX
struct arpreq {
    struct sockaddr arp_pa;      /* адрес протокола */
    struct sockaddr arp_ha;      /* аппаратный адрес */
    int             arp_flags;   /* флаги */
    struct sockaddr arp_netmask; /* сетевая маска адреса протокола */
    char            arp_dev[16];
};
.EE
.in
.PP
Вызовы \fBSIOCSARP\fP, \fBSIOCDARP\fP и \fBSIOCGARP\fP соответственно устанавливают,
удаляют и считывают отображение ARP. Для установки или удаления отображений
ARP процесс должен иметь мандат \fBCAP_NET_ADMIN\fP или эффективный UID, равный
0.
.PP
Поле \fIarp_pa\fP должно быть сокетом \fBAF_INET\fP, а \fIarp_ha\fP должно иметь тот
же тип, что и тип устройства, указанный в \fIarp_dev\fP. Поле \fIarp_dev\fP —
строка с именем устройства, оканчивающаяся нулем.
.RS
.TS
tab(:) allbox;
c s
l l.
\fIarp_flags\fP
флаг:значение
ATF_COM:Поиск окончен
ATF_PERM:Постоянная запись
ATF_PUBL:Анонсировать запись
ATF_USETRAILERS:Требуются концевики
ATF_NETMASK:Использовать маску сети
ATF_DONTPUB:Не отвечать
.TE
.RE
.PP
Если установлен флаг \fBATF_NETMASK\fP, то должно быть указано корректное
значение \fIarp_netmask\fP. Linux 2.2 не поддерживает сетевые записи proxy ARP,
поэтому для удаления существующих записей proxy arp это значение должно быть
равно 0xffffffff или 0. Флаг \fBATF_USETRAILERS\fP считается устаревшим и не
должен использоваться.
.SS "Интерфейсы /proc"
ARP поддерживает \fI/proc\fP интерфейсы для настройки общих параметров или
параметров конкретного сетевого интерфейса. Настройка осуществляется путём
чтения или записи файлов \fI/proc/sys/net/ipv4/neigh/*/*\fP. Для каждого
сетевого интерфейса в системе существует соответствующий каталог в
\fI/proc/sys/net/ipv4/neigh/\fP. Настройки в каталоге «default» используются
для всех новых создаваемых устройств. Если не определено явно, то считается,
что время указывается в секундах.
.TP 
\fIanycast_delay\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Максимальное значение задержки в тиках (jiffies) до ответа на сообщение об
объявлении соседей (neighbor solicitation message) IPv6. Поддержка anycast
пока не реализована. Значение по умолчанию — 1 секунда.
.TP 
\fIapp_solicit\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Максимальное количество попыток послать запрос через сетевое соединение
(netlink) ARP\-службе в пользовательском пространстве до возврата к
использованию многоадресных запросов (см. \fImcast_solicit\fP). Значение по
умолчанию — 0.
.TP 
\fIbase_reachable_time\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Если адрес был найден, то значение записи в диапазоне времени между
\fIbase_reachable_time\fP/2 и 3*\fIbase_reachable_time\fP/2 будет считаться не
устаревшим. Запись будет считаться правильной более длительное время, если
будет получено подтверждение от протоколов более высокого уровня. Значение
по умолчанию — 30 секунд.
.TP 
\fIbase_reachable_time_ms\fP (начиная с Linux 2.6.12)
Тоже, что и \fIbase_reachable_time\fP, но время задаётся в
миллисекундах. Значение по умолчанию — 30000 миллисекунд.
.TP 
\fIdelay_first_probe_time\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Задержка до первого запроса после того, как запись стала считаться
устаревшей. Значение по умолчанию — 5 секунд.
.TP 
\fIgc_interval\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Частота очистки кэша от устаревших и некорректных записей. Значение по
умолчанию — 30 секунд.
.TP 
\fIgc_stale_time\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Частота проверки наличия устаревших записей. Если запись считается
устаревшей, то перед тем, как данные будут посланы, адрес снова
проверяется. Значение по умолчанию — 60 секунд.
.TP 
\fIgc_thresh1\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Минимальное количество записей, хранимых в кэше ARP. Если количество записей
меньше этого значения, то очистка кэша производится не будет. Значение по
умолчанию — 128.
.TP 
\fIgc_thresh2\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Мягкое ограничение максимального количества записей в кэше ARP. Если это
значение будет превышено более, чем на 5 секунд, то будет произведена
очистка кэша. Значение по умолчанию — 512.
.TP 
\fIgc_thresh3\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Жёсткое ограничение количества записей в кэше ARP. Если это значение будет
превышено, то будет произведена очистка кэша. Значение по умолчанию — 1024.
.TP 
\fIlocktime\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Минимальное время хранения записи в кэше в тиках. Предотвращает
замусоривание кэша при наличии более одного возможного отображения (в общем
случае, из\-за неправильной настройки сети). Значение по умолчанию — 1
секунда.
.TP 
\fImcast_solicit\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Максимальное количество попыток определить адрес с помощью
многоадресной/широковещательной передачи. Если адрес не будет обнаружен, то
он будет помечен как недоступный. Значение по умолчанию — 3.
.TP 
\fIproxy_delay\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Задержка до \fIproxy_delay\fP тиков между получением ARP\-запроса на известный
proxy ARP\-адрес и ответом. Предназначена для предотвращения перегрузки
сети. Значение по умолчанию — 0.8 секунды.
.TP 
\fIproxy_qlen\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Максимальное количество пакетов для адресов proxy ARP, которые могут быть
отправлены в очередь . Значение по умолчанию — 64.
.TP 
\fIretrans_time\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Задержка перед повторением запроса в тиках. Значение по умолчанию — 1
секунда. Этот файл устарел, используйте \fIretrans_time_ms\fP.
.TP 
\fIretrans_time_ms\fP (начиная с Linux 2.6.12)
Задержка перед повторением запроса в миллисекундах. Значение по умолчанию —
1000 миллисекунд.
.TP 
\fIucast_solicit\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Максимальное количество попыток послать адресный запрос перед запросом
службы ARP (см. \fIapp_solicit\fP). Значение по умолчанию — 3.
.TP 
\fIunres_qlen\fP (начиная с Linux 2.2)
.\" Precisely: 2.1.79
Максимальное количество пакетов, которые могут быть поставлены в очередь
протоколами других сетевых уровней для передачи по каждому неопределённому
адресу. Значение по умолчанию — 3.
.SH ВЕРСИИ
В Linux 2.0 в структуру \fIstruct arpreq\fP было включено поле \fIarp_dev\fP и
изменены номера ioctl. Старые ioctl были удалены в Linux 2.2.
.PP
Поддержка записей proxy arp для сетей (маска сети не равна 0xffffffff)
удалена в Linux 2.2. Вместо этого было реализовано автоматическое
определение ядром всех доступных узлов через другие интерфейсы (если на
интерфейсе включена пересылка и proxy arp).
.PP
Интерфейсы \fIneigh/*\fP не существовали до версии Linux 2.2.
.SH ДЕФЕКТЫ
Значения некоторых настроек указаны в тиках, длительность которых зависит от
архитектуры компьютера и версии ядра; смотрите \fBtime\fP(7).
.PP
Не существует способа отправить подтверждение из пользовательского
пространства. Это означает, что протоколы, ориентированные на соединения и
реализованные в пользовательском пространстве, будут создавать избыточный
ARP\-трафик, так как ndisc будет вновь и вновь запрашивать MAC\-адрес. То же
относится и к некоторым протоколам ядра (например, NFS через UDP).
.PP
В этой странице дано описание возможностей IPv4, а также общих возможностей
IPv4 и IPv6.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBcapabilities\fP(7), \fBip\fP(7), \fBarpd\fP(8)
.PP
Описание ARP приведено в RFC\ 826. Определение соседних машин согласно IPv6
и основные используемые алгоритмы приведены в RFC\ 2461. В Linux 2.2+ IPv4
ARP используются алгоритмы IPv6 (если это возможно).
