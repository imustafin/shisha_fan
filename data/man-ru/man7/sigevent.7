.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (C) 2006, 2010 Michael Kerrisk <mtk.manpages@gmail.com>
.\" Copyright (C) 2009 Petr Baudis <pasky@suse.cz>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SIGEVENT 7 2017\-07\-13 GNU "Руководство программиста Linux"
.SH ИМЯ
sigevent \- структура для уведомления из асинхронных процедур
.SH ОБЗОР
.nf
#include <signal.h>
.PP
union sigval {          /* Данные, передаваемые с уведомлением */
    int     sival_int;         /* целое */
    void   *sival_ptr;         /* указатель */
};
.PP
struct sigevent {
    int          sigev_notify; /* метод уведомления */
    int          sigev_signo;  /* сигнал уведомления */
    union sigval sigev_value;  /* данные, передаваемые
                                  с уведомлением */
    void       (*sigev_notify_function) (union sigval);
                     /* функция, используемая для нити
                        notification (SIGEV_THREAD) */
    void        *sigev_notify_attributes;
                     /* атрибуты для уведомления нити
                        (SIGEV_THREAD) */
    pid_t        sigev_notify_thread_id;
                     /* ID нити для уведомления (SIGEV_THREAD_ID) */
};
.fi
.SH ОПИСАНИЕ
.PP
Структура \fIsigevent\fP используется в различных программных интерфейсах для
описания способа, которым нужно уведомлять процесс о событии (например,
окончание асинхронного запроса, истечение таймера или поступление
сообщения).
.PP
Определение, приведённое в ОБЗОРЕ, приблизительно: некоторые поля в
структуре \fIsigevent\fP могут быть определены как часть объединения. Программы
должны использовать только те поля, которые применимы к значению, заданном в
\fIsigev_notify\fP.
.PP
В поле \fIsigev_notify\fP задаётся как выполняется уведомление. Значением поля
может быть:
.TP  8
\fBSIGEV_NONE\fP
«Пустое» уведомление: ничего не делать при возникновении события.
.TP 
\fBSIGEV_SIGNAL\fP
Уведомить процесс, отправив сигнал, указанный в \fIsigev_signo\fP.
.IP
Если сигнал пойман обработчиком сигнала, который зарегистрирован с помощью
\fBsigaction\fP(2) с флагом \fBSA_SIGINFO\fP, то следующим полям назначаются
значения в структуре \fIsiginfo_t\fP, передаваемой во втором аргументе
обработчика:
.RS 8
.TP  10
\fIsi_code\fP
В этом поле задаётся значение, которое зависит от программного интерфейса,
доставляющего уведомление.
.TP 
\fIsi_signo\fP
В этом поле указывается номер сигнала (т. е., тоже значение, что и в
\fIsigev_signo\fP).
.TP 
\fIsi_value\fP
В этом поле содержится значение, указанное в \fIsigev_value\fP.
.RE
.IP
В зависимости от программного интерфейса остальным полям в структуре
\fIsiginfo_t\fP также могут быть присвоены значения.
.IP
Эта информация также доступна, если сигнал принимается с помощью
\fBsigwaitinfo\fP(2).
.TP 
\fBSIGEV_THREAD\fP
Уведомить процесс с помощью вызова \fIsigev_notify_function\fP «как если бы»
это была бы начальная функция новой нити (среди возможностей реализации
здесь может быть: каждое уведомление таймера приводит к созданию новой нити,
или создаётся нить для получения всех уведомлений). Функция вызывается с
единственным аргументом \fIsigev_value\fP. Если \fIsigev_notify_attributes\fP не
равно NULL, то значение должно указывать на структуру \fIpthread_attr_t\fP, в
которой определены атрибуты новой нити (смотрите \fBpthread_attr_init\fP(3)).
.TP 
\fBSIGEV_THREAD_ID\fP (есть только в Linux)
.\" | SIGEV_SIGNAL vs not?
В настоящее время используется только таймерами POSIX; смотрите
\fBtimer_create\fP(2).
.SH "СМОТРИТЕ ТАКЖЕ"
\fBtimer_create\fP(2), \fBaio_fsync\fP(3), \fBaio_read\fP(3), \fBaio_write\fP(3),
\fBgetaddrinfo_a\fP(3), \fBlio_listio\fP(3), \fBmq_notify\fP(3), \fBaio\fP(7),
\fBpthreads\fP(7)
