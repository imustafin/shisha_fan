.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (C) 2003 Andries Brouwer (aeb@cwi.nl)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PATH_RESOLUTION 7 2017\-11\-26 Linux "Руководство программиста Linux"
.SH ИМЯ
path_resolution \- как путь преобразуется в файл
.SH ОПИСАНИЕ
У некоторых системных вызовов UNIX/Linux есть параметр для указания одного
или нескольких имён файлов. Имя файла (или путь) преобразуется (resolved)
следующим образом.
.SS "Шаг 1: запуск процесса преобразования"
Если путь начинается с символа «/», то начальным каталогом поиска
назначается корневой каталог вызывающего процесса (процесс наследует свой
корневой каталог от родителя. Обычно, это корневой каталог файловой
иерархии. Процесс может получить другой корневой каталог, используя
системный вызов \fBchroot\fP(2). Процесс может получить полностью закрытое
пространство имён монтирования когда он сам или один из его предков был
запущен системным вызовом \fBclone\fP(2) с флагом \fBCLONE_NEWNS\fP). Так
обрабатывается часть пути «/».
.PP
Если путь не начинается с символа «/», то начальным каталогом поиска
процесса преобразование выбирается текущий рабочий каталог процесса (также
наследуемый от родителя; может быть системным вызовом \fBchdir\fP(2)).
.PP
Пути, начинающиеся с символа «/», называются абсолютными путями. Пути, не
начинающиеся с символа «/», называются относительными путями.
.SS "Шаг 2: обход пути"
Назначаем текущим каталогом поиска начальный каталог поиска. Теперь для
каждого не конечного компонента пути (подстрока, разделённая символами «/»)
будет производиться поиск в текущем каталоге поиска.
.PP
Если у процесса нет права поиска в текущем каталоге просмотра, будет
возвращена ошибка \fBEACCES\fP («Доступ запрещён»).
.PP
Если компонент не найдет, будет возвращена ошибка \fBENOENT\fP («Нет такого
файла или каталога»).
.PP
Если компонент найден, но не является ни каталогом, ни символической
ссылкой, будет возвращена ошибка \fBENOTDIR\fP («Не является каталогом»).
.PP
Если компонент найден и является каталогом, значением текущего каталога
поиска устанавливается этот каталог, после чего осуществляется переход к
следующему компоненту.
.PP
Если компонент найден и это символическая ссылка (symlink), то сначала мы
разрешаем эту символическую ссылку (от текущего каталога, как начального
пути поиска). При ошибках, возвращаем ошибку. Если результат не каталог, то
возвращается ошибка \fBENOTDIR\fP. Если разрешение символической ссылки удалось
и получен каталог, то мы назначаем этот каталог текущим каталогом поиска и
переходим к следующему компоненту. Заметим, что процесс разрешения здесь
может вызвать рекурсию, если компонент префикса («dirname») пути содержит
имя символической ссылки, которая разрешается в каталог (где префикс
компонента этого каталога может содержать символическую ссылку и т .д.). Для
защиты ядра от переполнения стека, а также от отказа в обслуживании, есть
ограничение на максимальную глубину рекурсии и на максимальное количество
переходов по символическим ссылкам. При превышении возвращается ошибка
\fBELOOP\fP («Слишком много уровней символических ссылок»).
.PP
.\"
.\" presently: max recursion depth during symlink resolution: 5
.\" max total number of symbolic links followed: 40
.\" _POSIX_SYMLOOP_MAX is 8
.\" MAXSYMLINKS is 40
.\" MAX_NESTED_LINKS
.\" commit 894bc8c4662ba9daceafe943a5ba0dd407da5cd3
В текущей реализации Linux максимальное количество допустимых переходов по
символическим ссылкам при преобразовании пути равно 40. В ядрах до версии
2.6.18 ограничение глубины рекурсии было равно 5. Начиная с Linux 2.6.18,
это ограничение увеличилось до 8. В Linux 4.2 код ядра разрешения пути был
переработан и возникновение рекурсии больше не происходит, поэтому осталось
только ограничение на 40 разрешений для всего пути.
.SS "Шаг 3: поиск последнего элемента"
Поиск конечного компонента пути происходит таким же образом, как и всех
других компонентов, как было описано в предыдущем шаге, но с двумя
различиями: конечному компоненту не нужно быть каталогом (по крайней мере,
это не важно для процесса преобразования — он может быть каталогом или не
каталогом, в зависимости от требований определённого системного вызова), и
если компонент не найден это необязательна ошибка — возможно, его только
требуется создать. О том, чем считается последний элемент, описано в
справочных страницах соответствующих системных вызовов.
.SS ". и .."
По соглашению, в каждом каталоге есть записи «.» и «..», которые ссылаются
на сам каталог и на его родительских каталог, соответственно.
.PP
Процесс определения пути предполагает, что эти записи имеют свои
общепринятые значения, независимо от того, присутствуют ли они на самом деле
в физической файловой системе.
.PP
Невозможно перейти за пределы корня: путь «/..» равен «/».
.SS "Точки монтирования"
После команды «mount устройство путь» путь указывает на корень иерархии
файловой системы устройства, и больше не указывает на то, что было раньше.
.PP
Можно выйти за пределы смонтированной файловой системы: «путь/..» указывает
на родительский каталог «пути», лежащий вне иерархии файловой системы
устройства.
.SS "Конечные символы косой черты"
Если путь заканчивается на «/», то это приводит к обработке предыдущего
компонента согласно шагу 2: он существует и преобразуется в каталог. В
противном случае конечный  «/» будет проигнорирован (или, что тоже самое,
путь с конечной косой чертой «/» будет равен пути, полученному добавлением к
его концу «.»).
.SS "Символьная ссылка в конце"
Если последний компонент пути является символической ссылкой, то это зависит
от системного вызова, будет ли файл указывать на саму символическую ссылку
или на её содержимое. Например, системный вызов \fBlstat\fP(2) будет работать с
символической ссылкой, а \fBstat\fP(2) работает с файлом, на который указывает
символическая ссылка.
.SS "Ограничение длины"
Существует максимально допустимая длина пути. Если путь (или какой\-нибудь
промежуточный путь, полученный при разрешении символических ссылок) очень
длинный, то возвращается \fBENAMETOOLONG\fP («Имя файла очень длинное»).
.SS "Пустой путь"
В оригинальном UNIX, пустой путь считался текущим каталогом. В наши дни в
POSIX указано, что пустой путь не должен быть преобразован без ошибки. В
Linux в этом случае возвращается \fBENOENT\fP.
.SS "Права доступа"
Биты прав файла делятся на три группы по три бита; смотрите \fBchmod\fP(1) и
\fBstat\fP(2). Первая группа используется тогда, когда эффективный
идентификатор пользователя вызывающего процесса равен идентификатору
владельца файла. Вторая группа используется, если идентификатор группы файла
равен эффективному идентификатору группы вызывающего процесса или одному из
дополнительных групп вызывающего процесса (установленных \fBsetgroups\fP(2)). В
остальных случаях используется третья группа.
.PP
Три бита используются следующим образом: первым битом задаётся доступ на
чтение, вторым на запись, а последним, в случае обычных файлов — разрешение
на выполнение, в в случае каталогов разрешение на поиск.
.PP
Для проверки доступа в Linux используется fsuid вместо эффективного
идентификатора пользователя. Обычно, fsuid равен эффективному идентификатору
пользователя, fsuid может быть изменён системным вызовом \fBsetfsuid\fP(2).
.PP
(Здесь «fsuid» сокращение от «пользовательский идентификатор в файловой
системе, filesystem user ID». Это требовалось для реализации сервера NFS в
пользовательском пространстве во времена, когда процессы могли посылать
сигнал процессу с тем же эффективным идентификатором пользователя. Сейчас
это устарело. Никто не должен использовать \fBsetfsuid\fP(2).)
.PP
.\" FIXME . say something about filesystem mounted read-only ?
Схожим образом в Linux используется fsgid ("filesystem group ID") вместо
идентификатора эффективной группы. Смотрите \fBsetfsgid\fP(2).
.SS "Пропуск проверки прав доступа: суперпользователь и мандаты"
.\" (but for exec at least one x bit must be set) -- AEB
.\" but there is variation across systems on this point: for
.\" example, HP-UX and Tru64 are as described by AEB.  However,
.\" on some implementations (e.g., Solaris, FreeBSD),
.\" access(X_OK) by superuser will report success, regardless
.\" of the file's execute permission bits. -- MTK (Oct 05)
В традиционных системах UNIX суперпользователю (\fIroot\fP, идентификатор
пользователя 0) доступно всё и при доступе к файлам никаких проверок
ограничений не производится.
.PP
В Linux права суперпользователя делятся мандатами (смотрите
\fBcapabilities\fP(7)). Два мандата относятся к проверка доступа к файлам:
\fBCAP_DAC_OVERRIDE\fP и \fBCAP_DAC_READ_SEARCH\fP (процесс имеет эти мандаты,
если его fsuid равен 0).
.PP
Мандат \fBCAP_DAC_OVERRIDE\fP заменяет всех проверки прав, но позволяет право
выполнения только, когда установлен хотя бы один из трёх битов выполнения
файла.
.PP
.\" FIXME . say something about immutable files
.\" FIXME . say something about ACLs
Мандат \fBCAP_DAC_READ_SEARCH\fP разрешает чтение и поиск в по каталогу, а
также чтение обычных файлов.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBreadlink\fP(2), \fBcapabilities\fP(7), \fBcredentials\fP(7), \fBsymlink\fP(7)
