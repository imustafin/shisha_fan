.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2006 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2008-06-24, mtk: added some details about where jiffies come into
.\"     play; added section on high-resolution timers.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH TIME 7 2018\-04\-30 Linux "Руководство программиста Linux"
.SH ИМЯ
time \- обзор времени и таймеров
.SH ОПИСАНИЕ
.SS "Реальное время и время процесса"
\fIРеальное время\fP (real time) — время, измеряемое от некоторой постоянной
точки, или от стандартной точки в прошлом (смотрите описание эпохи (Epoch) и
календарного времени далее), или от некоторой точки (например, с момента
запуска) в жизни процесса (\fIпрошедшее время\fP (elapsed time)).
.PP
\fIВремя процесса\fP (process time) — количество процессорного времени,
использованного процессом. Иногда его делят на \fIпользовательское\fP (user) и
\fIсистемное\fP (system). Пользовательское время ЦП — это время, потраченное на
исполнение кода в режиме пользователя. Системное время ЦП — это время,
потраченное ядром, выполняющемся в системном режиме, для процесса (например,
на обработку системных вызовов). Команда \fBtime\fP(1) позволяет определить
количество процессорного времени, затраченного при выполнении
программы. Программа может определить количество потраченного процессорного
времени с помощью \fBtimes\fP(2), \fBgetrusage\fP(2) или \fBclock\fP(3).
.SS "Аппаратные часы"
В большинстве компьютеров (оснащённых батареей) имеются аппаратные часы,
которые ядро читает при запуске для инициализации программных
часов. Подробности смотрите в \fBrtc\fP(4) и \fBhwclock\fP(8).
.SS "Программные часы, HZ и миги (jiffies)"
.\" semtimedop(), mq_timedwait(), io_getevents(), poll() are the same
.\" futexes and thus sem_timedwait() seem to use high-res timers.
Точность различных системных вызовов, которые задают время ожидания
(timeouts) (например, \fBselect\fP(2), \fBsigtimedwait\fP(2)) и измеряют
процессорное время (например, \fBgetrusage\fP(2)), ограничена точностью
\fIпрограммных часов\fP (software clock) — часов, поддерживаемых ядром, у
которых время измеряется в \fIмигах\fP (jiffies). Размер мига определяется
значением константы ядра \fIHZ\fP.
.PP
Значение \fIHZ\fP различно в разных версиях ядра и аппаратных платформах. Для
i386: в ядрах до версии 2.4.x включительно, HZ равно 100, то есть значение
мига равно 0.01 секунды; начиная с версии 2.6.0 значение HZ увеличено до
1000 и миг равен 0.001 секунды. Начиная с ядра 2.6.13 значение HZ задаётся в
параметре настройки ядра и может быть равно 100, 250 (по умолчанию) или
1000, что делает значение мига равным, соответственно, 0.01, 0.004 или 0.001
секунды. Начиная с ядра 2.6.20 добавлено ещё одна частота: 300, количество,
которое делится нацело на распространённые частоты видеокадров (PAL — 25 HZ;
NTSC — 30 HZ).
.PP
.\" glibc gets this info with a little help from the ELF loader;
.\" see glibc elf/dl-support.c and kernel fs/binfmt_elf.c.
.\"
Системный вызов \fBtimes\fP(2) — это особый случай. Он выдаёт время с
точностью, определяемой константой ядра \fIUSER_HZ\fP. Приложения
пользовательского пространства могут определить значение этой константы с
помощью \fIsysconf(_SC_CLK_TCK)\fP.
.SS "Таймеры высокой точности"
До Linux 2.6.21 точность системных вызовов таймера и сна (смотрите далее)
была ограничена размером мига.
.PP
Начиная с Linux 2.6.21, Linux поддерживает таймеры высокой точности (HRT),
включаемые через \fBCONFIG_HIGH_RES_TIMERS\fP. В системе, которая поддерживает
HRT, точность сна и таймеров в системных вызовах больше не ограничена мигом,
а только точностью аппаратуры (в современной аппаратуре, обычно,
микросекундная точность). Вы можете определить поддерживаются ли таймеры
высокой точности, проверив результат вызова \fBclock_getres\fP(2) или поискав
записи «resolution» в \fI/proc/timer_list\fP.
.PP
HRT поддерживаются не на всех аппаратных архитектурах (среди имеющих отметим
x86, arm и powerpc).
.SS Эпоха
В системах UNIX время считается в секундах и начинается с \fIэпохи\fP (Epoch),
1970\-01\-01 00:00:00 +0000 (UTC).
.PP
.\"
Программа может определить \fIкалендарное время\fP c помощью часов
\fBCLOCK_REALTIME\fP через \fBclock_gettime\fP(2), которые возвращают время (в
секундах и наносекундах), прошедшее с начала эпохи; вызов \fBtime\fP(2) выдаёт
подобную информацию, но с точностью только до ближайшей секунды. Системное
время можно изменять с помощью \fBclock_settime\fP(2).
.SS "Календарное время, разделённое на компоненты"
Некоторые библиотечные функции используют структуру с типом \fItm\fP для
представления \fIкалендарного времени, разделённого на компоненты\fP
(broken\-down time), в которой время хранится в виде отдельных составляющих
(год, месяц, день, час, минута, секунда и т. д.). Эта структура описана в
\fBctime\fP(3), в которой также описаны функции, преобразующие календарное
время в разделённое на компоненты и обратно. Функции представления
календарного времени, разделённого на компоненты, в печатную строку описаны
в \fBctime\fP(3), \fBstrftime\fP(3) и \fBstrptime\fP(3).
.SS "Таймеры сна и их установка"
Различные системные вызовы и функции позволяют программе спать
(приостанавливать выполнение) заданный промежуток времени; смотрите
\fBnanosleep\fP(2), \fBclock_nanosleep\fP(2) и \fBsleep\fP(3).
.PP
Различные системные вызовы позволяют процессу устанавливать таймеры, которые
срабатывают в какой\-то момент в будущем, и, возможно, через определённые
интервалы; смотрите \fBalarm\fP(2), \fBgetitimer\fP(2), \fBtimerfd_create\fP(2) и
\fBtimer_create\fP(2).
.SS "Допуск таймера"
Начиная с Linux 2.6.28, возможно контролировать значение «допуска таймера»
(timer slack) нити. Допуск таймера — это промежуток времени, на который ядро
может задержать пробуждение определённых системных вызовов, заблокированных
на время. Эта задержка позволяет ядру объединять события пробуждения, таким
образом сокращая количество системных пробуждений и экономя
энергию. Подробней смотрите описание \fBPR_SET_TIMERSLACK\fP в \fBprctl\fP(2).
.SH "СМОТРИТЕ ТАКЖЕ"
.ad l
.nh
\fBdate\fP(1), \fBtime\fP(1), \fBtimeout\fP(1), \fBadjtimex\fP(2), \fBalarm\fP(2),
\fBclock_gettime\fP(2), \fBclock_nanosleep\fP(2), \fBgetitimer\fP(2),
\fBgetrlimit\fP(2), \fBgetrusage\fP(2), \fBgettimeofday\fP(2), \fBnanosleep\fP(2),
\fBstat\fP(2), \fBtime\fP(2), \fBtimer_create\fP(2), \fBtimerfd_create\fP(2),
\fBtimes\fP(2), \fButime\fP(2), \fBadjtime\fP(3), \fBclock\fP(3),
\fBclock_getcpuclockid\fP(3), \fBctime\fP(3), \fBntp_adjtime\fP(3),
\fBntp_gettime\fP(3), \fBpthread_getcpuclockid\fP(3), \fBsleep\fP(3), \fBstrftime\fP(3),
\fBstrptime\fP(3), \fBtimeradd\fP(3), \fBusleep\fP(3), \fBrtc\fP(4), \fBhwclock\fP(8)
