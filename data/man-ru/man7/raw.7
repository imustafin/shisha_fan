.\" -*- mode: troff; coding: UTF-8 -*-
'\" t
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" $Id: raw.7,v 1.6 1999/06/05 10:32:08 freitag Exp $
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH RAW 7 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
raw \- неструктурированные сокеты IPv4 в Linux
.SH ОБЗОР
\fB#include <sys/socket.h>\fP
.br
\fB#include <netinet/in.h>\fP
.br
\fBraw_socket = socket(AF_INET, SOCK_RAW, int \fP\fIprotocol\fP\fB);\fP
.SH ОПИСАНИЕ
Неструктурированные (raw) сокеты позволяют реализовать новые протоколы IPv4
в пространстве пользователя. Через неструктурированный сокет получают или
посылают необработанные датаграммы, не включающие в себя заголовки уровня
соединения (link level).
.PP
Уровень IPv4 генерирует заголовок IP при посылке пакета, если только для
сокета не включён параметр \fBIP_HDRINCL\fP. Если он включён, то пакет должен
содержать заголовок IP. Принимаемые пакеты всегда содержат заголовок IP.
.PP
Для создания неструктурированного сокета процесс должен иметь мандат
\fBCAP_NET_RAW\fP в пользовательском пространстве имён, определяемом по его
сетевому пространству имён.
.PP
Все пакеты или ошибки, совпадающие с номером протокола \fIprotocol\fP,
указанным неструктурированному сокету, передаются этому сокету. Список
допустимых протоколов назначается списком IANA
.UR http://www.iana.org/assignments/protocol\-numbers/
.UE
и содержится в
\fBgetprotobyname\fP(3).
.PP
Протокол \fBIPPROTO_RAW\fP подразумевает включённый параметр \fBIP_HDRINCL\fP и
позволяет отправлять любой протокол IP, который указан в передаваемом
заголовке. Приём любых протоколов IP посредством \fBIPPROTO_RAW\fP через
неструктурированные сокеты невозможен.
.RS
.TS
tab(:) allbox;
c s
l l.
Поля заголовка IP, изменяемые \fBIP_HDRINCL\fP при передаче
контрольная сумма IP:всегда заполняется
адрес источника:заполняется, если значение равно нулю
ID пакета:заполняется, если значение равно нулю
общая длина:всегда заполняется
.TE
.RE
.PP
.PP
Если указан \fBIP_HDRINCL\fP и заголовок IP имеет ненулевой адрес назначения,
то для маршрутизации пакета используется адрес назначения сокета. Если
указан \fBMSG_DONTROUTE\fP, то адрес назначения должен ссылаться на локальный
интерфейс, иначе в любом случае будет производиться поиск в таблице
маршрутизации, но маршруты со шлюзами будут игнорироваться.
.PP
Если \fBIP_HDRINCL\fP не указан, то параметры заголовка IP в
неструктурированных сокетах могут быть установлены с помощью
\fBsetsockopt\fP(2); более подробная информация приведена в \fBip\fP(7).
.PP
Начиная с Linux 2.2 все поля заголовка IP и параметры могут быть заданы с
помощью параметров сокета IP. Это означает, что неструктурированные сокеты,
как правило, необходимы лишь для новых протоколов или протоколов без
интерфейса пользователя (например, ICMP).
.PP
Принятый пакет передаётся всем подключенным (bound) к этому протоколу
неструктурированным сокетам до того, как он будет передан другим
обработчикам протоколов (например, протокольным модулям ядра).
.SS "Формат адреса"
.\" commit f59fc7f30b710d45aadf715460b3e60dbe9d3418
При отправке и приёме дейтаграмм (\fBsendto\fP(2), \fBrecvfrom\fP(2) и similar)
через неструктурированные сокеты используется стандартная адресная структура
\fIsockaddr_in\fP, определённая в \fBip\fP(7). Поле \fIsin_port\fP можно использовать
для указания номера протокола IP, но в Linux 2.2 и новее оно игнорируется
при отправке, и должно всегда равняться 0 (смотрите ДЕФЕКТЫ). У входящих
пакетов \fIsin_port\fP равен нулю.
.SS "Параметры сокета"
.\" Or SOL_RAW on Linux
Параметры неструктурированных сокетов могут быть установлены с помощью
\fBsetsockopt\fP(2) и прочитаны с помощью \fBgetsockopt\fP(2) с указанием флага
семейства \fBIPPROTO_RAW\fP.
.TP 
\fBICMP_FILTER\fP
Запускает специальный фильтр для неструктурированных сокетов, подключенных к
протоколу \fBIPPROTO_ICMP\fP. Значение представляет собой набор бит — по
установленному биту для каждого типа сообщений ICMP, который должен быть
отфильтрован. По умолчанию сообщения ICMP не фильтруются.
.PP
Кроме этого, поддерживаются все датаграммные параметры сокетов \fBip\fP(7) для
\fBIPPROTO_IP\fP.
.SS "Обработка ошибок"
Ошибки, возникающие в сети, передаются пользователю только, если сокет
подключён или установлен флаг \fBIP_RECVERR\fP. В целях совместимости в
подключенные сокеты передаются только \fBEMSGSIZE\fP и \fBEPROTO\fP. При указании
\fBIP_RECVERR\fP в очереди ошибок сохраняются все сетевые ошибки.
.SH ОШИБКИ
.TP 
\fBEACCES\fP
Пользователь попытался передать пакет по широковещательному адресу без
указания на сокете флага широковещательной передачи.
.TP 
\fBEFAULT\fP
Указан неправильный адрес памяти.
.TP 
\fBEINVAL\fP
Неверный аргумент.
.TP 
\fBEMSGSIZE\fP
Размер пакета слишком велик, либо включён Path MTU Discovery (флаг сокета
\fBIP_PMTU_DISCOVER\fP), либо размер пакета превышает максимально разрешенный
для IPv4 размер, равный 64\ КБ.
.TP 
\fBEOPNOTSUPP\fP
Сокетному вызову был передан неверный флаг (например, \fBMSG_OOB\fP).
.TP 
\fBEPERM\fP
Пользователь не имеет прав на открытие неструктурированных сокетов. Это
могут делать только процессы с идентификатором эффективного пользователя
равным 0, или имеющие мандат \fBCAP_NET_RAW\fP.
.TP 
\fBEPROTO\fP
Получена ошибка ICMP, сообщающая о проблеме с параметром.
.SH ВЕРСИИ
Значения \fBIP_RECVERR\fP и \fBICMP_FILTER\fP появились в Linux 2.2. Они являются
расширениями Linux и не должны использоваться в переносимых программах.
.PP
Код неструктурированных сокетов в версии Linux 2.0 при установленном
параметре \fBSO_BSDCOMPAT\fP был специально сделан совместимым с BSD «вплоть до
ошибок». Из Linux 2.2 это было удалено.
.SH ЗАМЕЧАНИЯ
По умолчанию, для неструктурированных сокетов выполняется обнаружение MTU
(Maximum Transmission Unit) пути. Это означает, что ядро будет следить за
MTU до IP\-адреса назначения и возвращать \fBEMSGSIZE\fP, если запись
неструктурированного пакета превысит это значение. Когда это происходит,
приложение должно уменьшить размер пакета. Также обнаружение MTU пути можно
выключить с помощью параметра сокета \fBIP_MTU_DISCOVER\fP или в файле
\fI/proc/sys/net/ipv4/ip_no_pmtu_disc\fP; подробней смотрите в \fBip\fP(7). При
отключении обнаружения неструктурированные сокеты фрагментируют исходящие
пакеты, размер которых превышает MTU интерфейса. Однако по соображениям
производительности и надёжности отключение не рекомендуется.
.PP
Неструктурированный сокет может быть подключён к определённому локальному
адресу с помощью вызова \fBbind\fP(2). Если он не подключён, то принимаются все
пакеты указанного протокола IP. Кроме того, неструктурированный сокет может
быть подключён к определённому сетевому устройству с помощью
\fBSO_BINDTODEVICE\fP; смотрите \fBsocket\fP(7).
.PP
Сокет \fBIPPROTO_RAW\fP предназначен только для отправки. Если вы хотите
получать все пакеты IP, используйте сокет \fBpacket\fP(7) с протоколом
\fBETH_P_IP\fP. Заметим, что пакетные сокеты, в отличие от неструктурированных
сокетов, не собирают пакеты из фрагментов IP.
.PP
Если вы хотите получать все пакеты ICMP для датаграммного сокета, то лучше
использовать \fBIP_RECVERR\fP на определённом сокете; смотрите \fBip\fP(7).
.PP
Неструктурированные сокеты могут перехватывать в Linux все протоколы IP,
даже имеющие протокольный модуль в ядре (такие, как ICMP или TCP). В этом
случае пакеты передаются как модулю ядра, так и неструктурированным
сокетам. На это нельзя закладываться в переносимых программах, так как
многие другие реализации сокетов BSD так не делают.
.PP
Linux никогда не изменяет заголовки, полученные от пользователя (за
исключением обнуления некоторых полей, как описано в случае с
\fBIP_HDRINCL\fP). Такое поведение отличается от поведения многих других
реализаций неструктурированных сокетов.
.PP
Неструктурированные сокеты, в общем случае, не являются переносимыми,
поэтому следует избегать их использования в переносимых программах.
.PP
Передача через неструктурированный сокет должна осуществляться с помощью
протокола IP из \fIsin_port\fP; эта возможность исчезла в Linux 2.2. Метод
обхода — использовать \fBIP_HDRINCL\fP.
.SH ДЕФЕКТЫ
Не описаны расширения прозрачного прокси.
.PP
Если установлен параметр \fBIP_HDRINCL\fP, датаграммы не будут фрагментированы
и их размер будет ограничен MTU интерфейса.
.PP
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
В Linux 2.2 отсутствует настройка протокола IP для отправки  \fIsin_port\fP —
всегда используется тот протокол, к которому был подключён сокет или который
был указан при первом вызове \fBsocket\fP(2).
.SH "СМОТРИТЕ ТАКЖЕ"
\fBrecvmsg\fP(2), \fBsendmsg\fP(2), \fBcapabilities\fP(7), \fBip\fP(7), \fBsocket\fP(7)
.PP
В \fBRFC\ 1191\fP описан процесс обнаружения маршрута MTU. В \fBRFC\ 791\fP и
заголовочном файле \fI<linux/ip.h>\fP описан протокол IP.
