.\" -*- mode: troff; coding: UTF-8 -*-
.\" (C) Copyright 1992-1999 Rickard E. Faith and David A. Wheeler
.\" (faith@cs.unc.edu and dwheeler@ida.org)
.\" and (C) Copyright 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" 2007-05-30 created by mtk, using text from old man.7 plus
.\" rewrites and additional text.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH MAN\-PAGES 7 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
man\-pages — правила написания справочных страниц Linux
.SH ОБЗОР
\fBman\fP [\fIраздел\fP] \fIимя\fP
.SH ОПИСАНИЕ
На этой странице описаны правила, которые необходимо применять при написании
справочных страниц для проекта \fIman\-pages\fP Linux, который, в свою очередь,
документирует программный интерфейс пространства пользователя,
предоставляемый ядром Linux и библиотекой GNU C. Таким образом, проект
отвечает за большинство страниц из Раздела 2, за многие страницы из Разделов
3, 4, и 7, и за несколько страниц из Разделов 1, 5 и 8 справочной системы
Linux. Данные правила также могут быть полезны при написании справочных
страниц для других проектов.
.SS "Разделы справочных страниц"
.PP
Традиционно они следующие:
.TP  10
\fB1 Команды пользователя (Программы)\fP
Команды, которые пользователь запустить из оболочки.
.TP 
\fB2 Системные вызовы\fP
Функции, являющиеся оберткой операций, выполняемых ядром.
.TP 
\fB3 Библиотечные вызовы\fP
Все библиотечные функции (в основном функции \fIlibc\fP), за исключением
представленных в Разделе 2.
.TP 
\fB4 Специальные файлы (устройства)\fP
Файлы из \fI/dev\fP, дающие доступ к устройствам через ядро.
.TP 
\fB5 Форматы файлов и конфигурационные фалы\fP
Описывает различные подходящие для чтения форматы файлов и конфигурационные
файлы.
.TP 
\fB6 Игры\fP
Игры и забавные небольшие программы
.TP 
\fB7 Обзоры, соглашения и разное\fP
Описания или обзоры, касающиеся различных тем, соглашений и протоколов, а
также наборов символов, стандартный шаблон файловой системы, разное.
.TP 
\fB8 Команды для системного администрирования\fP
.\" .TP
.\" .B 9 Kernel routines
.\" This is an obsolete manual section.
.\" Once it was thought a good idea to document the Linux kernel here,
.\" but in fact very little has been documented, and the documentation
.\" that exists is outdated already.
.\" There are better sources of
.\" information for kernel developers.
Команды подобные \fBmount\fP(8), большинство из которых могут запускаться
только суперпользователем.
.SS "Пакет макросов"
Новые справочные страницы должны размечаться с помощью пакета \fBgroff
an.tmac\fP, описанного в \fBman\fP(7). Данный выбор основан, в основном, на том,
что большинство из существующих страниц Linux размечены с помощью этих
макросов.
.SS "Правила, касающиеся формата исходных файлов"
Длина строки не должна превышать 75 символов. В некоторых почтовых клиентах
это помогает избежать переноса строк в заплатах, встроенные в письмо.
.SS Заголовок
Первой должна быть команда \fBTH\fP:
.PP
.RS
\fB\&.TH\fP \fIзаголовок раздел дата источник справочник\fP
.RE
.PP
где:
.RS
.TP  10
\fIзаголовок\fP
Название страницы, написанное заглавными буквами (например \fIMAN\-PAGES\fP).
.TP 
\fIраздел\fP
Номер раздела для размещения страницы (например \fI7\fP).
.TP 
\fIдата\fP
Дата последнего значительного изменения справочной страницы (в проекте
\fIman\-pages\fP необходимые обновления временных отметок выполняются
автоматически при помощи сценариев, вручную устанавливать её заплатой не
нужно). Дата должна иметь вид YYYY\-MM\-DD, т. е. год\-месяц\-день.
.TP 
\fIисточник\fP
Источник команды, функции, системного вызова.
.IP
Для нескольких страниц \fIman\-pages\fP в Разделах 1 и 8, можно написать \fIGNU\fP.
.IP
Для системных вызовов — \fILinux\fP. (Ранее, стандартной практикой было писать
версию ядра, используя которую был написана или проверена страница. Это
никогда не было общепринятым. Так что не делайте этого).
.IP
Для библиотечных вызовов, являющихся частью glibc или других библиотек GNU —
\fIGNU C Library\fP, \fIGNU\fP, или пустую строку.
.IP
Для страниц из Раздела 4 — \fILinux\fP.
.IP
Если возникают сомнения — \fILinux\fP или \fIGNU\fP.
.TP 
\fIсправочник\fP
Название справочника (например для Разделов 2, 3 в пакете \fIman\-pages\fP —
\fILinux Programmer's Manual\fP).
.RE
.SS "Разделы внутри справочной страницы"
Следующий список содержит общепринятые и рекомендуемые разделы. Большинство
справочных страниц должно включать в себя по крайней мере \fBвыделенные
жирным\fP разделы. Соблюдайте очередность, как показано в списке.
.PP
.in +4n
.nf
.\" May 07: Few current man pages have an ERROR HANDLING section,,,
.\" ERROR HANDLING,
.\" May 07: Almost no current man pages have a USAGE section,,,
.\" USAGE,
.\" DIAGNOSTICS,
.\" May 07: Almost no current man pages have a SECURITY section,,,
.\" SECURITY,
.\" AUTHORS sections are discouraged
.\" AUTHORS             [Discouraged]
\fBИМЯ\fP
\fBОБЗОР\fP
КОНФИГУРАЦИЯ             [Как правило, только в разделе 4]
\fBОПИСАНИЕ\fP
ПАРАМЕТРЫ                [Как правило, только в разделах 1, 8]
КОД ВЫХОДА               [Как правило, только в разделах 1, 8]
ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ    [Как правило, только в разделах 2, 3]
ОШИБКИ                   [Обычно только в разделах 2, 3]
ОКРУЖЕНИЕ
ФАЙЛЫ
ВЕРСИИ                   [Как правило, только в разделах 2, 3]
АТРИБУТЫ                 [Как правило, только в разделах 2, 3]
СООТВЕТСТВИЕ СТАНДАРТАМ
ЗАМЕЧАНИЯ
ДЕФЕКТЫ
ПРИМЕРЫ
\fBСМОТРИ ТАКЖЕ\fP
.fi
.in
.PP
\fIТам, где обычно используются заголовки\fP, \fIиспользуйте их\fP;  это правило
может сделать информацию более доступной для понимания. Если это необходимо,
Вы можете создать свои собственные заголовки, если они сделают текст более
понятным (это может быть особенно полезным для страниц в разделах 4 и 5).
Тем не менее, прежде чем создавать их, подумайте, можно ли обойтись
традиционными заголовками с созданием своих собственных подразделов (\fI.SS\fP)
в пределах стандартных разделов.
.PP
В приведённом ниже списке объясняется назначение каждого из разделов.
.TP  14
\fBИМЯ\fP
Название данной справочной страниц.
.IP
Смотрите \fBman\fP(7), чтобы ознакомиться с правилами написания заголовков,
которые должны следовать за командой \fB.SH NAME\fP. Все слова в этой строке (в
том числе идущие сразу после «\e\-») должны быть в нижнем регистре, за
исключением тех случаев, когда правилами языка, на котором написана
страница, или сложившейся практикой употребления технических терминов
определено иное.
.TP 
\fBОБЗОР\fP
Краткое описание команды или интерфейса функции
.IP
Для команд здесь показываются синтаксис и аргументы (включая параметры);
полужирное начертание используется для неизменяемого текста, а курсивом
обозначаются меняющиеся аргументы. Квадратные скобки ([]) показывают
необязательные аргументы, вертикальная черта (|) указывает на выбор одного
из вариантов, многоточие (\&...) означает возможное повторение. Для функций
показываются все необходимые объявления данных или \fB#include\fP директивы с
последующим объявлением функции.
.IP
.\" FIXME . Say something here about compiler options
Если для получения объявления функции (или переменной) из заголовочного
файла требуется определить макрос тестирования свойств, то это указывается в
ОБЗОРЕ согласно описанию из \fBfeature_test_macros\fP(7).
.TP 
\fBКОНФИГУРАЦИЯ\fP
Особенности настройки устройства
.IP
Этот раздел, как правило, присутствует только в разделе 4.
.TP 
\fBОПИСАНИЕ\fP
Объяснение того, для чего предназначена программа, функция или формат
.IP
.\" If there is some kind of input grammar or complex set of subcommands,
.\" consider describing them in a separate
.\" .B USAGE
.\" section (and just place an overview in the
.\" .B DESCRIPTION
.\" section).
Здесь описывается взаимодействие с файлами и стандартным вводом, и что
записывается в стандартный вывода вывод или ошибок; не приводятся детали
реализации, если они не критичны для понимания интерфейса; показывается
типичное использование; информация о параметрах командной строки программы
даётся в разделе \fBOPTIONS\fP.
.IP
Если описывается новое поведение или новые флаги системного вызова или
библиотечной функции, отметьте где введено изменение — версию ядра или
библиотеки С. Данную информацию целесообразно приводить в виде части списка
\&\fB.TP\fP в следующем виде (здесь показан новый флаг системного вызова):
.RS 22
.TP 
\fBXYZ_FLAG\fP (начиная с Linux 3.7)
Описание флагов…
.RE
.IP
Включает информацию о версии, что особенно востребовано пользователями,
которые вынуждены использовать старые версии ядра или библиотеки C (что
характерно, например, для встраиваемых систем).
.TP 
\fBПАРАМЕТРЫ\fP
Описание параметров командной строки и их влияния на поведение программы.
.IP
.\" .TP
.\" .B USAGE
.\" describes the grammar of any sublanguage this implements.
Этот раздел как правило содержится только в разделах 1 и 8.
.TP 
\fBКОД ВЫХОДА\fP
Перечень возможных значений кода выхода программы и ситуаций, при которых
программа возвращает данное значение кода.
.IP
Этот раздел как правило содержится только в разделах 1 и 8.
.TP 
\fBВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ\fP
Для разделов 2 и 3 эта секция содержит перечень значений, возвращаемых
библиотеками вызывающей их программе и условия, при которых библиотеки
возвращают данные значения.
.TP 
\fBОШИБКИ\fP
В справочных страницах разделов 2 и 3 здесь описываются значения ошибок,
которые могут быть помещены в \fIerrno\fP, а также приводится описание причин
ошибок.
.IP
Если ошибка возникает при нескольких различных условиях, предпочтительней
создавать отдельные записи списка (с повторением имени ошибки) для каждого
из условий. Такое разделение делает условия более понятными, этот список
проще читать и можно указывать метаинформацию (например, номер версии ядра,
в котором условие начало действовать) на каждое условие.
.IP
\fIСписок ошибок должен быть в алфавитном порядке\fP.
.TP 
\fBОКРУЖЕНИЕ\fP
Перечень переменных окружения, влияющих на программу и оказываемый ими
эффект.
.TP 
\fBФАЙЛЫ\fP
Список файлов, используемых программой или функцией, таких как
конфигурационные файлы, файлы запуска и файлы, с которыми непосредственно
работает программа.
.IP
.\" May 07: Almost no current man pages have a DIAGNOSTICS section;
.\"         "RETURN VALUE" or "EXIT STATUS" is preferred.
.\" .TP
.\" .B DIAGNOSTICS
.\" gives an overview of the most common error messages and how to
.\" cope with them.
.\" You don't need to explain system error messages
.\" or fatal signals that can appear during execution of any program
.\" unless they're special in some way to the program.
.\"
.\" May 07: Almost no current man pages have a SECURITY section.
.\".TP
.\".B SECURITY
.\"discusses security issues and implications.
.\"Warn about configurations or environments that should be avoided,
.\"commands that may have security implications, and so on, especially
.\"if they aren't obvious.
.\"Discussing security in a separate section isn't necessary;
.\"if it's easier to understand, place security information in the
.\"other sections (such as the
.\" .B DESCRIPTION
.\" or
.\" .B USAGE
.\" section).
.\" However, please include security information somewhere!
Указывайте полный путь к этим файлам, также используйте возможность изменить
во время установки изменить путь в соответствии с предпочтениями
пользователя.
.TP 
\fBАТРИБУТЫ\fP
Общая информация о различных атрибутах функции(функций), описанной на этой
странице. Смотри \fBattributes\fP(7) для получения дополнительных сведений.
.TP 
\fBВЕРСИИ\fP
Краткое описание ядра Linux или версии glibc, где впервые появился системный
вызов или функция библиотеки, либо существенно изменилось их действие.
.IP
Как правило, описание каждого нового интерфейса должно включать раздел
ВЕРСИИ в справочной странице. К сожалению, в многих справочных страницах эта
информация отсутствует (когда они были написаны, не было правила,
предписывающего делать это). Заплаты, исправляющие подобные недостатки,
приветствуются, но, с точки зрения программистов, пишущих новый код, эта
информация, вероятно, имеет значение только в том случае, если интерфейсы
ядра были добавлены в Linux 2.4 или позже (т. е., отличаются от ядра 2.2), а
для библиотечных функций, если изменения были добавлены начиная с glibc
версии 2.1 (т. е., отличаются от glibc 2.0).
.IP
Справочная страница \fBsyscalls\fP(2) также содержит информацию о версиях ядра,
в которых были впервые реализованы различные системные вызовы.
.TP 
\fBСООТВЕТСТВИЕ СТАНДАРТАМ\fP
Описание любых стандартов или соглашений, относящихся к функции или команде,
речь о которой идет на странице.
.IP
Предпочтительные обозначения для различных стандартов указаны в качестве
заголовков на странице \fBstandards\fP(7).
.IP
Для страницы из раздела 2 или 3, данный раздел должен показывать версию
POSIX.1, которой соответствует вызов, а также есть ли вызов в C99 (наличие в
других стандартах, таких как SUS, SUSv2 и XPG, или реализациях стандартов
SVr4 и 4.xBSD, не важно; если вызов был в этих стандартах, но отсутствует в
текущей версии POSIX.1, то это стоит упомянуть).
.IP
Если вызов не соответствует какому\-либо стандарту, но существует во многих
системах, также упомяните об этом. Если вызов есть только в Linux, то это
также стоит отметить.
.IP
Если данный раздел состоит только из списка стандартов (что, обычно, и
есть), завершите список точкой (\(aq.\(aq).
.TP 
\fBЗАМЕЧАНИЯ\fP
Различные замечания.
.IP
Для разделов 2 и 3 может быть полезным создание подразделов (\fBSS\fP),
озаглавленных \fIПримечания для Linux\fP и \fIПримечания для Glibc\fP.
.IP
В разделе 2 используйте заголовок \fIРазличия между ядром и библиотекой С\fP,
чтобы отметить различия (если имеются) между  системными вызовами функций
библиотеки и ядра.
.TP 
\fBДЕФЕКТЫ\fP
Перечень известных ошибок, ограничений, недостатков причиняющих неудобство а
также других сомнительных свойств.
.TP 
\fBПРИМЕРЫ\fP
Один или несколько примеров, демонстрирующих, каким образом данная функция,
команда или файл используются.
.IP
Для получения более подробной информации о написании примеров программ
смотрите раздел \fIПримеры программ\fP далее.
.TP 
\fBАВТОРЫ\fP
Список авторов документа или программы.
.IP
\fBИспользовать раздел АВТОРЫ настоятельно не рекомендуется\fP. Лучше не
загромождать каждую страницу списком  авторов (список со временем
увеличивается); если вы написали или значительно исправили страницу,
добавьте уведомление об авторском праве в виде комментария в исходный
файл. Если вы автор драйвера устройства и хотите включить адрес для отправки
сообщений об ошибках, то сделайте это в разделе ДЕФЕКТЫ.
.TP 
\fBСМОТРИ ТАКЖЕ\fP
Разделённый запятыми список уместных справочных страниц, возможно, ведущих
на другие страницы или документы.
.IP
Список должен быть упорядочен по номеру раздела, а затем по алфавиту. Не
заканчивайте список точкой.
.IP
Если список \fBСМОТРИТЕ ТАКЖЕ\fP содержит много длинных имён справочных
страниц, то для улучшения визуального представления может быть полезно
воспользоваться командами \fI.ad l\fP (не выравнивать по правому краю) и \fI.nh\fP
(отключить перенос). Запретить перенос имён справочных страниц можно с
помощью указания перед словом строки «\e%».
.IP
Учитывая распределённую, автономную природу проектов FOSS и их
документирование, иногда необходимо — и во многих случаях желательно —
включать в раздел \fBСМОТРИТЕ ТАКЖЕ\fP ссылки на справочные страницы из других
проектов.
.SH "РУКОВОДСТВО ПО СТИЛЮ ОФОРМЛЕНИЯ"
В следующих абзацах представлен предпочтительный стиль написания страница в
проекте \fIman\-pages\fP. Если что\-то не описано подробно, то следует
придерживаться чикагского стилистического справочника (Chicago Manual of
Style); также постарайтесь поискать схожие примеры в исходном коде дерева
проекта.
.SS "Использование гендерно\-нейтральных выражений"
.\"
Используйте гендерно\-нейтральный язык в тексте справочных страниц насколько
это возможно. Приемлемо использовать местоимения «они» («им», «себя», «их»).
.SS "Соглашения о форматировании справочных страниц, описывающих команды"
.PP
Для справочных страниц, описывающих команду (как правило в разделах 1 и 8),
аргументы всегда указываются с помощью курсива, \fIдаже в разделе ОБЗОР\fP.
.PP
.\"
Имя команд и их опции, всегда должны быть оформленными полужирным стилем.
.SS "Соглашения по оформлению справочных страниц, описывающих функции"
В справочных страницах, которые описывают функции (обычно, в разделах 2 и
3), параметры всегда оформляются, используя курсив;  \fIдаже в разделе
ОБЗОР\fP, где остальная часть функции определена полужирным:
.PP
\fB int имя_функции(int \fP\fIargc\fP\fB, char **\fP\fIargv\fP\fB);\fP
.PP
Имена переменных, как и имена параметров, должны быть оформлены курсивом.
.PP
Любая ссылка на тему текущей справочной страницы должна быть записана с
именем оформленным полужирным, включая пару круглых скобок, в
прямом(нормальном) шрифте. Например, на странице \fBfcntl\fP(2), ссылки на тему
страницы были бы записаны как: \fBfcntl\fP(). Рекомендуемый способ записи в
исходном файле:
.PP
.EX
    .BR fcntl ()
.EE
.PP
.\"
(используйте этот формат вместо б\efB...\efP ()» — такой подход упрощает
создание инструментов разбора исходных файлов справочных страниц)
.SS "Использование семантики новых строк"
.\"
В исходном тексте справочной страницы новые предложения должны начинаться с
новой строки, а длинные предложения должны разбиваться на строки в местах
его деления на части (запятыми, точками с запятой, двоеточиями и т. п.). Это
соглашение, иногда называемое «семантика новых строк», облегчает просмотр
внесённых заплат, которые часто применяются на уровне отдельных предложений
или его частей.
.SS "Общие соглашения по оформлению"
.PP
Параграфы должны разделяться подходящими маркерами (обычно \fI.PP\fP или
\&\fI.IP\fP). \fIНе\fP разделяйте параграфы пробельными строками, так как это
приводит к плохому отображению в некоторых выходных форматах (в частности,
PostScript и PDF).
.PP
Имена файлов (также пути или ссылки на заголовочные файлы) всегда должны
быть оформлены курсивом (например, \fI<stdio.h>\fP), кроме раздела
ОБЗОР, где включаемые файлы должны быть полужирным (например, \fB#include
<stdio.h>\fP). Тут ссылка на стандартный заголовочный файл включает
имя заголовочного файл, окружённого угловыми скобками, это типично для C
(например, \fI<stdio.h>\fP).
.PP
Специальные макросы, которые обычно находятся в верхнем регистре, оформляют
полужирным (например, \fBMAXINT\fP). Исключение: не делайте полужирным NULL.
.PP
В списке, при перечислении кодов ошибок, коды оформляют полужирным (в этом
списке обычно используют макрос \fB\&.TP\fP).
.PP
Составные команды, если они длинные, должны быть записаны с отступом по
линии, как самодостаточные, с пустой строкой перед и после команды, например
.PP
.in +4n
.EX
man 7 man\-pages
.EE
.in
.PP
Если команда короткая, то её можно включить прямо в текст как курсив,
например \fIman 7 man\-pages\fP. В этом случае может потребоваться использовать
неразрывные пробелы («\e\ ») в соответствующих местах команды. Параметры
команды также должны быть выделены курсивом (например, \fI\-l\fP).
.PP
Выражения, если не записаны на отдельной строке с отступом, должны
выделяться курсивом. Здесь также может потребоваться задавать неразрывные
пробелы, если выражение встроено в обычный текст.
.PP
При показе примера сеанса оболочки пользовательский ввод должен быть выделен
жирным, например
.PP
.in +4n
.EX
$ \fBdate\fP
Thu Jul  7 13:01:27 CEST 2016
.EE
.in
.PP
.PP
Все ссылки на другие справочные страницы должны выделяться жирным шрифтом,
\fIвсегда\fP должен быть указан номер раздела шрифтом Roman (обычным) и без
пробелов (например, \fBintro\fP(2)). В исходном файле это лучше записывать так:
.PP
.EX
    .BR intro (2)
.EE
.PP
(включение номера раздела в перекрёстных ссылках позволяет таким
инструментам как \fBman2html\fP(1) создавать правильные гиперссылки между
страницами)
.PP
Управляющие знаки следует писать полужирным шрифтом, без кавычек, как в
примере \fB^X\fP.
.SS Орфография
Начиная с версии \fIman\-pages\fP следует при написании Американским соглашениям
(до этого использовалось английское и американское написание); пишите новые
страницы и присылайте заплаты с учётом этих соглашений.
.PP
Кроме известных различий в написании, есть несколько других тонкостей,
которые следует учесть:
.IP * 3
Американский вариант английского языка имеет обыкновение использовать формы
«backward» (назад), «upward» (вверх), «toward» (к) и т. д., а в британском
варианте это «backwards», «upwards», «towards» и т. д.
.SS "Номера версий BSD"
Классической схемой обозначения версий BSD является \fIx.yBSD\fP, где \fIx.y\fP \-
номер версии (например, 4.2BSD). Избегайте написания в стиле \fIBSD 4.3\fP.
.SS "Печать заглавными буквами"
В заголовках разделов («SS») начинайте первое слово заголовка с заглавной
буквы, а остальные буквы должны быть строчными, если обратного не требуют
правила английского языка (например, имён собственных) или языка
программирования (например, идентификаторы имён). Пример:
.PP
.EX
    .SS Юникод в Linux
.EE
.\"
.SS "Отступ при определении структур, содержимого журналов сеансов оболочек и т. п."
При включении определений структур, журналов сеансов оболочек и т. п. в
выполняемый текст, нужно использовать отступ в 4 пробела (т. е., блок
заключается в \fI.in\ +4n\fP и \fI.in\fP), форматировать их с помощью макросов
\&\fI.EX\fP и \fIEE\fP и окружить их подходящими маркерами параграфа (\fI.PP\fP или
\&\fI.IP\fP). Пример:
.PP
.in +4n
.EX
    .PP
    .in +4n
    .EX
    int
    main(int argc, char *argv[])
    {
        return 0;
    }
    .EE
    .in
    .PP
.EE
.in
.SS "Предпочтительные термины"
В следующей таблице перечислены некоторые предпочтительные термины, для
использования в справочных страницах, главным образом, для
непротиворечивости информации на страницах.
.TS
l l l
---
l l l.
Термин (перевод)	Не используйте	Замечания

bit mask (маска битов)	bitmask
built\-in (встроенный)	builtin
Epoch (эпоха)	epoch	T{
Эпоха UNIX (00:00:00, 1 января 1970 UTC)
T}
filename (имя файла)	file name
filesystem (файловая система)	file system
hostname (имя узла)	host name
inode	i\-node
lowercase (строчные)	lower case, lower\-case
nonzero	non\-zero
pathname (путь)	path name
pseudoterminal (псевдо\-терминал)	pseudo\-terminal
privileged port (привилегированный порт)	T{
reserved port,
system port
T}
real\-time (реальное время)	T{
realtime,
real time
T}
run time (время исполнения)	runtime
saved set\-group\-ID (сохранённый set\-group\-ID)	T{
saved group ID,
saved set\-GID
T}
saved set\-user\-ID (сохранённый saved set\-user\-ID)	T{
saved user ID,
saved set\-UID
T}
set\-group\-ID	set\-GID, setgid
set\-user\-ID	set\-UID, setuid
superuser (суперпользователь)	T{
super user,
super\-user
T}
superblock (суперблок)	T{
super block,
super\-block
T}
timestamp (метка времени)	time stamp
timezone (часовой пояс)	time zone
uppercase (прописные)	upper case, upper\-case
usable (приемлемый)	useable
user space (пространство пользователя)	userspace
username (имя пользователя)	user name
x86\-64	x86_64	T{
Кроме случая, когда ссылаются на результат «uname\ \-m» или подобных
T}
zeros (нули)	zeroes
.TE
.PP
Смотрите также \fIДефисы в составных терминах\fP далее.
.SS "Термины, которых следует избегать"
В следующей таблице перечислены некоторые термины, которые лучше не
использовать в справочных страницах и предлагаемые им альтернативы,
использование которых поможет избежать противоречий между справочными
страницами.
.TS
l l l
---
l l l.
Не используйте	Для использования	Замечания

32bit	32\-bit (32\-битный)	T{
это же с 8\-bit, 16\-bit и т. п.
T}
current process (текущий процесс)	calling process (вызывающий процесс)	T{
Частая ошибка, делаемая программистами ядра при написании справочных страниц
T}
manpage	T{
man page, manual page (справочная страница)
T}
minus infinity (минус бесконечность)	negative infinity (отрицательная бесконечность)
non\-root	unprivileged user (непривилегированный пользователь)
non\-superuser	unprivileged user (непривилегированный пользователь)
nonprivileged	непривилегированный 
OS	operating system (операционная система)
plus infinity (плюс бесконечность)	positive infinity (положительная бесконечность)
pty	pseudoterminal (псевдо\-терминал)
tty	terminal (терминал)
Unices	UNIX systems (системы UNIX)
Unixes	UNIX systems (системы UNIX)
.TE
.SS "Торговые марки"
При упоминании торговых марок соблюдайте правильное написание с соблюдением
регистра. Вот список правильного написания различных торговых марок, которые
иногда указывают неправильно:
.PP
     DG/UX
     HP\-UX
     UNIX
     UnixWare
.SS "NULL, NUL, указатель null и символ null"
\fIУказатель null\fP — это указатель, который ни на что не указывает и, как
правило, имеет значение константы \fINULL\fP.  С другой стороны, \fINUL\fP
представляет собой \fIбайт null\fP, байт со значением 0, который в C
представляется символьной константой \fI\(aq\e0\(aq\fP.
.PP
Данный указатель лучше называть «указатель null» или просто «NULL»; не
используйте «указатель NULL».
.PP
Для описания байта используйте «байт null». Не пишите «NUL», так как такое
наименование легко спутать с «NULL». Также избегайте терминов «нулевой байт»
и «символ null». Байт, которым заканчиваются строки в C, нужно описывать как
«завершающий байт null» (terminating null byte); про строки можно сказать
как «завершающиеся null» (null\-terminated), но не используйте «завершающиеся
NUL».
.SS Гиперссылки
Для указания гиперссылок используйте пару макросов \fI.UR\fP/\fI.UE\fP (смотрите
\fBgroff_man\fP(7)). Они создаёт корректные гиперссылки, которые можно
использовать  при просмотре в браузере, например так:
.PP
     BROWSER=firefox man \-H имя_страницы
.SS "Использование сокращений e.g. (например), i.e. (т. е.), a.k.a. (также известно как) и подобных"
Обычно лучше не использовать сокращения вида «e.g.», «i.e.», «etc.», «cf.»,
«a.k.a.», а писать слова полностью («например», «то есть», «и так далее»,
«по сравнению с», «также известно как»).
.PP
Единственным приемлемым местом для их использования является \fIкороткая\fP
сноска (как, напр.,  эта).
.PP
Всегда указывайте точки в подобных аббревиатурах. Также после «напр.р» и
«т.е.» всегда ставится запятая.
.SS "Длинное тире"
Для написания тире — символический знак, который появится в конце этой
фразы\(emв *roff используется макрос «\e(em» (на терминалах с ASCII тире,
обычно, отображается в виде двух переносов, но в других типографских
контекстах оно может выглядеть как длинное тире). Тире должно записываться
\fIбез\fP окружающих его пробелов.
.SS "Дефисы в составных терминах"
Составные термины пишутся через дефис при использовании в качестве
определителя (т. е., для уточнения последующего существительного). Примеры:
.PP
    32\-bit value (32\-битное значение)
    command\-line argument (аргумент командной строки)
    floating\-point number (число с плавающей запятой)
    run\-time check (проверка во время выполнения)
    user\-space function (функция пространства пользователя)
    wide\-character string (строка широких символов)
.SS "Дефис с multi, non, pre, re, sub и т. п."
Общая тенденция на современном английском языке состоит в том, чтобы не
ставить дефисы после префиксов «multi», «non», «pre», «re», «sub» и т. д. В
справочных страницах, в основном, нужно следовать этому правилу, когда эти
префиксы используются в естественных английских конструкциях с простыми
суффиксами. В следующем списке приведены некоторые примеры правильного
написания:
.PP
    interprocess
    multithreaded
    multiprocess
    nonblocking
    nondefault
    nonempty
    noninteractive
    nonnegative
    nonportable
    nonzero
    preallocated
    precreate
    prerecorded
    reestablished
    reinitialize
    rearm
    reread
    subcomponent
    subdirectory
    subsystem
.PP
Дефисы должны быть сохранены после префиксов для нестандартных английских
слов, торговых марок, имён собственных, акронимов или составных
терминов. Несколько примеров:
.PP
    non\-ASCII
    non\-English
    non\-NULL
    non\-real\-time
.PP
И напоследок заметим, что «re\-create» и «recreate» — это два различных
глагола и первый, вероятно то, что нужно.
.SS "Символ математического минуса"
Если требуется символ математического минуса (например, для чисел (\-1),
перекрёстных ссылок справочных страниц (\fButf\-8\fP(7) или при записи
параметров, у которых есть начальные тире (\fIls\ \-l\fP)), используйте
следующую форму записи в справочной странице:
.PP
    \e\-
.PP
Это правило применимо и в примерах кода.
.SS "Символьные константы"
Чтобы получить одинарные кавычки, которые хорошо отображаются и в ASCII и в
UTF\-8, используйте следующую форму записи символьных констант в справочной
странице:
.PP
    \e(aqC\e(aq
.PP
где \fIC\fP — символ в кавычках. Это правило применимо и в примерах кода.
.SS "Примеры программ и сценариев оболочки"
Справочные страницы могут включать примеры программ, демонстрирующие
использование системных вызовов или библиотечных функций. При этом нужно
учитывать ряд условий:
.IP * 3
Примеры программ должны быть написаны на языке C.
.IP *
Примеры программ необходимы и полезны лишь в тех случаях, когда они
демонстрируют что\-то сверх того, что может быть легко представлено в
текстовом описании командного интерфейса. Примеры программ, которые не
показывают ничего кроме вызова команды, как правило обладают незначительной
полезностью.
.IP *
Примеры программ должны быть предельно короткими (желательно менее 100
строк; в идеале менее 50 строк)
.IP *
В примерах программ должна быть реализована проверка ошибок после системных
вызовов и вызовов библиотечных функций.
.IP *
Примеры программ должны быть полными и компилироваться без предупреждений
при использовании  \fIcc\ \-Wall\fP.
.IP *
Там, где это возможно и целесообразно, примеры программ должны
демонстрировать эксперимент, изменяя свое поведение в зависимости от входных
параметров (в идеале от параметров командной строки или получаемых
программой через стандартный ввод).
.IP *
Примеры программ должны быть написаны в стиле Кернигана (Kernighan) и Ритчи
(Ritchie), с отступом, состоящим из 4 пробелов. (Избегайте использования
символа табуляции в исходном коде!) Следующие команды могут быть
использованы для форматирования исходного кода в что\-то близкое к
предпочтительному стилю:
.IP
    indent \-npro \-kr \-i4 \-ts4 \-sob \-l72 \-ss \-nut \-psl prog.c
.IP *
Для удобства восприятия, все программы должны завершаться с использованием
одного из вариантов:
.IP
     exit(EXIT_SUCCESS);
     exit(EXIT_FAILURE);
.IP
Избегайте использования следующих форм завершения программы:
.IP
    exit(0);
    exit(1);
    return n;
.IP *
В случаях, когда примеру программы предшествует обширный пояснительный
текст, определите код в подраздел и пометьте соответствующим заголовком
\fIКод программы\fP, как показано ниже:
.IP
\&.SS Код программы
.IP
Всегда делайте это, если пояснительный текст включает примеры вывода в
терминал.
.PP
Если включаете лог вывода в терминал, демонстрирующий использование
программы или системной функции:
.IP * 3
Поместите лог терминала выше листинга кода программы.
.IP *
Обозначьте лог терминала четырьмя пробелами.
.IP *
Выделите полужирным вводимый пользователем текст, чтобы отличить его от
вывода системы.
.PP
Ознакомиться с тем, как должны выглядеть примеры программ Вы можете,
прочитав \fBwait\fP(2)  и \fBpipe\fP(2).
.SH ПРИМЕР
В качестве канонического примера того, как должны выглядеть страницы в
пакете \fIman\-pages\fP, смотрите \fBpipe\fP(2) и \fBfcntl\fP(2).
.SH "СМОТРИТЕ ТАКЖЕ"
\fBman\fP(1), \fBman2html\fP(1), \fBattributes\fP(7), \fBgroff\fP(7), \fBgroff_man\fP(7),
\fBman\fP(7), \fBmdoc\fP(7)
