.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" and Copyright 2003,2004 Andi Kleen, SuSE Labs.
.\" numa_maps material Copyright (c) 2005 Silicon Graphics Incorporated.
.\"     Christoph Lameter, <cl@linux-foundation.org>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH NUMA 7 2012\-08\-05 Linux "Руководство программиста Linux"
.SH ИМЯ
numa \- обзор архитектуры с неравномерной памятью (Non\-Uniform Memory
Architecture)
.SH ОПИСАНИЕ
Неравномерный доступ к памяти (NUMA) приписывают микропроцессорным системам,
у которых память разделяется на узлы. Время доступа к узлу памяти зависит от
относительного расположения обращающегося ЦП к узлу (в этом отличие от
симметричных мультипроцессорных систем, в которых время доступа ко всей
памяти одинаково для всех ЦП). Обычно, каждый ЦП в системе NUMA имеет свой
локальный узел памяти, чьё содержимое можно получить быстрее, чем из памяти
локального узла другого ЦП или из памяти шины, которая доступна для всех ЦП.
.SS "Системные вызовы NUMA"
В ядре Linux реализованы следующие системные вызовы, относящиеся к NUMA:
\fBget_mempolicy\fP(2), \fBmbind\fP(2), \fBmigrate_pages\fP(2), \fBmove_pages\fP(2) и
\fBset_mempolicy\fP(2). Однако, приложения, обычно, должны использовать
интерфейс, предоставляемый библиотекой \fIlibnuma\fP; смотрите «Поддержка в
библиотеках» далее.
.SS "/proc/[число]/numa_maps (начиная с Linux 2.6.14)"
.\" See also Changelog-2.6.14
В этом файле содержится информация о политике и выделении памяти NUMA для
процесса.
.PP
В каждой строке содержится информация области памяти, используемом
процессом, отражающей, помимо прочего, применяемую политику памяти для этой
области и какие страничные узлы были выделены.
.PP
Файл \fInuma_maps\fP доступен только на чтение. При чтении
\fI/proc/<pid>/numa_maps\fP ядро сканирует виртуальное адресное
пространство процесса и выдаёт как используется память. Одна строка
соответствует уникальной области памяти процесса.
.PP
В первом поле каждой строки содержится начальный адрес области памяти. Это
поле позволяет провести параллель с файлом \fI/proc/<pid>/maps\fP, в
котором содержится конечный адрес области и другая информация, такая как
права доступа и данные о совместном использовании.
.PP
Во втором поле показана политика памяти, которая применена к области в
настоящее время. Заметим, что применённая политика необязательно является
политикой, установленной процессом для этой области памяти. В частности,
если для этой области процесс установил политику «default» (по умолчанию),
то применяемая политика для этой области будет политикой процесса, которая
может совпадать, а может и не совпадать с «default».
.PP
В оставшейся части строки содержится информация о страницах, выделенных в
области памяти:
.TP 
\fIN<узел>=<кол\-во_страниц>\fP
Количество страниц, выделенных на \fI<узле>\fP. В
\fI<кол\-во_страниц>\fP учитываются только страницы, отображённые
процессом в настоящий момент. Перемещение (migration) страниц и возвращение
памяти может приводить к временному неотображению страниц, связанных с этой
областью памяти. Такие страницы могут появиться снова только после того, как
процесс попытается обратиться к ним. Если область памяти считается общей или
является отображением файла, то для других процессов в это же время могут
быть показаны дополнительные страницы, отображённые в соответствующее
адресное пространство.
.TP 
\fIfile=<имя_файла>\fP
Файл, отображаемый в область памяти. Если файл отображён как закрытый
(private), попытка записи может сгенерировать страницы COW (копирование при
записи) в этой области памяти. Эти страницы показываются как анонимные.
.TP 
\fIheap\fP
Область памяти, используемая под кучу.
.TP 
\fIstack\fP
Область памяти, используемая под стек.
.TP 
\fIhuge\fP
Область огромной памяти. Показывает количество огромных страниц, а не
страниц обычного размера.
.TP 
\fIanon=<страниц>\fP
Количество анонимных страниц в области.
.TP 
\fIdirty=<страниц>\fP
Количество грязных (dirty) страниц.
.TP 
\fImapped=<страниц>\fP
Общее количество отображённых страниц, если оно отличается от количества
страниц \fIdirty\fP и \fIanon\fP.
.TP 
\fImapmax=<количество>\fP
Максимальный mapcount (количество процессов, отображающих одну страницу)
обнаруженный при сканировании. Может использоваться как индикатор степени
совместного использования заданной области памяти.
.TP 
\fIswapcache=<количество>\fP
Количество страниц, связанных с участками на устройстве подкачки.
.TP 
\fIactive=<страниц>\fP
Количество страниц в активном списке. Это поле показывается только, если его
значение отличается от количества страниц в этой области. Это означает, что
в области памяти существует несколько неактивных страниц, которые могут быть
скоро удалены swapper.
.TP 
\fIwriteback=<страниц>\fP
Количество страниц, которые в настоящий момент записываются на диск.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Интерфейсы NUMA не описаны в стандартах.
.SH ЗАМЕЧАНИЯ
Системные вызовы Linux NUMA и интерфейс \fI/proc\fP доступны только, если ядро
было собрано с включённым параметром \fBCONFIG_NUMA\fP.
.SS "Поддержка в библиотеках"
Выполняйте компоновку с \fI\-lnuma\fP. Библиотека \fIlibnuma\fP и требуемый
заголовочный файл \fI<numaif.h>\fP доступны в пакете \fInumactl\fP.
.PP
Однако, приложения не должны использовать эти системные вызовы
напрямую. Вместо этого, рекомендуется использовать интерфейс высокого
уровня, предоставляемый функциями \fBnuma\fP(3) из пакета \fInumactl\fP. Пакет
\fInumactl\fP доступен по адресу
.UR ftp://oss.sgi.com\:/www\:/projects\:/libnuma\:/download/
.UE .
Пакет
также включён в некоторые дистрибутивы Linux. Некоторые дистрибутивы
помещают библиотеку для разработки и заголовочные файлы в пакет
\fInumactl\-devel\fP.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBget_mempolicy\fP(2), \fBmbind\fP(2), \fBmove_pages\fP(2), \fBset_mempolicy\fP(2),
\fBnuma\fP(3), \fBcpuset\fP(7), \fBnumactl\fP(8)
