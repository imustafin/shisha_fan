.\" -*- mode: troff; coding: UTF-8 -*-
.\" This man page is Copyright (C) 1999 Claus Fischer.
.\"
.\" %%%LICENSE_START(VERBATIM_ONE_PARA)
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%LICENSE_END
.\"
.\" 990620 - page created - aeb@cwi.nl
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FIFO 7 2017\-11\-26 Linux "Руководство программиста Linux"
.SH ИМЯ
fifo \- специальный файл, организующий очередь (first\-in first\-out),
именованный канал
.SH ОПИСАНИЕ
Специальный файл FIFO (именованный канал) подобен каналу, за исключением
того, что доступен как часть файловой системы. Его можно открывать из
нескольких процессов на чтении или запись. Когда процессы обмениваются
данными через FIFO, ядро передаёт все данные без их записи в файловую
систему. То есть, специальный файл FIFO не хранит содержимое в файловой
системе; запись в файловой системе служит просто местом, посредством
которого процессы могут получить доступ к каналу, используя имя в файловой
системе.
.PP
Ядро поддерживает один объект канала для каждого специального файла FIFO,
который открыт хотя бы одним процессом. Для того, чтобы пропускать данные,
FIFO должен быть открыт как для чтения, так и для записи. Обычно, при
открытии FIFO он блокируется до тех пор, пока вышеописанные условия не будут
выполнены.
.PP
Процесс может открыть FIFO в неблокирующем режиме. В этом случае открытие
только для чтения выполняется без ошибки, даже если другая сторона ещё не
открыла его для записи, и открытие только на запись завершается ошибкой
\fBENXIO\fP (нет такого устройства или адреса), если другая сторона к этому
моменту не была открыта на чтение.
.PP
В Linux открытие FIFO для чтения и записи может быть осуществлено в
блокирующем и неблокирующем режимах. Так как POSIX не описывает эти
положения, это может быть использовано для открытия FIFO для чтения в
отсутствие считывающих процессов. Процесс, использующий этот файл для чтения
и записи (для связи с самим собой), не должен допустить возникновения
блокировок (deadlocks).
.SH ЗАМЕЧАНИЯ
Подробную информацию о семантике ввода\-вывода FIFO смотрите в \fBpipe\fP(7).
.PP
Если процесс попытается записать данные в FIFO, который не открыт для
чтения, то ему посылается сигнал \fBSIGPIPE\fP.
.PP
Специальные файлы FIFO могут быть созданы с помощью \fBmkfifo\fP(3); при выводе
\fIls\ \-l\fP они отображаются с типом файла «p».
.SH "СМОТРИТЕ ТАКЖЕ"
\fBmkfifo\fP(1), \fBopen\fP(2), \fBpipe\fP(2), \fBsigaction\fP(2), \fBsignal\fP(2),
\fBsocketpair\fP(2), \fBmkfifo\fP(3), \fBpipe\fP(7)
