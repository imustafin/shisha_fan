.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (C) 2018, Stefan Hajnoczi <stefanha@redhat.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH VSOCK 7 2017\-11\-30 Linux "Руководство программиста Linux"
.SH ИМЯ
vsock \- семейство адресов Linux VSOCK
.SH ОБЗОР
\fB#include <sys/socket.h>\fP
.br
\fB#include <linux/vm_sockets.h>\fP
.PP
\fIstream_socket\fP\fB = socket(AF_VSOCK, SOCK_STREAM, 0);\fP
.br
\fIdatagram_socket\fP\fB = socket(AF_VSOCK, SOCK_DGRAM, 0);\fP
.SH ОПИСАНИЕ
Семейство адресов VSOCK обеспечивают взаимодействие между виртуальными
машинами и узлом, на котором они выполняются. Данное адресное семейство
используется гостевыми агентами и службами супервизора, которым необходим
канал связи, не зависящий от настроек сети виртуальной машины.
.PP
Возможные типы сокета: \fBSOCK_STREAM\fP и \fBSOCK_DGRAM\fP. Тип \fBSOCK_STREAM\fP
предоставляет байтовые потоки с установлением соединения и упорядоченной
доставкой. Тип \fBSOCK_DGRAM\fP предоставляет службу датаграмных пакетов без
установления соединения и  негарантированной доставкой и
порядком. Доступность типов сокета зависит от используемого супервизора.
.PP
Новый сокет создаётся с помощью вызова
.PP
.in +4n
.EX
socket(AF_VSOCK, socket_type, 0);
.EE
.in
.PP
Когда процесс хочет установить соединение, он вызывает \fBconnect\fP(2) с
нужным адресом сокета назначения. Сокет автоматически привязывается к
свободному порту, если этого ещё не было.
.PP
Процесс может слушать входящие соединения на привязанном первым адресе
сокета с помощью \fBbind\fP(2) и вызвав после этого \fBlisten\fP(2).
.PP
Данные передаются с помощью семейств системных вызовов \fBsend\fP(2) или
\fBwrite\fP(2), а  принимаются семействами системных вызовов \fBrecv\fP(2) или
\fBread\fP(2).
.SS "Формат адреса"
Адрес сокета определяется как комбинация 32\-битного идентификатора контекста
(CID) и 32\-битного номера порта. В CID задаётся источник или назначение, то
есть виртуальная машина или узел. Номер порта определяет службу, выполняемую
в определённой машине.
.PP
.in +4n
.EX
struct sockaddr_vm {
    sa_family_t    svm_family;     /* семейство адресов: AF_VSOCK */
    unsigned short svm_reserved1;
    unsigned int   svm_port;       /* номер порта в порядке байт узла */
    unsigned int   svm_cid;        /* адрес в порядке байт узла */
};
.EE
.in
.PP
Значение \fIsvm_family\fP всегда равно \fBAF_VSOCK\fP. Значение \fIsvm_reserved1\fP
всегда равно to 0. Значение \fIsvm_port\fP содержит номер порта в порядке байт
узла. Номера портов меньше 1024 называются \fIпривилегированными портами\fP.
Только процесс с мандатом \fBCAP_NET_BIND_SERVICE\fP может вызывать \fBbind\fP(2)
с такими номерами.
.PP
Существует несколько специальных адресов: \fBVMADDR_CID_ANY\fP (\-1U) означает
любой адрес при привязывании; \fBVMADDR_CID_HYPERVISOR\fP (0) зарезервирован
для служб встроенных в супервизор; \fBVMADDR_CID_RESERVED\fP (1) не должен
использоваться; \fBVMADDR_CID_HOST\fP (2) общеизвестный (well\-known) адрес
узла.
.PP
Специальная константа \fBVMADDR_PORT_ANY\fP (\-1U) означает любой порт для
связывания.
.SS "Живая миграция"
На сокеты действует живая миграния виртуальных машин. Соединённые сокеты
\fBSOCK_STREAM\fP становятся отключёнными, если виртуальная машина мигрирует на
новый узел. Когда это происходит приложения должны выполнить
переподключение.
.PP
Локальный CID при живой миграции может измениться, если старый CID
недоступен на новом узле. Привязанные сокеты автоматически обновляются новым
CID.
.SS "Вызовы ioctl"
.TP 
\fBIOCTL_VM_SOCKETS_GET_LOCAL_CID\fP
Получить CID локальной машины. Аргументом является указатель на \fIunsigned
int\fP.
.IP
.in +4n
.EX
ioctl(socket, IOCTL_VM_SOCKETS_GET_LOCAL_CID, &cid);
.EE
.in
.IP
Рассматривать использование \fBVMADDR_CID_ANY\fP при привязывании, вместо
получения локального CID с помощью \fBIOCTL_VM_SOCKETS_GET_LOCAL_CID\fP.
.SH ОШИБКИ
.TP 
\fBEACCES\fP
Невозможно привязаться к привилегированному порту не имея мандата
\fBCAP_NET_BIND_SERVICE\fP.
.TP 
\fBEADDRINUSE\fP
Не могу привязаться к порту, который уже используется.
.TP 
\fBEADDRNOTAVAIL\fP
Не удалось найти свободный порт для привязки или невозможно привязаться к
нелокальному CID.
.TP 
\fBEINVAL\fP
Некорректные параметры. Сюда относятся: попытка привязать уже привязанный
сокет, указание некорректной структуры \fIsockaddr_vm\fP и ошибки проверки
правильности входных данных.
.TP 
\fBENOPROTOOPT\fP
Недопустимый параметр сокета в \fBsetsockopt\fP(2) или \fBgetsockopt\fP(2).
.TP 
\fBENOTCONN\fP
Невозможно выполнить действие с неподключённым сокетом.
.TP 
\fBEOPNOTSUPP\fP
Операция не поддерживается. Сюда относятся: флаг \fBMSG_OOB\fP, не
реализованный для семейства вызовов \fBsend\fP(2), и \fBMSG_PEEK\fP для семейства
вызовов \fBrecv\fP(2).
.TP 
\fBEPROTONOSUPPORT\fP
Некорректный номер протокола сокета. Протокол всегда должен быть равен 0.
.TP 
\fBESOCKTNOSUPPORT\fP
Неподдерживаемый тип сокета в \fBsocket\fP(2). Допускаются только
\fBSOCK_STREAM\fP и \fBSOCK_DGRAM\fP.
.SH ВЕРСИИ
Поддержка для VMware (VMCI) доступна начиная с Linux 3.9. KVM (virtio)
поддерживается начиная с Linux 4.8. Hyper\-V поддерживается начиная с Linux
4.14.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBbind\fP(2), \fBconnect\fP(2), \fBlisten\fP(2), \fBrecv\fP(2), \fBsend\fP(2),
\fBsocket\fP(2), \fBcapabilities\fP(7)
