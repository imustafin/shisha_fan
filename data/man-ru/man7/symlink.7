.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\" and Copyright (C) 2008, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"	@(#)symlink.7	8.3 (Berkeley) 3/31/94
.\" $FreeBSD: src/bin/ln/symlink.7,v 1.30 2005/02/13 22:25:09 ru Exp $
.\"
.\" 2008-06-11, mtk, Taken from FreeBSD 6.2 and heavily edited for
.\"     specific Linux details, improved readability, and man-pages style.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYMLINK 7 2016\-10\-08 Linux "Руководство программиста Linux"
.SH ИМЯ
symlink \- работа с символьными ссылками
.SH ОПИСАНИЕ
Символьные ссылки — это файлы, которые служат указателями на другие
файлы. Чтобы понять их работу, сперва вы должны понять как работают жёсткие
ссылки.
.PP
Жёсткая ссылка на файл не отличима от оригинального файла, так как это
ссылка на объект, на который указывает оригинальное имя файла (более точно:
каждая из жёстких ссылок на файл — это ссылка на один \fIномер inode\fP, где
номер inode — индекс в таблице inode, в которой содержатся метаданные о всех
файлах файловой системы; смотрите \fBstat\fP(2)). Изменения файла не зависят от
используемого при этом имени файла. Жёсткие ссылки не могут указывать на
каталоги (чтобы не возникало петель в дереве файловой системы, что могло бы
привести к неправильной работе многих программ) и на файлы из разных
файловых систем (так как номера inode не уникальны в файловых системах).
.PP
Символьная ссылка — это специальный тип файла, чьё содержимое представляет
собой строку, содержащую имя другого файла — файла, на который указывает
ссылка (содержимое символьной ссылки можно прочитать с помощью
\fBreadlink\fP(2)). Другими словами, символьная ссылка — это указатель на
другое имя, а не на сам объект. В следствии этого, символьные ссылки могут
указывать на каталоги и могут указывать на файлы в разных файловых системах.
.PP
Объект с именем, на которое ссылается символьная ссылка, может не
существовать. Символьную ссылку, указывающую на не существующее имя,
называют \fIоборванной ссылкой (dangling link)\fP.
.PP
Поскольку символьная ссылка и объект, на который она ссылается, сосуществуют
в пространство имён файловой системы, можно запутаться при различении самой
ссылки и объекта, на который она ссылается. Старые системы, команды и
системные вызовы имели собственные соглашения о ссылках, специально для
этого созданные. Здесь в общих чертах описаны правила, которые одинаково
реализованы в Linux и других системах. Важно, чтобы локальное приложение
также соответствовало этим правилам, и пользовательский интерфейс был
максимально одинаков.
.SS "Владельцы, права и отметки времени символьных ссылок"
Владельца и группу существующей символьной ссылки можно изменить с помощью
\fBlchown\fP(2). Владельцы символьной ссылки учитываются только, когда
символьная ссылка удаляется или переименовывается в каталоге, на котором
установлен бит закрепления (sticky bit) (смотрите \fBstat\fP(2)).
.PP
Время последнего обращения и изменения символьной ссылки можно изменять с
помощью \fButimensat\fP(2) или \fBlutimes\fP(3).
.PP
.\" Linux does not currently implement an lchmod(2).
.\"
.\" The
.\" 4.4BSD
.\" system differs from historical
.\" 4BSD
.\" systems in that the system call
.\" .BR chown (2)
.\" has been changed to follow symbolic links.
.\" The
.\" .BR lchown (2)
.\" system call was added later when the limitations of the new
.\" .BR chown (2)
.\" became apparent.
В Linux права на символьную ссылку при операциях не учитываются; права
всегда имеют значение 0777 (чтение, запись и исполнение для всех категорий
пользователей) и это нельзя изменить (заметим, что есть несколько
«магических» символьных ссылок в дереве каталогов \fI/proc\fP — например, файлы
\fI/proc/[pid]/fd/*\fP — с другим набором прав).
.SS "Получение файлового дескриптора, который указывает на символьную ссылку"
Для работы с самой символьной ссылкой (а не файлом, на который она
указывает) нужно указать комбинацию флагов \fBO_PATH\fP и \fBO_NOFOLLOW\fP вызов
\fBopen\fP(2) вернёт файловый дескриптор, который можно передавать в аргументе
\fIdirfd\fP в такие системные вызовы как \fBfstatat\fP(2), \fBfchownat\fP(2),
\fBfchmodat\fP(2), \fBlinkat\fP(2) и \fBreadlinkat\fP(2).
.PP
По умолчанию (т. е., если не указан флаг \fBAT_SYMLINK_FOLLOW\fP), если
\fBname_to_handle_at\fP(2) вызывается для символьной ссылки, то он возвращает
описатель символьной ссылки (а не файла, на который она указывает). Затем с
его помощью можно получить файловый дескриптор символьной ссылки (а не
файла, на который она указывает), указав флаг \fBO_PATH\fP в последующем вызове
\fBopen_by_handle_at\fP(2). Данный файловый дескриптор можно использовать в
вышеупомянутых системных вызовах для работы с самой символьной ссылкой.
.SS "Трактовка символьных ссылок в системных вызовах и командах"
При работе с символьными ссылками можно воздействовать на сами символьные
ссылки или на объекты, на которые они указывают. В последнем случае про
приложение или системный вызов говорят, что он \fIпереходит (follow)\fP по
ссылке. Символьные ссылки могут указывать на другие символьные ссылки; в
этом случае ссылки разыменовываются до нахождения объекта, который не
является символьной ссылкой, символьной ссылки, которая указывает на
несуществующий файл, или до обнаружения зацикливания (обнаружение
зацикливания выполняется заданием максимального количества переходов по
ссылкам, при превышении которого возвращается ошибка).
.PP
Есть три области, которые требуют обсуждения:
.IP 1. 3
Использование символьных ссылок в виде имён файлов в аргументах системных
вызовов.
.IP 2.
Символьные ссылки, указываемые в аргументах командной строки утилит, которые
не выполняют обход дерева файлов.
.IP 3.
Символьные ссылки, встреченные утилитами при обходе дерева файлов
(задаваемые в командной строке или встреченные как часть файла при обходе
иерархии).
.SS "Системные вызовы"
Рассмотрим использование символьных ссылок в виде имён файлов в аргументах
системных вызовов.
.PP
За исключениями, описанными ниже, все системные вызовы переходят по
символьным ссылкам. Например, если есть символьная ссылка \fIslink\fP, которая
указывает на файл с именем \fIafile\fP, то системный вызов \fIopen("slink"
\&...\&)\fP вернёт файловый дескриптор, ссылающийся на файл \fIafile\fP.
.PP
Некоторые системные вызовы не переходят по ссылкам, а работают с самими
ссылками: \fBlchown\fP(2), \fBlgetxattr\fP(2), \fBllistxattr\fP(2),
\fBlremovexattr\fP(2), \fBlsetxattr\fP(2), \fBlstat\fP(2), \fBreadlink\fP(2),
\fBrename\fP(2), \fBrmdir\fP(2) и \fBunlink\fP(2).
.PP
.\" Maybe one day: .BR fchownat (2)
Другие системные вызовы могут переходить по ссылкам: \fBfaccessat\fP(2),
\fBfchownat\fP(2), \fBfstatat\fP(2), \fBlinkat\fP(2), \fBname_to_handle_at\fP(2),
\fBopen\fP(2), \fBopenat\fP(2), \fBopen_by_handle_at\fP(2) и \fButimensat\fP(2);
подробности смотрите в их справочных страницах. Так как \fBremove\fP(3)
является псевдонимом \fBunlink\fP(2), библиотечная функция также не переходит
по символьным ссылкам. При указании символьной ссылки \fBrmdir\fP(2) вызов
завершается с ошибкой \fBENOTDIR\fP.
.PP
Вызов \fBlink\fP(2) заслуживает отдельного описания. В POSIX.1\-2001 говорится,
что \fBlink\fP(2) должен разыменовывать \fIoldpath\fP, если это символьная
ссылка. Однако в Linux этого не делается (по умолчанию Solaris делается тоже
самое, но в POSIX.1\-2001 определяется как такое поведение можно получить с
помощью специальных параметров компилятора). В POSIX.1\-2008 изменено
описание, которое позволяет реализовывать любое из этих вариантов поведения.
.SS "Команды, не выполняющие обход дерева файлов"
Рассмотрим случай с символьными ссылками, указываемыми в аргументах
командной строки утилит, которые не выполняют обход дерева файлов.
.PP
За исключением, описанным далее, команды переходят по ссылкам, указанным в
аргументах командной строки. Например, если \fIslink\fP — символьная ссылка,
которая указывает на файл с именем \fIafile\fP, то команда \fIcat slink\fP выведет
содержимое файла \fIafile\fP.
.PP
Важно понимать, что это правило учитывается командами, которые не
обязательно выполняют обход дерева файлов; например, команда \fIchown file\fP
следует этому правилу, а команда \fIchown\ \-R file\fP, выполняющая обход
дерева, нет (последняя описана далее).
.PP
Если команде явно указано воздействовать на символьную ссылку, а не
переходить по символьной ссылке, например, требуется, чтобы \fIchown slink\fP
изменила права на файл \fIslink\fP, независимо от того, является ли он
символьной ссылкой или нет, то нужно использовать параметр \fI\-h\fP. В примере
выше \fIchown root slink\fP изменяет права на файл, на который указывает
\fIslink\fP, а \fIchown\ \-h root slink\fP изменяет права на саму ссылку \fIslink\fP.
.PP
Есть несколько исключений из этого правила:
.IP * 2
Команды \fBmv\fP(1) и \fBrm\fP(1) не переходят по символьным ссылкам, указанным в
аргументах, а пытаются переименовать и удалить их (заметим, если символьная
ссылка указывает на файл через относительный путь, то перемещение файла в
другой каталог с большой вероятностью вызовет проблемы, так как путь может
оказаться неправильным).
.IP *
Команда \fBls\fP(1) также является исключением из этого правила. Для
совместимости со старыми системами (когда \fBls\fP(1) не делает обход дерева,
то есть не указан параметр \fI\-R\fP), команда \fBls\fP(1) переходит по символьным
ссылкам, указанным в аргументах, если задан параметр \fI\-H\fP или \fI\-L\fP, или
если не указан параметр \fI\-F\fP, \fI\-d\fP или \fI\-l\fP  (команда \fBls\fP(1) —
единственная команда, у которой параметры \fI\-H\fP и \fI\-L\fP влияют на поведение
даже когда не выполняется обход дерева файлов).
.IP *
.\"
.\"The 4.4BSD system differs from historical 4BSD systems in that the
.\".BR chown (1)
.\"and
.\".BR chgrp (1)
.\"commands follow symbolic links specified on the command line.
Команда \fBfile\fP(1) также является исключением из этого правила. По умолчанию
\fBfile\fP(1) не переходит по символьной ссылке, указанной в аргументе. Команда
\fBfile\fP(1) переходит по символьной ссылке, указанной в аргументе, если
указан параметр \fI\-L\fP.
.SS "Команды, выполняющие обход дерева файлов"
Следующие команды могут или всегда обходят дерево файлов: \fBchgrp\fP(1),
\fBchmod\fP(1), \fBchown\fP(1), \fBcp\fP(1), \fBdu\fP(1), \fBfind\fP(1), \fBls\fP(1),
\fBpax\fP(1), \fBrm\fP(1) и \fBtar\fP(1).
.PP
Важно понимать, что следующие правила применяются как к символьным ссылкам,
обнаруженным при обходе дерева файлов, так и к символьным ссылкам, указанным
в аргументах командной строки.
.PP
\fIПервое правило\fP применяется к символьным ссылкам, которые указывают на
файлы, а не на каталоги. Операции, которые применимы к символьным ссылкам,
выполняются с самими ссылками, но другие ссылки игнорируется.
.PP
Команда \fIrm\ \-r slink каталог\fP удалит \fIslink\fP, а также все символьные
ссылки, обнаруженные при обходе \fIкаталога\fP, так как символьные ссылки могут
быть удалены. Команда \fBrm\fP(1) никогда не удаляет файл, на который указывает
\fIslink\fP.
.PP
\fIВторое правило\fP применяется к символьным ссылкам, которые указывают на
каталоги. По умолчанию такие символьные ссылки никогда не
разыменовываются. Часто об этом говорят как о «физическом» обходе, в
противовес «логическому» обходу (когда выполняется переход по символьным
ссылкам, указывающем на каталог).
.PP
При обходе дерева файлов командами соблюдаются (должны) определённые
соглашения, если это возможно:
.IP * 2
Команду можно заставить перейти по любой символьной ссылке, указанной в
командной строке, независимо от типа файла, на который она ссылаются, указав
параметр \fI\-H\fP (от «half\-logical»). Этот параметр заставляет пространство
имён командной строки выглядеть как логическое пространство имён (заметим,
что команды, которые не всегда делают обход дерева файлов, будут
игнорировать флаг \fI\-H\fP, если также не указан флаг \fI\-R\fP).
.IP
Например, команда \fIchown\ \-HR user slink\fP выполнит обход файловой иерархии
с корнем как у файла, указанном \fIslink\fP. Заметим, что здесь \fI\-H\fP делает не
тоже самое, что и флаг \fI\-h\fP, описанный ранее. При флаге \fI\-H\fP символьные
ссылки, указанные в командной строке, будут разыменовываться и при обходе
файлового дерева и как если бы пользователь указал имя файла, на которое
указывает символьная ссылка.
.IP *
Команду можно заставить перейти по любой символьной ссылке, указанной в
командной строке, а также по всем символьным ссылкам, встреченным при
обходе, независимо от типа файла, на который она ссылается, указав параметр
\fI\-H\fP (от «half\-logical»). Этот параметр заставляет всё пространство имён
выглядеть как логическое пространство имён (заметим, что команды, которые не
всегда делают обход дерева файлов, будут игнорировать флаг \fI\-L\fP, если также
не указан флаг \fI\-R\fP).
.IP
Например, команда \fIchown\ \-LR user slink\fP изменит владельца файла, на
который указывает \fIslink\fP. Если \fIslink\fP указывает на каталог, то \fBchown\fP
обойдёт дерево файлов с корнем в этом каталоге. Также, если символьные
ссылки встречаются в любом файловом дереве, которое обходит \fBchown\fP, то с
ними  будет сделано тоже что и с \fIslink\fP.
.IP *
Команду можно заставить следовать поведению по умолчанию, указав флаг \fI\-P\fP
(от «physical»). Этот флаг предназначен для работы со всем пространством
имён как с физическим пространством имён.
.PP
Команды, которые по умолчанию не выполняют обход дерева файлов, игнорируют
флаги \fI\-H\fP, \fI\-L\fP и \fI\-P\fP, если не указан флаг \fI\-R\fP. Также вы можете
указать параметры \fI\-H\fP, \fI\-L\fP и \fI\-P\fP более одного раза; последний
указанный параметр определяет поведение команды. Это позволяет создавать
псевдонимы команд с некоторым поведением, а затем переопределять это
поведение в командной строке.
.PP
У команд \fBls\fP(1) и \fBrm\fP(1) есть исключения из этих правил:
.IP * 2
Команда \fBrm\fP(1) работает с символьными ссылками, а не с файлами, на который
они ссылаются, и поэтому никогда не переходит по символьной ссылке. Команда
\fBrm\fP(1) не поддерживает параметры \fI\-H\fP, \fI\-L\fP и \fI\-P\fP.
.IP *
Для совместимости со старыми системами работа команды \fBls\fP(1) чуть
отличается. Если не указан параметр \fI\-F\fP, \fI\-d\fP или \fI\-l\fP, то \fBls\fP(1)
переходит по символьной ссылке, указанной в командной строке. Если указан
флаг \fI\-L\fP, то \fBls\fP(1) переходит по всем символьным ссылкам независимо от
их типа и где они встретились — в командной строке или при обходе дерева.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBchgrp\fP(1), \fBchmod\fP(1), \fBfind\fP(1), \fBln\fP(1), \fBls\fP(1), \fBmv\fP(1),
\fBnamei\fP(1), \fBrm\fP(1), \fBlchown\fP(2), \fBlink\fP(2), \fBlstat\fP(2),
\fBreadlink\fP(2), \fBrename\fP(2), \fBsymlink\fP(2), \fBunlink\fP(2), \fButimensat\fP(2),
\fBlutimes\fP(3), \fBpath_resolution\fP(7)
