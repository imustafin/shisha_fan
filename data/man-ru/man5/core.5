.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 2006, 2008 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH CORE 5 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
core \- файла дампа памяти процесса
.SH ОПИСАНИЕ
Для определённых сигналов действием по умолчанию является завершение
процесса и создание \fIдампа памяти процесса\fP \(em дискового файла,
содержащего образ памяти процесса на момент завершения. Этот образ может
быть использован в отладчике (например, \fBgdb\fP(1)) для исследования
состояния программы на момент её завершения. Список сигналов, которые
приводят к созданию дампа памяти процесса, можно найти в \fBsignal\fP(7).
.PP
Процесс может установить свой программный предел ресурса \fBRLIMIT_CORE\fP в
максимальное значение по размеру файла дампа, который будет создан, если
процесс получит сигнал "дампа памяти"; подробней смотрите в \fBgetrlimit\fP(2).
.PP
Есть несколько обстоятельств, при которых файл дампа памяти не создаётся:
.IP * 3
У процесса нет прав на запись файла дампа (по умолчанию файл дампа
называется \fIcore\fP или \fIcore.pid\fP, где \fIpid\fP — ID процесса из которого
делается дамп, и создаётся в текущем рабочем каталоге. Подробней об
именовании смотрите далее). Запись файла дампа завершается ошибкой, если
каталог, в котором он создаётся, недоступен для записи, или если файл с
таким же именем уже существует и недоступен для записи или это необычный
файл (например, это каталог или символьная ссылка).
.IP *
Существует файл (обычный, доступный на запись) с именем, которое будет
использовано для дампа памяти, но есть более одной жёсткой ссылки на этот
файл.
.IP *
Файловая система, где должен быть создан файл дампа, переполнена,
закончились иноды, она смонтирована только для чтения, достигнут предел
пользовательской квоты.
.IP *
Каталог, в котором должен быть создан файл дампа, не существует.
.IP *
Пределы ресурсов \fBRLIMIT_CORE\fP (размер файла дампа) или \fBRLIMIT_FSIZE\fP
(размер файла) для процесса установлены в ноль; смотрите \fBgetrlimit\fP(2) и
документацию на команду оболочки \fIulimit\fP (\fIlimit\fP в \fBcsh\fP(1)).
.IP *
Исполняемый процессом файл недоступен на чтение.
.IP *
.\" FIXME . Perhaps relocate discussion of /proc/sys/fs/suid_dumpable
.\" and PR_SET_DUMPABLE to this page?
Процесс выполняет программу с установленными битом set\-user\-ID
(set\-group\-ID), который принадлежит пользователю (группе) не совпадающей с
ID реального пользователя (группы) процесса или процесс выполняется
программу, имеющую файловые мандаты (смотрите \fBcapabilities\fP(7)). Однако
посмотрите описание операции \fBprctl\fP(2) \fBPR_SET_DUMPABLE\fP, и описание
файла \fI/proc/sys/fs/suid_dumpable\fP в \fBproc\fP(5).
.IP *
Файл \fI/proc/sys/kernel/core_pattern\fP пуст и
\fI/proc/sys/kernel/core_uses_pid\fP содержит 0 (эти файлы описаны
ниже). Заметим, что если \fI/proc/sys/kernel/core_pattern\fP пуст и
\fI/proc/sys/kernel/core_uses_pid\fP содержит 1, то файлы дампа будет иметь
имена в виде \fI.pid\fP, а такие файлы не показываются при использовании
\fBls\fP(1) с параметром \fI\-a\fP.
.IP *
.\" commit 046d662f481830e652ac34cd112249adde16452a
(начиная с Linux 3.7) Ядро настроено без параметра \fBCONFIG_COREDUMP\fP.
.PP
Также, дамп память может не содержать часть адресного пространства процесса,
если в \fBmadvise\fP(2) указан флаг \fBMADV_DONTDUMP\fP.
.PP
.\"
В системах, использующих \fBsystemd\fP(1) в качестве \fIinit\fP, файлы дампа могут
помещаться в каталог, задаваемый \fBsystemd\fP(1). Подробности смотрите далее.
.SS "Именование файлов дампов памяти"
По умолчанию, файлу с дампом памяти присваивается имя \fIcore\fP, но с помощью
файла \fI/proc/sys/kernel/core_pattern\fP (начиная с Linux 2.6 и 2.4.21) можно
задать шаблон, который будет использован для именования файлов дампов
памяти. Шаблон может содержать описатели %, которые заменяются на следующие
значения при создании файла дампа:
.PP
.RS 4
.PD 0
.TP  4
%%
одиночный символ %
.TP 
%c
программный предел размера файла дампа рухнувшего процесса (начиная с Linux
2.6.24)
.TP 
%d
.\" Added in git commit 12a2b4b2241e318b4f6df31228e4272d2c2968a1
режим дампа — тоже, как значение возвращаемое \fBprctl\fP(2) с
\fBPR_GET_DUMPABLE\fP (начиная с Linux 3.7)
.TP 
%e
имя исполняемого файла (без пути)
.TP 
%E
путь к исполняемому файлу, в котором символы косой черты (\(aq/\(aq)
заменена на восклицательные знаки (\(aq!\(aq) (начиная с Linux 3.0).
.TP 
%g
(число) реальный GID процесса, с которого делается дамп
.TP 
%h
имя узла (как \fInodename\fP, возвращаемое \fBuname\fP(2))
.TP 
%i
.\" commit b03023ecbdb76c1dec86b41ed80b123c22783220
TID нити, из\-за которой возник дамп, по отношению к пространству имён PID, в
котором располагается нить (начиная с Linux 3.18)
.TP 
%I
.\" commit b03023ecbdb76c1dec86b41ed80b123c22783220
TID нити, из\-за которой возник дамп, по отношению к начальному пространству
имён PID (начиная с Linux 3.18)
.TP 
%p
PID процесса, с которого делается дамп, так как он видится в пространстве
имён PID, котором расположен процесс
.TP 
%P
.\" Added in git commit 65aafb1e7484b7434a0c1d4c593191ebe5776a2f
initial PID процесса, с которого делается дамп, так как он видится в
первоначальном пространстве имён PID, котором расположен процесс (начиная с
Linux 3.12)
.TP 
%s
номер сигнала, вызвавшего создание дампа
.TP 
%t
время дампа, выражается в секундах с начала эпохи, 1970\-01\-01 00:00:00 +0000
(UTC)
.TP 
%u
(число) реальный UID процесса, с которого делается дамп
.PD
.RE
.PP
Одиночный  в конце шаблона отбрасывается от имени файла дампа вместе с
символом после %, отличным от перечисленных ранее. Все остальные символы в
шаблоне вставляются в имя файла дампа как есть. Шаблон может содержать
символы \(aq/\(aq, которые интерпретируются как разделители для имён
каталогов. Максимальный размер получаемого имени файла дампа равен 128
байтам (64 байта для ядер до версии 2.6.19). Значение по умолчанию в этом
файле равно "core". Для обратной совместимости, если
\fI/proc/sys/kernel/core_pattern\fP не содержит \fI%p\fP и значение в
\fI/proc/sys/kernel/core_uses_pid\fP (смотрите далее) не равно нулю, то к имени
файла дампа будет добавлен .PID.
.PP
Пути рассматриваются согласно активным настройкам для падающего
процесса. Имеется в виду пространство имён монтирования падающего процесса
(смотрите \fBmount_namespaces\fP(7)), его текущий рабочий каталог (находимый с
помощью \fBgetcwd\fP(2)) и его корневой каталог (смотрите \fBchroot\fP(2)).
.PP
Начиная с версии 2.4, Linux также предоставляет более примитивный метод
управления именем файла дампа памяти. Если файл
\fI/proc/sys/kernel/core_uses_pid\fP содержит значение 0, то файл дампа памяти
просто называется \fIcore\fP. Если в этом файле содержится ненулевое значение,
то к имени файла дампа добавится ID процесса (в виде \fIcore.PID\fP).
.PP
.\" 9520628e8ceb69fa9a4aee6b57f22675d9e1b709
Начиная с Linux 3.6, если значение в \fI/proc/sys/fs/suid_dumpable\fP равно 2
(«suidsafe»), то шаблон должен быть или абсолютным путём (начинаться с
символа \(aq/\(aq), или каналом, как описано далее.
.SS "Передача дампов памяти в программу через канал"
Начиная с версии 2.6.19, Linux поддерживает альтернативный синтаксис файла
\fI/proc/sys/kernel/core_pattern\fP. Если первым символом в этом файле будет
символ канала (\fB|\fP), то оставшаяся строка воспринимается как командная
строка пользовательской программы (или сценария), которую нужно запустить.
.PP
.\" commit 315c69261dd3fa12dbc830d4fa00d1fad98d3b03
Начиная с ядра 5.3.0 шаблон канала разделяется пробелами на аргументы \fIдо\fP
до раскрытия параметров шаблона. В старых ядрах параметры шаблона
расширялись перед разделением пробелами списка аргументов. Это означает, что
в старых ядрах имена исполняемых файлов добавляемые параметрами шаблона
\fI%e\fP и \fI%E\fP, могли разделиться на несколько аргументов. Из\-за этого
обработчику дампа ядра (core dump handler) требовалось помещать имена
исполняемых файлов в последний аргумент и проверять, что склеены все части
имён исполняемых файлов, в которых есть пробелы. Имена исполняемых файлов с
несколькими пробелами неправильно отображаются в старых ядрах, из\-за чего
обработчику дампа памяти требуется использовать механизмы поиска имени
исполняемого файла.
.PP
Вместо записи файла на диск дамп памяти передаётся в стандартный ввод
программы. Отметим следующие моменты:
.IP * 3
Программа должна быть задана абсолютным именем файла (или путём относительно
корневого каталога, \fI/\fP), и имя должна сразу следовать за символом «|».
.IP *
В аргументах командной строки могут быть описатели %, перечисленные
ранее. Например, чтобы передать PID процесса, для которого делается дамп,
укажите в аргументе \fI%p\fP.
.IP *
Создаваемый процесс для запуска программы будет выполняться с правами группы
и пользователя \fIroot\fP.
.IP *
При выполнении с правами \fIroot\fP не делается никаких исключений по обходу
безопасности. А именно, LSM (например, SELinux) работает как обычно и может
не дать обработчику доступ к информации упавшего процесса через
\fI/proc/[pid]\fP.
.IP *
Путь к программе рассматривается с учётом начального пространства имён
монтирования, так как она всегда выполняется в нём. На это не влияют
настройки (например, корневой каталог, пространство имён монтирования,
текущий рабочий каталог) падающего процесса.
.IP *
Процесс выполняется в начальных пространствах имён (PID, монтирования,
пользовательском и т. д.), а не в пространствах имён падающего процесса. Он
может использовать описатели, например \fI%P\fP, для нахождения правильного
каталога \fI/proc/[pid]\fP и, если нужно, протестировать/войти в пространства
имён падающего процесса.
.IP *
Процесс запускается с корневым каталогом, равным своему текущему рабочему
каталогу. Если нужно, то возможно изменить его на рабочий каталог
выполняющего дамп процесса воспользовавшись значением описателя \fI%P\fP для
изменения расположения выполняющего дамп процесса через \fI/proc/[pid]/cwd\fP.
.IP *
Программе можно передать аргументы командной строки (начиная с Linux
2.6.24), отделяя их пробелами (максимальный размер строки 128 байт).
.IP *
.\"
Ограничение \fBRLIMIT_CORE\fP не применяется к файлам дампа, которые передаются
по каналу в программу через этот механизм.
.SS /proc/sys/kernel/core_pipe_limit
При отправке дампов памяти через канал в программу пользовательского
пространства может быть полезным для собирающей программы получать данные о
падающем процессе из каталога процесса \fI/proc/[pid]\fP. Для безопасного
выполнения ядро должно дождаться завершения собирающей программы, и не
удалять файлы падающего процесса \fI/proc/[pid]\fP. Это, в свою очередь,
создаёт возможность того, что неправильно работающая собирающая программа
может заблокировать очистку упавшего процесса просто никогда не завершаясь.
.PP
.\" commit a293980c2e261bd5b0d2a77340dd04f684caff58
Начиная с Linux 2.6.32, для защиты от этого можно использовать файл
\fI/proc/sys/kernel/core_pipe_limit\fP. Значением файла задаётся количество
одновременно падающих процессов, которые можно передавать через канал
программе из пространства пользователя параллельно. Если это значение
превышено, то для выходящих за это ограничение падающих процессов ядро пишет
сообщение в лог, а дампы памяти не передаёт.
.PP
.\"
Значение файла 0 является специальным. Оно означает, что параллельно можно
пересылать бесконечное количество процессов, но ожидание при это не
происходит (т. е., собирающей программе не гарантируется доступ к
\fI/proc/<crashing\-PID>\fP). Значение по умолчанию для файла равно 0.
.SS "Управление отображениями, записываемыми в дамп памяти"
Начиная с версии 2.6.23, в Linux появился файл
\fI/proc/[pid]/coredump_filter\fP, который определяет какие сегменты памяти
записываются в файл дампа памяти при отклике на событие создания дампа
памяти процесса с соответствующим ID процесса.
.PP
Значение в файле является битовой маской типов отображений памяти
(см. \fBmmap\fP(2)). Если бит в маске установлен, то выполняется дамп
отображения памяти соответствующего типа; иначе дамп не выполняется. Биты в
этом файле имеют следующее значение:
.PP
.PD 0
.RS 4
.TP 
бит 0
Выполнять дамп анонимных частных отображений.
.TP 
бит 1
Выполнять дамп анонимных общих отображений.
.TP 
бит 2
Выполнять дамп частных отображений из виртуальной памяти (file\-backed).
.TP 
бит 3
.\" file-backed shared mappings of course also update the underlying
.\" mapped file.
Выполнять дамп общих отображений из виртуальной памяти (file\-backed).
.TP 
бит 4 (начиная с Linux 2.6.24)
Выполнять дамп заголовков ELF.
.TP 
бит 5 (начиная с Linux 2.6.28)
Выполнять дамп частных огромных страниц.
.TP 
бит 6 (начиная с Linux 2.6.28)
Выполнять дамп общих огромных страниц.
.TP 
бит 7 (начиная с Linux 4.4)
.\" commit ab27a8d04b32b6ee8c30c14c4afd1058e8addc82
Выполнять дамп частных страниц DAX.
.TP 
бит 8 (начиная с Linux 4.4)
.\" commit ab27a8d04b32b6ee8c30c14c4afd1058e8addc82
Выполнять дамп общих страниц DAX.
.RE
.PD
.PP
По умолчанию, установлены следующие биты: 0, 1, 4 (если включён параметр
настройки ядра \fBCONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS\fP) и 5. Данное значение
может быть изменено при запуске системы через параметр загрузки
\fIcoredump_filter\fP.
.PP
Значения этого файла отображается в шестнадцатеричной системе счисления (то
есть значение по умолчанию выглядит как 33).
.PP
Для страниц ввода\-вывода, отображённых в память, таких как фрейм\-буфер, дамп
никогда не выполняется, а виртуальные страницы DSO (\fBvdso\fP(7)) попадают в
дамп всегда, независимо от значения \fIcoredump_filter\fP.
.PP
Дочерний процесс, созданный \fBfork\fP(2), наследует значение
\fIcoredump_filter\fP родителя; значение \fIcoredump_filter\fP сохраняется и при
\fBexecve\fP(2).
.PP
Полезно указывать значение \fIcoredump_filter\fP в родительской оболочке до
запуска программы, например:
.PP
.in +4n
.EX
$\fB echo 0x7 > /proc/self/coredump_filter\fP
$\fB ./какая\-то_программа\fP
.EE
.in
.PP
.\"
Этот файл есть в системе только, если ядро было собрано с параметром
настройки \fBCONFIG_ELF_CORE\fP.
.SS "Файлы дампа и systemd"
В системах с \fBsystemd\fP(1) в качестве \fIinit\fP файлы дампа могут помещаться в
каталог, определяемый \fBsystemd\fP(1). Для этого \fBsystemd\fP(1) использует
свойство \fIcore_pattern\fP, которое позволяет передавать дампы программе по
каналу. Это происходит, если файлы дампа передаются по каналу в программу
\fBsystemd\-coredump\fP(8):
.PP
.in +4n
.EX
$ \fBcat /proc/sys/kernel/core_pattern\fP
|/usr/lib/systemd/systemd\-coredump %P %u %g %s %t %c %e
.EE
.in
.PP
В этом случае файлы дампа будут помещаться согласно настройкам
\fBsystemd\-coredump\fP(8), обычно в виде сжатых \fBlz4\fP(1) файлов в каталог
\fI/var/lib/systemd/coredump/\fP. Список файлов дампа, записанных
\fBsystemd\-coredump\fP(8), можно получить с помощью \fBcoredumpctl\fP(1):
.PP
.in +2n
.EX
$ \fBcoredumpctl list | tail \-5\fP
Wed 2017\-10\-11 22:25:30 CEST  2748 1000 1000 3 present  /usr/bin/sleep
Thu 2017\-10\-12 06:29:10 CEST  2716 1000 1000 3 present  /usr/bin/sleep
Thu 2017\-10\-12 06:30:50 CEST  2767 1000 1000 3 present  /usr/bin/sleep
Thu 2017\-10\-12 06:37:40 CEST  2918 1000 1000 3 present  /usr/bin/cat
Thu 2017\-10\-12 08:13:07 CEST  2955 1000 1000 3 present  /usr/bin/cat
.EE
.in
.PP
Информация, показываемая для каждого дампа включает дату и время дампа, PID,
UID и GID процесса дампа, номер сигнала, вызвавшего дамп, и путь к
исполняемому файлу, который был запущен процессом дампа. Различные параметры
\fBcoredumpctl\fP(1) позволяют выбрать файл coredump, который нужно записать из
расположения \fBsystemd\fP(1), в заданный файл. Например, чтобы извлечь дамп
для PID 2955, показанного выше, в файл с именем \fIcore\fP в текущий каталог,
сделайте следующее:
.PP
.in +4n
.EX
$ \fBcoredumpctl dump 2955 \-o core\fP
.EE
.in
.PP
Подробную информацию смотрите в справочной странице \fBcoredumpctl\fP(1).
.PP
Для отключения в \fBsystemd\fP(1) механизма архивирования дампом и
восстановления чего\-то более обычного поведению Linux, измените работу
\fBsystemd\fP(1) следующим образом:
.PP
.in +2n
.EX
# echo "kernel.core_pattern=core.%p" > /etc/sysctl.d/50\-coredump.conf
# /lib/systemd/systemd\-sysctl
.EE
.in
.PP
.\"
.SH ЗАМЕЧАНИЯ
Команду \fBgdb\fP(1) \fIgcore\fP можно использовать для получения дампа памяти
работающего процесса.
.PP
.\" Changed with commit 6409324b385f3f63a03645b4422e3be67348d922
.\" Always including the PID in the name of the core file made
.\" sense for LinuxThreads, where each thread had a unique PID,
.\" but doesn't seem to serve any purpose with NPTL, where all the
.\" threads in a process share the same PID (as POSIX.1 requires).
.\" Probably the behavior is maintained so that applications using
.\" LinuxThreads continue appending the PID (the kernel has no easy
.\" way of telling which threading implementation the user-space
.\" application is using). -- mtk, April 2006
В версии Linux до 26.27 включительно, если для многонитевого процесса (или,
точнее, процесса, который делит свою памяти с другим процессом, созданным с
флагом \fBCLONE_VM\fP через \fBclone\fP(2)) выполняется дамп памяти, то ID
процесса всегда добавляется к имени файла дампа, если ID процесса уже не
включён в это имя с помощью \fI%p\fP в \fI/proc/sys/kernel/core_pattern\fP (это,
главным образом, полезно когда применяется устаревшая реализация
LinuxThreads, где каждая нить процесса имеет свой PID).
.SH ПРИМЕР
Эта программа может использоваться для демонстрации синтаксиса канала в
файле \fI/proc/sys/kernel/core_pattern\fP. Следующий сеанс оболочки
демонстрирует использование данной программы (при компиляции был создан
исполняемый файл с именем \fIcore_pattern_pipe_test\fP):
.PP
.in +4n
.EX
$\fB cc \-o core_pattern_pipe_test core_pattern_pipe_test.c\fP
$\fB su\fP
Password:
#\fB echo "|$PWD/core_pattern_pipe_test %p UID=%u GID=%g sig=%s" > \e\fP
\fB/proc/sys/kernel/core_pattern\fP
#\fB exit\fP
$\fB sleep 100\fP
\fB^\e\fP                     # type control\-backslash
Quit (core dumped)
$\fB cat core.info\fP
argc=5
argc[0]=</home/mtk/core_pattern_pipe_test>
argc[1]=<20575>
argc[2]=<UID=1000>
argc[3]=<GID=100>
argc[4]=<sig=3>
Total bytes in core dump: 282624
.EE
.in
.SS "Исходный код программы"
\&
.EX
/* core_pattern_pipe_test.c */

#define _GNU_SOURCE
#include <sys/stat.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int tot, j;
    ssize_t nread;
    char buf[BUF_SIZE];
    FILE *fp;
    char cwd[PATH_MAX];

    /* Изменяем наш текущий рабочий каталог на тот, что у
       упавшего процесса */

    snprintf(cwd, PATH_MAX, "/proc/%s/cwd", argv[1]);
    chdir(cwd);

    /* Записываем вывод в файл "core.info" в этом каталоге */

    fp = fopen("core.info", "w+");
    if (fp == NULL)
        exit(EXIT_FAILURE);

    /* Показываем аргументы командной строки, переданные программе
       core_pattern */

    fprintf(fp, "argc=%d\en", argc);
    for (j = 0; j < argc; j++)
        fprintf(fp, "argc[%d]=<%s>\en", j, argv[j]);

    /* Подсчитываем байты стандартного ввода (дампа памяти) */

    tot = 0;
    while ((nread = read(STDIN_FILENO, buf, BUF_SIZE)) > 0)
        tot += nread;
    fprintf(fp, "Total bytes in core dump: %d\en", tot);

    fclose(fp);
    exit(EXIT_SUCCESS);
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBbash\fP(1), \fBcoredumpctl\fP(1), \fBgdb\fP(1), \fBgetrlimit\fP(2), \fBmmap\fP(2),
\fBprctl\fP(2), \fBsigaction\fP(2), \fBelf\fP(5), \fBproc\fP(5), \fBpthreads\fP(7),
\fBsignal\fP(7), \fBsystemd\-coredump\fP(8)
