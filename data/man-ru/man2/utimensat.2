.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (C) 2008, Linux Foundation, written by Michael Kerrisk
.\" <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH UTIMENSAT 2 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
utimensat, futimens \- изменение временных меток файла с наносекундной
точностью
.SH ОБЗОР
.nf
\fB#include <fcntl.h> /* определения констант AT_* */\fP
\fB#include <sys/stat.h>\fP
.PP
\fBint utimensat(int \fP\fIdirfd\fP\fB, const char *\fP\fIpathname\fP\fB,\fP
\fB              const struct timespec \fP\fItimes\fP\fB[2], int \fP\fIflags\fP\fB);\fP
.PP
\fBint futimens(int \fP\fIfd\fP\fB, const struct timespec \fP\fItimes\fP\fB[2]);\fP
.fi
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
.ad l
.PD 0
\fButimensat\fP():
.RS 4
.TP  4
Начиная с glibc 2.10:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
До glibc 2.10:
_ATFILE_SOURCE
.RE
.PP
\fBfutimens\fP():
.RS 4
.TP 
Начиная с glibc 2.10:
_POSIX_C_SOURCE\ >=\ 200809L
.TP 
До glibc 2.10:
_GNU_SOURCE
.RE
.PD
.ad
.SH ОПИСАНИЕ
Вызовы \fButimensat\fP() и \fBfutimens\fP() обновляют временные метки файла с
наносекундной точностью. Этим они отличаются от \fButime\fP(2) и \fButimes\fP(2),
которые имеют секундную и микросекундную точность, соответственно.
.PP
В вызове \fButimensat\fP() файл задаётся в \fIpathname\fP по имени. В вызове
\fBfutimens\fP() файл указывается в виде открытого файлового дескриптора в
\fIfd\fP.
.PP
У обоих вызовов новые временные метки файла указываются в массиве \fItimes\fP:
в \fItimes\fP[0] задаётся новое «время последнего доступа» (\fIatime\fP); в
\fItimes\fP[1] задаётся новое «время последнего изменения» (\fImtime\fP). В каждом
элементе \fItimes\fP указывается время в виде количества секунд и наносекунд,
прошедших с начала эпохи (1970\-01\-01 00:00:00 +0000 (UTC)). Эта информация
представляет собой структуру следующего формата:
.PP
.in +4n
.EX
struct timespec {
    time_t tv_sec;        /* секунды */
    long   tv_nsec;       /* наносекунды */
};
.EE
.in
.PP
Обновлённые временные метки файла устанавливаются в самое большое значение,
поддерживаемое файловой системой, но не больше чем указанное время.
.PP
.\" 2.6.22 was broken: it is not ignored
Если в поле \fItv_nsec\fP одной из структур \fItimespec\fP указано специальное
значение \fBUTIME_NOW\fP, то соответствующая временная метка файла
устанавливается в значение текущего времени. Если в поле \fItv_nsec\fP одной из
структур \fItimespec\fP указано специальное значение \fBUTIME_OMIT\fP, то
соответствующая временная метка файла не изменяется. В обоих случаях
значение поля \fItv_sec\fP игнорируется.
.PP
.\"
Если значение \fItimes\fP равно NULL, то значение обеих временных меток
становится равным текущему времени.
.SS "Права доступа"
Чтобы установить временные метки файла равными текущему времени (т.е.,
значение \fItimes\fP равно NULL, или оба значения поля \fItv_nsec\fP равно
\fBUTIME_NOW\fP) требуется одно из:
.IP 1. 3
.\" 2.6.22 was broken here -- for futimens() the check is
.\" based on whether or not the file descriptor is writable,
.\" not on whether the caller's effective UID has write
.\" permission for the file referred to by the descriptor.
вызывающий должен иметь право на запись в файл;
.IP 2.
эффективный пользовательский идентификатор вызывающего должен совпадать с
идентификатором владельца файла;
.IP 3.
вызывающий должен иметь соответствующие права.
.PP
.\" 2.6.22 was broken here:
.\" both must be something other than *either* UTIME_OMIT *or* UTIME_NOW.
Чтобы установить временные метки файла равными не текущему времени (т. е.,
значение \fItimes\fP не равно NULL, или оба значения поля \fItv_nsec\fP не равны
\fBUTIME_NOW\fP или \fBUTIME_OMIT\fP) требуется выполнение условия 2 или 3.
.PP
.\"
.\"
Если в обоих значениях поле \fItv_nsec\fP равно \fBUTIME_OMIT\fP, то проверки
владения файлом и права доступа к нему не выполняются, и временные метки
файла не изменяются, но всё равно могут проверяться другие условия
возникновения ошибок.
.SS "Особенности utimensat()"
Если в \fIpathname\fP указано относительное значение имени, то по умолчанию оно
отсчитывается от каталога, на который ссылается открытый файловый
дескриптор, \fIdirfd\fP (а не от текущего рабочего каталога вызывающего
процесса, как это делается в \fButimes\fP(2) для относительных имён). В
\fBopenat\fP(2) объяснено почему это может быть полезно.
.PP
Если в \fIpathname\fP задан относительный путь и \fIdirfd\fP равно специальному
значению \fBAT_FDCWD\fP, то \fIpathname\fP рассматривается относительно текущего
рабочего каталога вызывающего процесса (как \fButimes\fP(2)).
.PP
Если в \fIpathname\fP задан абсолютный путь, то \fIdirfd\fP игнорируется.
.PP
Значение поля \fIflags\fP представляет собой битовую маску и может равняться 0
или содержать следующую константу (определена в \fI<fcntl.h>\fP):
.TP 
\fBAT_SYMLINK_NOFOLLOW\fP
Если \fIpathname\fP указывает на символьную ссылку, то обновляются временные
метки ссылки, а не файла, на который она ссылается.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fButimensat\fP() и \fBfutimens\fP() возвращается 0. При
ошибке возвращается \-1, а в \fIerrno\fP содержится код ошибки.
.SH ОШИБКИ
.TP 
\fBEACCES\fP
Значение \fItimes\fP равно NULL, или в обоих значениях поле \fItv_nsec\fP равно
\fBUTIME_NOW\fP или:
.RS
.IP * 3
.\" But Linux 2.6.22 was broken here.
.\" Traditionally, utime()/utimes() gives the error EACCES for the case
.\" where the timestamp pointer argument is NULL (i.e., set both timestamps
.\" to the current time), and the file is owned by a user other than the
.\" effective UID of the caller, and the file is not writable by the
.\" effective UID of the program.  utimensat() also gives this error in the
.\" same case.  However, in the same circumstances, when utimensat() is
.\" given a 'times' array in which both tv_nsec fields are UTIME_NOW, which
.\" provides equivalent functionality to specifying 'times' as NULL, the
.\" call succeeds.  It should fail with the error EACCES in this case.
.\"
.\" POSIX.1-2008 has the following:
.\" .TP
.\" .B EACCES
.\" .RB ( utimensat ())
.\" .I fd
.\" was not opened with
.\" .B O_SEARCH
.\" and the permissions of the directory to which
.\" .I fd
.\" refers do not allow searches.
эффективный пользовательский идентификатор вызывающего процесса не совпадает
с идентификатором владельца файла, вызывающий не имеет права на запись в
файл, и у вызывающего нет привилегий (Linux: не имеет мандата \fBCAP_FOWNER\fP
или \fBCAP_DAC_OVERRIDE\fP);
.IP *
.\" EXT2_IMMUTABLE_FL and similar flags for other filesystems.
файл помечен как неизменяемый (immutable) (см. \fBchattr\fP(1)).
.RE
.TP 
\fBEBADF\fP
(\fBfutimens\fP()) Значение \fIfd\fP не является правильным файловым дескриптором.
.TP 
\fBEBADF\fP
(\fButimensat\fP()) В \fIpathname\fP содержится относительный путь, но значение
\fIdirfd\fP не равно \fBAT_FDCWD\fP и не является правильным файловым
дескриптором.
.TP 
\fBEFAULT\fP
Значение \fItimes\fP указывает на некорректный адрес; или \fIdirfd\fP равно
\fBAT_FDCWD\fP и \fIpathname\fP равно NULL или содержит некорректный адрес.
.TP 
\fBEINVAL\fP
Некорректное значение \fIflags\fP.
.TP 
\fBEINVAL\fP
Некорректное значение в одном из полей \fItv_nsec\fP (значение вне диапазона от
0 до 999999999 и не равно \fBUTIME_NOW\fP или \fBUTIME_OMIT\fP) или некорректное
значение в одном из полей \fItv_sec\fP.
.TP 
\fBEINVAL\fP
.\" SUSv4 does not specify this error.
Значение \fIpathname\fP равно NULL, \fIdirfd\fP не равно \fBAT_FDCWD\fP и \fIflags\fP
содержит \fBAT_SYMLINK_NOFOLLOW\fP.
.TP 
\fBELOOP\fP
(\fButimensat\fP()) Во время определения \fIpathname\fP встретилось слишком много
символьных ссылок.
.TP 
\fBENAMETOOLONG\fP
(\fButimensat\fP()) Слишком длинное значение аргумента \fIpathname\fP.
.TP 
\fBENOENT\fP
(\fButimensat\fP()) Компонент пути \fIpathname\fP не ссылается на существующий
каталог или файл, или в \fIpathname\fP указана пустая строка.
.TP 
\fBENOTDIR\fP
(\fButimensat\fP()) В \fIpathname\fP содержится относительный путь, но значение
\fIdirfd\fP не равно \fBAT_FDCWD\fP или не является файловым дескриптором,
ссылающимся на каталог; или один из компонентов \fIpathname\fP не является
каталогом.
.TP 
\fBEPERM\fP
Вызывающий пытается изменить одну или обе временные метки на значение,
отличное от текущего времени, или изменить одну из временных меток на
текущее время, а другую оставить неизменной (т. е., значение \fItimes\fP не
равно NULL, у обоих значений поле \fItv_nsec\fP не равно \fBUTIME_NOW\fP, и у
обоих значений поле \fItv_nsec\fP не равно \fBUTIME_OMIT\fP) и:
.RS
.IP * 3
эффективный пользовательский идентификатор не совпадает с идентификатором
владельца файла, а вызывающий не имеет привилегий (Linux: не имеет мандата
\fBCAP_FOWNER\fP);
.IP *
.\" Linux 2.6.22 was broken here:
.\" it was not consistent with the old utimes() implementation,
.\" since the case when both tv_nsec fields are UTIME_NOW, was not
.\" treated like the (times == NULL) case.
.\" EXT2_IMMUTABLE_FL EXT_APPPEND_FL and similar flags for
.\" other filesystems.
.\"
.\" Why the inconsistency (which is described under NOTES) between
.\" EACCES and EPERM, where only EPERM tests for append-only.
.\" (This was also so for the older utimes() implementation.)
файл помечен как только для добавления или как неизменяемый
(см. \fBchattr\fP(1)).
.RE
.TP 
\fBEROFS\fP
Файл расположен в файловой системе, доступной только для чтения.
.TP 
\fBESRCH\fP
(\fButimensat\fP()) В одном из каталогов префикса \fIpathname\fP не разрешён
поиск.
.SH ВЕРСИИ
Вызов \fButimensat\fP() был добавлен в ядро Linux версии 2.6.22; поддержка в
glibc доступна с версии 2.6.
.PP
Поддержка \fBfutimens\fP() появилась в glibc 2.6.
.SH АТРИБУТЫ
Описание терминов данного раздела смотрите в \fBattributes\fP(7).
.TS
allbox;
lbw23 lb lb
l l l.
Интерфейс	Атрибут	Значение
T{
\fButimensat\fP(),
\fBfutimens\fP()
T}	Безвредность в нитях	MT\-Safe
.TE
.sp 1
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Вызовы \fBfutimens\fP() и \fButimensat\fP() определены в POSIX.1\-2008.
.SH ЗАМЕЧАНИЯ
Вызов \fButimensat\fP() заменяет устаревший \fBfutimesat\fP(2).
.PP
В Linux, временные метки нельзя изменять у файлов, помеченных как
неизменяемые (immutable), а у файлов, помеченных как только для добавления,
можно изменить метку только на значение текущего времени (это соответствует
сложившемуся исторически поведению в Linux вызовов \fButime\fP(2) и
\fButimes\fP(2)).
.PP
Если оба поля \fItv_nsec\fP равны \fBUTIME_OMIT\fP, то вызов \fButimensat\fP()
реализации Linux завершается без ошибки, даже, если файл, на который
ссылается \fIdirfd\fP и \fIpathname\fP, не существует.
.SS "Отличия между библиотекой C и ABI ядра"
В Linux, \fBfutimens\fP() представляет собой библиотечную функцию на основе
системного вызова \fButimensat\fP(). Для этого в Linux\-версии системного вызова
\fButimensat\fP() реализовано нестандартное свойство: если значение \fIpathname\fP
равно NULL, то вызов изменяет временные метки файла на который ссылается
файловый дескриптор \fIdirfd\fP (который может указывать на файл любого
типа). С помощью этого свойства вызов \fIfutimens(fd,\ times)\fP реализован
как:
.PP
.in +4n
.EX
utimensat(fd, NULL, times, 0);
.EE
.in
.PP
Однако заметим, что обёрточная функция glibc для \fButimensat\fP() не позволяет
передачу NULL в качестве значения \fIpathname\fP — в этом случае возвращается
ошибка \fIEINVAL\fP.
.SH ДЕФЕКТЫ
В ядрах до версии 2.6.26 в \fButimensat\fP() и \fBfutimens\fP() есть несколько
дефектов. Эти дефекты приводят к несоответствию с черновиком спецификации
POSIX.1 или к рассогласованию со старым поведением в Linux.
.IP * 3
В POSIX.1 определено, что если в одном из значений времени поле \fItv_nsec\fP
содержит значение \fBUTIME_NOW\fP или \fBUTIME_OMIT\fP, то значение
соответствующего поля \fItv_sec\fP должно игнорироваться. Вместо этого
требуется, чтобы значение поля \fItv_sec\fP равнялось 0 (иначе выдаётся ошибка
\fBEINVAL\fP).
.IP *
.\" Below, the long description of the errors from the previous bullet
.\" point (abridged because it's too much detail for a man page).
.\" .IP *
.\" If one of the
.\" .I tv_nsec
.\" fields is
.\" .BR UTIME_OMIT
.\" and the other is
.\" .BR UTIME_NOW ,
.\" then the error
.\" .B EPERM
.\" should occur if the process's effective user ID does not match
.\" the file owner and the process is not privileged.
.\" Instead, the call successfully changes one of the timestamps.
.\" .IP *
.\" If file is not writable by the effective user ID of the process and
.\" the process's effective user ID does not match the file owner and
.\" the process is not privileged,
.\" and
.\" .I times
.\" is NULL, then the error
.\" .B EACCES
.\" results.
.\" This error should also occur if
.\" .I times
.\" points to an array of structures in which both
.\" .I tv_nsec
.\" fields are
.\" .BR UTIME_NOW .
.\" Instead the call succeeds.
.\" .IP *
.\" If a file is marked as append-only (see
.\" .BR chattr (1)),
.\" then Linux traditionally
.\" (i.e.,
.\" .BR utime (2),
.\" .BR utimes (2)),
.\" permits a NULL
.\" .I times
.\" argument to be used in order to update both timestamps to the current time.
.\" For consistency,
.\" .BR utimensat ()
.\" and
.\" .BR futimens ()
.\" should also produce the same result when given a
.\" .I times
.\" argument that points to an array of structures in which both
.\" .I tv_nsec
.\" fields are
.\" .BR UTIME_NOW .
.\" Instead, the call fails with the error
.\" .BR EPERM .
.\" .IP *
.\" If a file is marked as immutable (see
.\" .BR chattr (1)),
.\" then Linux traditionally
.\" (i.e.,
.\" .BR utime (2),
.\" .BR utimes (2)),
.\" gives an
.\" .B EACCES
.\" error if
.\" .I times
.\" is NULL.
.\" For consistency,
.\" .BR utimensat ()
.\" and
.\" .BR futimens ()
.\" should also produce the same result when given a
.\" .I times
.\" that points to an array of structures in which both
.\" .I tv_nsec
.\" fields are
.\" .BR UTIME_NOW .
.\" Instead, the call fails with the error
.\" .BR EPERM .
Различные дефекты возникают при рассмотрении имеющихся прав и значений:
случай, когда у обоих значений поле \fItv_nsec\fP равно \fBUTIME_NOW\fP, не всегда
рассматривается равным указанию в \fItimes\fP значения NULL, и случай, когда
одно значение \fItv_nsec\fP равно \fBUTIME_NOW\fP, а другое — \fBUTIME_OMIT\fP, не
рассматривается равным указанию в \fItimes\fP указателя на массив структур,
содержащий произвольные значения времени. В результате в некоторых случаях:
а) временные метки файлов могут быть обновлены процессом, который не имеет
прав на это; б) временные метки файлов не могут быть обновлены процессом,
хотя он имеет на это право; в) в случае ошибки возвращается неправильное
значение в \fIerrno\fP.
.IP *
.\" This means that a process with a file descriptor that allows
.\" writing could change the timestamps of a file for which it
.\" does not have write permission;
.\" conversely, a process with a read-only file descriptor won't
.\" be able to update the timestamps of a file,
.\" even if it has write permission on the file.
В POSIX.1 сказано, что процесс имеющий \fIправа на запись в файл\fP, для
установки временных меток в текущее время может выполнить вызов со значением
\fItimes\fP равным NULL, или с \fItimes\fP, указывающим на массив структур, в
котором у обоих значений времени поле \fItv_nsec\fP равно \fBUTIME_NOW\fP. Однако
\fBfutimens\fP() вместо этого проверяет \fIправа на запись у файлового
дескриптора\fP.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBchattr\fP(1), \fBtouch\fP(1), \fBfutimesat\fP(2), \fBopenat\fP(2), \fBstat\fP(2),
\fButimes\fP(2), \fBfutimes\fP(3), \fBinode\fP(7), \fBpath_resolution\fP(7),
\fBsymlink\fP(7)
