.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Chastain <mec@shell.portal.com>
.\" Modified 1996-06-13 by aeb
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 1997-08-21 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH CHROOT 2 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
chroot \- изменить корневой каталог
.SH ОБЗОР
\fB#include <unistd.h>\fP
.PP
\fBint chroot(const char *\fP\fIpath\fP\fB);\fP
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
\fBchroot\fP():
.ad l
.RS 4
.PD 0
.TP  4
Начиная с glibc 2.2.2:
.nf
_XOPEN_SOURCE && ! (_POSIX_C_SOURCE\ >=\ 200112L)
    || /* начиная с glibc 2.20: */ _DEFAULT_SOURCE
    || /* версии glibc <= 2.19: */ _BSD_SOURCE
.TP  4
.fi
До glibc 2.2.2: не было
.PD
.RE
.ad b
.SH ОПИСАНИЕ
\fBchroot\fP() изменяет корневой каталог вызывающего процесса на тот, что задан
аргументом \fIpath\fP. Этот каталог будет использоваться для имён файлов,
начинающихся с \fI/\fP. Корневой каталог наследуется всеми потомками
вызывающего процесса.
.PP
Только привилегированный процесс (Linux: с мандатом \fBCAP_SYS_CHROOT\fP в
своём пользовательском пространстве имён) может вызвать \fBchroot\fP().
.PP
Этот вызов изменяет только составляющую процесса разрешения имён и больше
ничего. В частности, он не предназначен для действий повышения безопасности,
создания полностью изолированной среды процесса (sandbox) или ограничения
системных вызовов файловой системы. В прошлом, \fBchroot\fP() использовался
службами для ограничения их самих передачи полученных от недоверенных
пользователей путей системным вызовам наподобие \fBopen\fP(2). Однако, если
каталог перемещается за пределы каталога chroot, атакующий может
использовать это в своих интересах и также выйти за пределы каталога
chroot. Простейший способ сделать это —  выполнить \fBchdir\fP(2) в каталог,
который будет перемещён, подождать, когда он переместится, а затем открыть
путь, например ../../../etc/passwd.
.PP
.\" This is how the "slightly trickier variation" works:
.\" https://github.com/QubesOS/qubes-secpack/blob/master/QSBs/qsb-014-2015.txt#L142
Если \fBchdir\fP(2) не разрешён, то есть немного более хитрый вариант,
работающий при определённых условиях. Если служба позволяет задать «chroot в
каталог», то обычно это означает, что если вы хотите предотвратить доступ к
файлам удалённых пользователей вне каталога chroot, то вы должны
гарантировать, что каталоги никогда не перемещаются за его пределы.
.PP
Данный вызов не изменяет текущий рабочий каталог, поэтому после вызова
\(aq\fI.\fP\(aq может оказаться вне дерева, являющегося корнем \(aq\fI/\fP\(aq. В
частности, суперпользователь может выйти за пределы "тюрьмы chroot"
выполнив:
.PP
.in +4n
.EX
mkdir foo; chroot foo; cd ..
.EE
.in
.PP
Данный вызов не закрывает открытые файловые дескрипторы и поэтому через
такие дескрипторы можно получить доступ к файлам за пределами дерева chroot.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении возвращается 0. В случае ошибки возвращается \-1, а
\fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
В зависимости от файловой системы могут также возвращаться другие
ошибки. Общий набор ошибок перечислен ниже:
.TP 
\fBEACCES\fP
.\" Also search permission is required on the final component,
.\" maybe just to guarantee that it is a directory?
Поиск запрещён из\-за одного из частей префикса пути (См. также
\fBpath_resolution\fP(7).)
.TP 
\fBEFAULT\fP
Аргумент \fIpath\fP указывает за пределы доступного адресного пространства.
.TP 
\fBEIO\fP
Произошла ошибка ввода\-вывода.
.TP 
\fBELOOP\fP
Во время определения \fIpath\fP встретилось слишком много символьных ссылок.
.TP 
\fBENAMETOOLONG\fP
\fIpath\fP слишком длинен.
.TP 
\fBENOENT\fP
Файл не существует.
.TP 
\fBENOMEM\fP
Недостаточное количество памяти ядра.
.TP 
\fBENOTDIR\fP
Компонент \fIpath\fP не является каталогом.
.TP 
\fBEPERM\fP
У вызвавшего процесса недостаточно прав.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
.\" SVr4 documents additional EINTR, ENOLINK and EMULTIHOP error conditions.
.\" X/OPEN does not document EIO, ENOMEM or EFAULT error conditions.
SVr4, 4.4BSD, SUSv2 (отмечена как УСТАРЕВШАЯ). Эта функция не входит в
POSIX.1\-2001.
.SH ЗАМЕЧАНИЯ
Дочерний процесс, созданный посредством \fBfork\fP(2), наследует корневой
каталог родительского процесса. При вызове \fBexecve\fP(2) корневой каталог
остаётся неизменным.
.PP
Для определения корневого каталога процесса можно использовать магическую
символическую ссылку \fI/proc/[pid]/root\fP; подробности в \fBproc\fP(5).
.PP
В FreeBSD есть более ограничивающий системный вызов \fBjail\fP().
.SH "СМОТРИТЕ ТАКЖЕ"
\fBchroot\fP(1), \fBchdir\fP(2), \fBpivot_root\fP(2), \fBpath_resolution\fP(7),
\fBswitch_root\fP(8)
