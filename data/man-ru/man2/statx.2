.\" -*- mode: troff; coding: UTF-8 -*-
'\" t
.\" Copyright (c) 2017 David Howells <dhowells@redhat.com>
.\"
.\" Derived from the stat.2 manual page:
.\"   Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"   Parts Copyright (c) 1995 Nicolai Langfeldt (janl@ifi.uio.no), 1/1/95
.\"   and Copyright (c) 2006, 2007, 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STATX 2 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
statx \- считывает состояние файла (расширенный вариант)
.SH ОБЗОР
.nf
\fB#include <sys/types.h>\fP
\fB#include <sys/stat.h>\fP
\fB#include <unistd.h>\fP
\fB#include <fcntl.h>           \fP/* константы AT_* */
.PP
\fBint statx(int \fP\fIdirfd\fP\fB, const char *\fP\fIpathname\fP\fB, int \fP\fIflags\fP\fB,\fP
\fB          unsigned int \fP\fImask\fP\fB, struct statx *\fP\fIstatxbuf\fP\fB);\fP
.fi
.PP
.SH ОПИСАНИЕ
.PP
Этот системный вызов возвращает информацию о файле, записывая её в буфер, на
который указывает \fIstatxbuf\fP. Возвращаемый буфер представляет собой
структуру следующего вида:
.PP
.in +4n
.EX
struct statx {
    __u32 stx_mask;        /* маска битов, показывающая
                              заполненные поля */
    __u32 stx_blksize;     /* размер блока ввода\-вывода файловой системы */
    __u64 stx_attributes;  /* индикаторы дополнительных файловых атрибутов */
    __u32 stx_nlink;       /* количество жёстких ссылок */
    __u32 stx_uid;         /* идентификатор пользователя\-владельца */
    __u32 stx_gid;         /* идентификатор группы\-владельца */
    __u16 stx_mode;        /* тип файла и режим доступа */
    __u64 stx_ino;         /* номер иноды */
    __u64 stx_size;        /* полный размер в байтах */
    __u64 stx_blocks;      /* количество выделенных 512\-байтовых блоков */
    __u64 stx_attributes_mask;
                           /* маска, показывающая поддерживаемые атрибуты
                              в stx_attributes */

    /* поля меток времени */
    struct statx_timestamp stx_atime;  /* последний доступ */
    struct statx_timestamp stx_btime;  /* создание */
    struct statx_timestamp stx_ctime;  /* последнее изменение состояния */
    struct statx_timestamp stx_mtime;  /* последнее изменение */

    /* если файл представляет устройство, то в следующих
       полях содержится идентификатор устройства */
    __u32 stx_rdev_major;  /* основной идентификатор */
    __u32 stx_rdev_minor;  /* дополнительный идентификатор */

    /* поля идентификатора устройства с файловой системой,
       в которой содержится файл */
    __u32 stx_dev_major;   /* основной идентификатор */
    __u32 stx_dev_minor;   /* дополнительный идентификатор */
};
.EE
.in
.PP
Метки времени файла хранятся в структуре следующего вида:
.PP
.in +4n
.EX
struct statx_timestamp {
    __s64 tv_sec;    /* количество секунд с начала Эпохи (время UNIX) */
    __u32 tv_nsec;   /* количество наносекунд, начиная с tv_sec */
};
.EE
.in
.PP
(зарезервированное пространство и заполнители не показаны)
.SS "При вызове statx\fR():\fP"
.PP
Для получения состояния файла не требуется иметь права доступа к самому
файлу, но в случае указания \fBstatx\fP() с путём, потребуются права выполнения
(поиска) во всех каталогах, указанных в полном имени файла \fIpathname\fP.
.PP
Вызов \fBstatx\fP() для определения нужного файла использует \fIpathname\fP,
\fIdirfd\fP и \fIflags\fP следующими путями:
.TP 
Абсолютный путь
Если \fIpathname\fP начинается с косой черты, то целевой файла задан абсолютным
путём. В этом случае значение \fIdirfd\fP игнорируется.
.TP 
Относительный путь
Если \fIpathname\fP начинается не с косой черты и \fIdirfd\fP равно \fBAT_FDCWD\fP,
то \fIpathname\fP рассматривается относительно текущего рабочего каталога
процесса.
.TP 
Путь, задаваемый относительно каталога
Если \fIpathname\fP начинается не с косой черты и \fIdirfd\fP содержит файловый
дескриптор, указывающий на каталог, то \fIpathname\fP рассматривается
относительно каталога, на который ссылается \fIdirfd\fP.
.TP 
По файловому дескриптору
Если значение \fIpathname\fP равно пустой строке и в \fIflags\fP (смотрите ниже)
указан флаг \fBAT_EMPTY_PATH\fP, то целевым файлом считается тот, на который
указывает файловый дескриптор в \fIdirfd\fP.
.PP
Значение \fIflags\fP можно использовать для уточнения поиска на основе
пути. Оно составляется из побитно слагаемых следующих констант:
.TP 
\fBAT_EMPTY_PATH\fP
.\" commit 65cfc6722361570bfe255698d9cd4dccaf47570d
Если значение \fIpathname\fP равно пустой строке, то вызов выполняет действие с
файлом, на который ссылается \fIdirfd\fP (может быть получен с помощью
\fBopen\fP(2) с флагом \fBO_PATH\fP). В этом случае \fIdirfd\fP может ссылаться на
файл любого типа, а не только на каталог.
.IP
Если \fIdirfd\fP равно \fBAT_FDCWD\fP, то вызов использует текущий рабочий
каталог.
.IP
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
Данный флаг существует только в Linux; для его получения определите
\fB_GNU_SOURCE\fP.
.TP 
\fBAT_NO_AUTOMOUNT\fP
.\" Before glibc 2.16, defining _ATFILE_SOURCE sufficed
Не выполнять автоматическое монтирование конечного компонента («basename»)
\fIpathname\fP, если это каталог, который является точкой монтирования. Это
позволяет вызывающему получить атрибуты точки монтирования (а не
расположения, где её предполагалось смонтировать). Этот флаг можно
использовать в инструментах, сканирующих каталоги, для предотвращения
массового автоматического монтирования каталогов в их точки
монтирования. Флаг \fBAT_NO_AUTOMOUNT\fP не учитывается, если к точке уже уже
была выполнено монтирование. Этот флаг есть только Linux; для его получения
нужно задать \fB_GNU_SOURCE\fP.
.TP 
\fBAT_SYMLINK_NOFOLLOW\fP
Если значение \fIpathname\fP является символьной ссылкой, не разыменовывать её,
а выдать информацию о самой ссылке, подобно \fBlstat\fP(2).
.PP
Значение \fIflags\fP также может использоваться для контроля типа
синхронизации, которое выполняет ядро при опросе файла на удалённой файловой
системе. Оно составляется из побитно слагаемых следующих значений:
.TP 
\fBAT_STATX_SYNC_AS_STAT\fP
Работать подобно \fBstat\fP(2). Используется по умолчанию и очень зависит от
файловой системы.
.TP 
\fBAT_STATX_FORCE_SYNC\fP
Принудительно синхронизировать атрибуты с сервером. Может потребовать от
сетевой файловой системы выполнить запись данных для получения правильных
меток времени.
.TP 
\fBAT_STATX_DONT_SYNC\fP
Не выполнять синхронизацию, а использовать информацию из кэша (если
есть). Это может означать, что полученная информация будет не точна, но в
случае с сетевыми файловыми системами это позволяет не обращаться к серверу
и даже может быть разрыв соединения.
.PP
Аргумент \fImask\fP в \fBstatx\fP() используется для указания ядру какие поля поля
нужны вызывающему. Значение \fImask\fP представляет побитовую комбинацию
(посредством OR) следующих констант:
.PP
.in +4n
.TS
lB l.
STATX_TYPE	Требуется stx_mode & S_IFMT
STATX_MODE	Требуется stx_mode & ~S_IFMT
STATX_NLINK	Требуется stx_nlink
STATX_UID	Требуется stx_uid
STATX_GID	Требуется stx_gid
STATX_ATIME	Требуется stx_atime
STATX_MTIME	Требуется stx_mtime
STATX_CTIME	Требуется stx_ctime
STATX_INO	Требуется stx_ino
STATX_SIZE	Требуется stx_size
STATX_BLOCKS	Требуется stx_blocks
STATX_BASIC_STATS	[всё вышеперечисленное]
STATX_BTIME	Требуется stx_btime
STATX_ALL	[все доступные в данный момент поля]
.TE
.in
.PP
Заметим в общем, что ядро \fIне\fP не отклоняет значения в \fImask\fP, отличные от
вышеперечисленных (исключение из правила смотрите в описании ошибки
\fBEINVAL\fP). Вместо этого оно просто информирует вызывающего, какие значения
поддерживаются ядром и файловой системой через поле
\fIstatx.stx_mask\fP. Поэтому \fIне устанавливайте\fP значение \fImask\fP в
\fBUINT_MAX\fP (все биты), так как один или более бит в будущем могут
использоваться для указания расширения буфера.
.SS "Возвращаемая информация"
.PP
Информация о состоянии целевого файла возвращается в структуре \fIstatx\fP, на
которую указывает \fIstatxbuf\fP. Она содержит \fIstx_mask\fP, в котором
описывается возвращённая информация. Значение \fIstx_mask\fP имеет тот же
формат, что и аргумент \fImask\fP, и установленные в нём бит показывают какие
поля были заполнены.
.PP
Стоит упомянуть, что ядро может вернуть поля, которые не был запрошены и
запрошенные поля могут быть не заполнены, в зависимости от поддержки в
нижележащей файловой системе (поля, которым были присвоены значение, но
которые не были запрошены, можно игнорировать). В этих случаях \fIstx_mask\fP
будет не равно \fImask\fP.
.PP
Если файловая система не поддерживает поле или если значение поле содержит
непрезентабельное значение (например, файл экзотического типа), то битовая
маска в \fIstx_mask\fP, соответствующая этому полю, будет очищена даже если
пользователь запросил его, и в целях совместимости в качестве значения, если
возможно, будет помещена пустышка (например, в некоторых случаях пустышки
UID и GID могут задаваться при монтировании).
.PP
Файловая система также может заполнить поля, которые вызывающий не
запрашивал, при условии, что их значения доступны и это ничего стоит. Если
это выполняется, то будут установлены соответствующие биты в \fIstx_mask\fP.
.PP
.\" Background: inode attributes are modified with i_mutex held, but
.\" read by stat() without taking the mutex.
\fIЗамечание\fP: с целью производительности и простоты различные поля в
структуре \fIstatx\fP могут содержать информацию о состоянии из различных
моментов выполнения системного вызова. Например, если изменяется \fIstx_mode\fP
или \fIstx_uid\fP другим процессом посредством вызова \fBchmod\fP(2) или
\fBchown\fP(2), то \fBstat\fP() может вернуть старое значение \fIstx_mode\fP вместе с
новым \fIstx_uid\fP, или старое \fIstx_uid\fP вместе с новым \fIstx_mode\fP.
.PP
Помимо полей \fIstx_mask\fP (описанной выше) структура \fIstatx\fP имеет следующие
поля:
.TP 
\fIstx_blksize\fP
«Предпочтительный» размер блока для эффективного ввода/вывода в файловой
системе (запись в файл более мелкими порциями может привести к
неэффективному чтению/изменению/повторной записи).
.TP 
\fIstx_attributes\fP
Дополнительная информация о состоянии файла (подробности ниже).
.TP 
\fIstx_nlink\fP
Количество жёстких ссылок на файл.
.TP 
\fIstx_uid\fP
Пользовательский идентификатор владельца файла.
.TP 
\fIstx_gid\fP
Групповой идентификатор владельца файла.
.TP 
\fIstx_mode\fP
Тип файла и режим. Дополнительную информацию смотрите в \fBinode\fP(7).
.TP 
\fIstx_ino\fP
Номер иноды файла.
.TP 
\fIstx_size\fP
Размер файла (если он обычный или является символьной ссылкой) в
байтах. Размер символьной ссылки равен длине пути файла, на который она
ссылается, без конечного нулевого байта.
.TP 
\fIstx_blocks\fP
Количество блоков (по 512 байт), выделенных для файла на носителе (может
быть меньше, чем \fIstx_size\fP/512, когда в файле есть пропуски (holes)).
.TP 
\fIstx_attributes_mask\fP
Маска, показывающая какие биты в \fIstx_attributes\fP поддерживаются VFS и
файловой системой.
.TP 
\fIstx_atime\fP
Метка времени последнего доступа к файлу.
.TP 
\fIstx_btime\fP
Метка времени создания файла.
.TP 
\fIstx_ctime\fP
Метка времени последнего изменения состояния файла.
.TP 
\fIstx_mtime\fP
Метка времени последнего изменения файла.
.TP 
\fIstx_dev_major\fP и \fIstx_dev_minor\fP
Устройство, на котором находится файл (инода).
.TP 
\fIstx_rdev_major\fP и \fIstx_rdev_minor\fP
Устройство, который этот файл (инода) представляет, если файл имеет блочный
или символьный тип устройства.
.PP
.\"
Дополнительную информацию об этих полях смотрите в \fBinode\fP(7).
.SS "Атрибуты файла"
.PP
В поле \fIstx_attributes\fP содержится набор флагов (объединённых через ИЛИ),
которые отображают дополнительные атрибуты файла. Заметим, что для атрибута,
не указанного как поддерживаемого в \fIstx_attributes_mask\fP, имеющееся здесь
значение является не корректным. Биты \fIstx_attributes_mask\fP точно бит в бит
соответствуют битам поля \fIstx_attributes\fP.
.PP
Флаги:
.TP 
\fBSTATX_ATTR_COMPRESSED\fP
Файл сжат файловой системой и для доступа могут потребоваться дополнительные
ресурсы.
.TP 
\fBSTATX_ATTR_IMMUTABLE\fP
Файл невозможно изменить: его нельзя переименовать или удалить, на этот файл
нельзя создать жёсткую ссылку и в него нельзя выполнить запись
данных. Смотрите \fBchattr\fP(1).
.TP 
\fBSTATX_ATTR_APPEND\fP
Файл может быть открыт только для записи в режиме добавления. Запись в
произвольное место не разрешается. Смотрите \fBchattr\fP(1).
.TP 
\fBSTATX_ATTR_NODUMP\fP
Файл не предназначен для резервного копирования программой резервного
копирования, например \fBdump\fP(8). Смотрите \fBchattr\fP(1).
.TP 
\fBSTATX_ATTR_ENCRYPTED\fP
Для расшифровки файла файловой системой требуется ключ.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении возвращается 0. В случае ошибки возвращается \-1, а
\fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
.TP 
\fBEACCES\fP
Запрещён поиск в одном из каталогов пути \fIpathname\fP (смотрите также
\fBpath_resolution\fP(7)).
.TP 
\fBEBADF\fP
Значение \fIdirfd\fP не является правильным открытым файловым дескриптором.
.TP 
\fBEFAULT\fP
Значение \fIpathname\fP или \fIstatxbuf\fP равно NULL или указывает на
расположение вне доступного процессу адресного пространства.
.TP 
\fBEINVAL\fP
Указано неверное значение в \fIflags\fP.
.TP 
\fBEINVAL\fP
В \fImask\fP указан зарезервированный флаг (в настоящее время есть только один
флаг, для него определена константа \fBSTATX__RESERVED\fP со значением
0x80000000U).
.TP 
\fBELOOP\fP
Во время определения пути встретилось слишком много символьных ссылок.
.TP 
\fBENAMETOOLONG\fP
Слишком длинное значение аргумента \fIpathname\fP.
.TP 
\fBENOENT\fP
Компонент пути \fIpathname\fP не существует или в \fIpathname\fP указана пустая
строка и в \fIflags\fP не указан \fBAT_EMPTY_PATH\fP.
.TP 
\fBENOMEM\fP
Не хватает памяти (например, памяти ядра).
.TP 
\fBENOTDIR\fP
Компонент префикса пути \fIpathname\fP содержит относительный путь и \fIdirfd\fP
содержит файловый дескриптор, указывающий на файл, а не на каталог.
.SH ВЕРСИИ
Вызов \fBstatx\fP() был добавлен в Linux 4.11; поддержка в glibc доступна с
версии 2.28.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Вызов \fBstatx\fP() есть только в Linux.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBls\fP(1), \fBstat\fP(1), \fBaccess\fP(2), \fBchmod\fP(2), \fBchown\fP(2),
\fBreadlink\fP(2), \fBstat\fP(2), \fButime\fP(2), \fBcapabilities\fP(7), \fBinode\fP(7),
\fBsymlink\fP(7)
