.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (c) 1995 Jim Van Zandt <jrv@vanzandt.mv.com> and aeb
.\" Sun Feb 26 11:46:23 MET 1995
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified, Sun Feb 26 15:04:20 1995, faith@cs.unc.edu
.\" Modified, Thu Apr 20 22:08:17 1995, jrv@vanzandt.mv.com
.\" Modified, Mon Sep 18 22:32:47 1995, hpa@storm.net (H. Peter Anvin)
.\" FIXME The following are not documented:
.\"     KDFONTOP (since 2.1.111)
.\"     KDGKBDIACRUC (since 2.6.24)
.\"     KDSKBDIACR
.\"     KDSKBDIACRUC (since 2.6.24)
.\"     KDKBDREP (since 2.1.113)
.\"     KDMAPDISP (not implemented as at 2.6.27)
.\"     KDUNMAPDISP (not implemented as at 2.6.27)
.\"     VT_LOCKSWITCH (since 1.3.47, needs CAP_SYS_TTY_CONFIG)
.\"     VT_UNLOCKSWITCH (since 1.3.47, needs CAP_SYS_TTY_CONFIG)
.\"     VT_GETHIFONTMASK (since 2.6.18)
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH IOCTL_CONSOLE 2 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
ioctl_console \- управление вводом\-выводом (ioctl) консольного терминала и
виртуальных консолей
.SH ОПИСАНИЕ
Для терминалов и виртуальных консолей поддерживаются Linux\-ориентированные
запросы \fBioctl\fP(2), перечисленные далее. Для каждого запроса требуется
третий аргумент \fIargp\fP.
.TP 
\fBKDGETLED\fP
Получить состояние индикаторов. \fIargp\fP указывает ячейку типа \fIchar\fP. В
младших трёх битах \fI*argp\fP хранится состояние индикаторов:
.TS
l l l.
LED_CAP 	0x04	индикатор caps lock
LED_NUM 	0x02	индикатор num lock
LED_SCR 	0x01	индикатор scroll lock
.TE
.TP 
\fBKDSETLED\fP
Установить состояние индикаторов. Состояние индикаторов устанавливается в
соответствии с тремя младшими битами беззнакового длинного целого
\fIargp\fP. Однако, если установлен старший бит, индикаторы возвращаются в
исходное состояние: отображают состояние функций клавиатуры caps lock, num
lock и scroll lock.
.PP
До Linux 1.1.54 индикаторы состояния отражались только соответствующими
флагами клавиатуры и KDGETLED/KDSETLED и также могли изменять флаги
клавиатуры. Начиная с Linux 1.1.54 индикаторы могут отображать произвольную
информацию, но по умолчанию показывают флаги клавиатуры. Следующие два ioctl
используются для доступа к флагам клавиатуры.
.TP 
\fBKDGKBLED\fP
Получить флаги клавиатуры: CapsLock, NumLock, ScrollLock (не
индикаторы). \fIargp\fP указывает на ячейку типа char, в которой сохраняется
состояния флагов. Младшие три бита (маска 0x7) содержат текущее состояние
флагов, следующие три бита (маска 0x70) содержат устанавливаемое состояние
флагам по умолчанию (начиная с Linux 1.1.54).
.TP 
\fBKDSKBLED\fP
Установить флаги клавиатуры: CapsLock, NumLock, ScrollLock (не
индикаторы). Беззнаковое длинное целое \fIargp\fP содержит требуемые состояния
флагов. Три младших бита (маска 0x7) содержат состояния флагов, следующие
три бита (маска 0x70) содержат состояния флагов по умолчанию (начиная с
Linux 1.1.54).
.TP 
\fBKDGKBTYPE\fP
Получить тип клавиатуры. Возвращается значение KB_101 равное 0x02.
.TP 
\fBKDADDIO\fP
Добавить порт ввода/вывода (I/O) как допустимый. Эквивалентно вызову
\fIioperm(arg,1,1)\fP.
.TP 
\fBKDDELIO\fP
Удалить порт ввода/вывода (I/O) как недопустимый. Эквивалентно вызову
\fIioperm(arg,1,0)\fP.
.TP 
\fBKDENABIO\fP
Включить ввод/вывод на видеокарту. Эквивалентно вызову \fIioperm(0x3b4,
0x3df\-0x3b4+1, 1)\fP.
.TP 
\fBKDDISABIO\fP
Выключить ввод/вывод на видеокарту. Эквивалентно вызову \fIioperm(0x3b4,
0x3df\-0x3b4+1, 0)\fP.
.TP 
\fBKDSETMODE\fP
Установить текстовый/графический режим. Беззнаковое целое \fIargp\fP содержит
одно из двух значений:
.TS
l l.
KD_TEXT	0x00
KD_GRAPHICS	0x01
.TE
.TP 
\fBKDGETMODE\fP
Получить тип режима (текстовый/графический). Значение \fIargp\fP указывает на
\fIint\fP, равное одному из представленных чуть ранее в \fBKDSETMODE\fP.
.TP 
\fBKDMKTONE\fP
Генерировать тон заданной длительности. Младшие 16 битов беззнакового
длинного целого \fIargp\fP задают частоту тона (период в тактах), старшие 16
битов устанавливают его длительность в мсек. Если длительность равна нулю,
звук выключается. Управление возвращается немедленно. Например, \fIargp\fP =
(125<<16) + 0x637 определяет звук, обычно связанный с ctrl\-G
(работает начиная с Linux 0.99pl1; не работает в Linux 2.1.49\-50).
.TP 
\fBKIOCSOUND\fP
Запустить и остановить генерацию звука. Младшие 16 битов \fIargp\fP определяют
период в тактах (то есть \fIargp\fP = 1193180/частота). Значение \fIargp\fP = 0
выключает звук. В обоих случаях управление возвращается немедленно.
.TP 
\fBGIO_CMAP\fP
Получить из ядра текущую цветовую карту по умолчанию. \fIargp\fP указывает на
массив из 48 байтов (начиная с Linux 1.3.3).
.TP 
\fBPIO_CMAP\fP
Изменить цветовую карту по умолчанию для текстового режима.  \fIargp\fP
указывает на массив из 48 байтов, который содержит, по порядку, значения
красного, зеленого и синего для 16\-и доступных экранных цветов: 0 —
составляющая выключена, 255 — полная интенсивность. Цвета по умолчанию, по
порядку: чёрный, тёмно\-красный, тёмно\-зелёный, коричневый, тёмно\-синий,
тёмно\-сиреневый, тёмно\-голубой, светло\-серый, тёмно\-серый, ярко\-красный,
ярко\-зелёный, жёлтый, ярко\-синий, ярко\-сиреневый, ярко\-голубой и белый
(начиная с Linux 1.3.3).
.TP 
\fBGIO_FONT\fP
Получить экранный шрифт (256 символов) в расширенном виде. \fIargp\fP указывает
на массив из 8192 байтов. Возвращает код ошибки \fBEINVAL\fP, если текущий
загруженный шрифт содержит 512 символов или консоль находится не в текстовом
режиме.
.TP 
\fBGIO_FONTX\fP
Получить экранный шрифт и связанную с ним информацию. \fIargp\fP указывает на
\fIstruct consolefontdesc\fP (см. \fBPIO_FONTX\fP). При вызове значение поля
\fIcharcount\fP должно быть равно максимальному числу символов, которое
помещается в буфер, указываемый \fIchardata\fP. При возврате \fIcharcount\fP и
\fIcharheight\fP содержат информацию о текущем загруженном шрифте, а массив
\fIchardata\fP содержит данные шрифта, если согласно начальному значению
\fIcharcount\fP для этого достаточно места; в противном случае буфер остаётся
неизменным и \fIerrno\fP присваивается значение \fBENOMEM\fP (начиная с Linux
1.3.1).
.TP 
\fBPIO_FONT\fP
Установить экранный шрифт из 256 символов. Шрифт загружается в
знакогенератор EGA/VGA. \fIargp\fP указывает на карту размером 8192 байта (32
байта на символ). Только первые N из них используются для шрифта 8x\fIN\fP (0
< \fIN\fP <= 32). Этот вызов также отменяет перекодировку в Юникод.
.TP 
\fBPIO_FONTX\fP
Установить экранный шрифт и соответствующую информацию для
изображения. \fIargp\fP указывает на структуру:
.IP
.in +4n
.EX
struct consolefontdesc {
    unsigned short charcount;  /* число символов в шрифте
                                  (256 или 512) */
    unsigned short charheight; /* число линий сканирования на
                                  символ (1\-32) */
    char          *chardata;   /* данные шрифта в
                                  расширенном формате */
};
.EE
.in
.IP
Если требуется, соответственно изменяются размеры экрана и соответствующим
процессам посылается сигнал \fBSIGWINCH\fP. Этот вызов также отменяет
перекодировку в Юникод (начиная с Linux 1.3.1).
.TP 
\fBPIO_FONTRESET\fP
Сбросить экранный шрифт, размер и перекодировку в Юникод в начальные
значения, использованные при загрузке. Аргумент \fIargp\fP не используется, но
его значение должно быть NULL, чтобы эта версия была совместима с будущими
версиями Linux. (Начиная с Linux 1.3.28).
.TP 
\fBGIO_SCRNMAP\fP
Получить разметку экрана из ядра. \fIargp\fP указывает на область размером
E_TABSZ, которая заполняется позициями символов шрифта, используемыми при
отображении. Вызов возвращает бесполезную информацию, если текущий
загруженный шрифт содержит более 256 символов.
.TP 
\fBGIO_UNISCRNMAP\fP
Получить полную экранную перекодировку в Юникод из ядра. \fIargp\fP указывает
на область размером \fIE_TABSZ*sizeof(unsigned short)\fP, которая заполняется
представлением в Юникоде каждого символа. Специальный набор Юникода,
начинающийся с U+F000, используется для перекодировки «напрямую в шрифт»
(начиная с Linux 1.3.1).
.TP 
\fBPIO_SCRNMAP\fP
Загрузить «определяемую пользователем» (четвёртую) таблицу в ядро, по
которой перекодируются байты в символы экрана консоли. \fIargp\fP указывает на
область размером E_TABSZ.
.TP 
\fBPIO_UNISCRNMAP\fP
Загрузить «определяемую пользователем» (четвёртую) таблицу в ядро,
перекодирующую байты в значения Юникода, которые затем транслируются в
экранные символы согласно текущей загруженной карте соответствия символов
Юникода и шрифта. Специальные коды Юникода, начинающиеся с U+F000, могут
использоваться для непосредственного перевода байтов в символы шрифта
(начиная с Linux 1.3.1).
.TP 
\fBGIO_UNIMAP\fP
Получить соответствие символов Юникода шрифту из ядра. \fIargp\fP указывает на
структуру
.IP
.in +4n
.EX
struct unimapdesc {
    unsigned short  entry_ct;
    struct unipair *entries;
};
.EE
.in
.IP
где \fIentries\fP указывает на массив структур
.IP
.in +4n
.EX
struct unipair {
    unsigned short unicode;
    unsigned short fontpos;
};
.EE
.in
.IP
(начиная с Linux 1.1.92)
.TP 
\fBPIO_UNIMAP\fP
Поместить соответствие символов Юникода и экранного шрифта в ядро. \fIargp\fP
указывает на \fIstruct unimapdesc\fP (начиная с Linux 1.1.92).
.TP 
\fBPIO_UNIMAPCLR\fP
Очистить таблицу, возможно с помощью алгоритма хэширования. \fIargp\fP
указывает на структуру
.IP
.in +4n
.EX
struct unimapinit {
    unsigned short advised_hashsize;  /* 0, если не использовать */
    unsigned short advised_hashstep;  /* 0, если не использовать */
    unsigned short advised_hashlevel; /* 0, если не использовать */
};
.EE
.in
.IP
(начиная с Linux 1.1.92)
.TP 
\fBKDGKBMODE\fP
Получить текущий режим клавиатуры. Значение \fIargp\fP указывает на ячейку типа
\fIlong\fP, в которой может быть одно из значений:
.TS
l l.
K_RAW	0x00  /* режим без обработки (скан\-коды) */
K_XLATE	0x01  /* транслированные с помощью keymap коды клавиш */
K_MEDIUMRAW	0x02  /* режим средней обработки (скан\-коды) */
K_UNICODE	0x03  /* режим Юникода */
K_OFF	0x04  /* режим выключен; начиная с Linux 2.6.39 */
.\" K_OFF: commit 9fc3de9c83565fcaa23df74c2fc414bb6e7efb0a
.TE
.TP 
\fBKDSKBMODE\fP
Установить текущий режим клавиатуры. Значение \fIargp\fP указывает на ячейку
типа \fIlong\fP, значением которой может быть любое из представленных чуть
ранее в \fBKDGKBMODE\fP.
.TP 
\fBKDGKBMETA\fP
Получить режим обработки метаклавиш. \fIargp\fP указывает на ячейку типа
\fIlong\fP, в которой может быть одно из значений:
.TS
l l l.
K_METABIT	0x03	установлен старший бит
K_ESCPREFIX	0x04	экранирующий префикс
.TE
.TP 
\fBKDSKBMETA\fP
Установить режим обработки клавиши мета. Значение \fIargp\fP указывает на
ячейку типа \fIlong\fP, значением которой может быть любое из представленных
чуть ранее в \fBKDGKBMETA\fP.
.TP 
\fBKDGKBENT\fP
Получить один элемент из таблицы трансляции клавиш (код клавиши для кода
действия). \fIargp\fP указывает на структуру
.IP
.in +4n
.EX
struct kbentry {
    unsigned char  kb_table;
    unsigned char  kb_index;
    unsigned short kb_value;
};
.EE
.in
.IP
значения двух первых полей представляют собой: \fIkb_table\fP \(em выбранную
таблицу клавиш (0 <= \fIkb_table\fP < MAX_NR_KEYMAPS) и \fIkb_index\fP
\(em код клавиши (0 <= \fIkb_index\fP < NR_KEYS). \fIkb_value\fP
присваивается соответствующий код действия или K_HOLE, если нет такой
клавиши, или K_NOSUCHMAP, если значение \fIkb_table\fP неверно.
.TP 
\fBKDSKBENT\fP
Создать элемент в таблице трансляции клавиш. \fIargp\fP указывает на \fIstruct
kbentry\fP.
.TP 
\fBKDGKBSENT\fP
Получить значение строки функциональной клавиши. \fIargp\fP указывает на
структуру
.IP
.in +4n
.EX
struct kbsentry {
    unsigned char kb_func;
    unsigned char kb_string[512];
};
.EE
.in
.IP
\fIkb_string\fP равна (заканчивающейся null) строке, соответствующей коду
действия функциональной клавиши \fIkb_func\fP.
.TP 
\fBKDSKBSENT\fP
Создать элемент строки функциональной клавиши. \fIargp\fP указывает на \fIstruct
kbsentry\fP.
.TP 
\fBKDGKBDIACR\fP
Получить таблицу акцентов из ядра. \fIargp\fP указывает на структуру
.IP
.in +4n
.EX
struct kbdiacrs {
    unsigned int   kb_cnt;
    struct kbdiacr kbdiacr[256];
};
.EE
.in
.IP
где \fIkb_cnt\fP \(em число элементов массива, каждый из которых является
структурой
.IP
.in +4n
.EX
struct kbdiacr {
    unsigned char diacr;
    unsigned char base;
    unsigned char result;
};
.EE
.in
.TP 
\fBKDGETKEYCODE\fP
Получить элемент таблицы кодов клавиш ядра (сканкод в код клавиши). \fIargp\fP
указывает на структуру
.IP
.in +4n
.EX
struct kbkeycode {
    unsigned int scancode;
    unsigned int keycode;
};
.EE
.in
.IP
\fIkeycode\fP устанавливается в соответствии с заданным \fIscancode\fP (только 89
<= \fIscancode\fP <= 255. Для 1 <= \fIscancode\fP <= 88,
\fIkeycode\fP==\fIscancode\fP; начиная с Linux 1.1.63).
.TP 
\fBKDSETKEYCODE\fP
Записать элемент таблицы кодов клавиш ядра. \fIargp\fP указывает на \fIstruct
kbkeycode\fP (начиная с Linux 1.1.63).
.TP 
\fBKDSIGACCEPT\fP
Вызывающий процесс показывает свою готовность к приёму сигнала \fIargp\fP, если
он генерируется нажатием соответствующей комбинации клавиш (1 <= \fIargp\fP
<= NSIG). Смотрите функцию \fIspawn_console\fP() в
\fIlinux/drivers/char/keyboard.c\fP.
.TP 
\fBVT_OPENQRY\fP
Получить первую доступную (не открытую) консоль. \fIargp\fP указывает ячейку
типа \fIint\fP, устанавливаемое значение которой равно номеру vt (1 <=
\fI*argp\fP <= MAX_NR_CONSOLES).
.TP 
\fBVT_GETMODE\fP
Считывает режим активного vt. \fIargp\fP указывает на структуру
.IP
.in +4n
.EX
struct vt_mode {
    char  mode;    /* режим vt */
    char  waitv;   /* при установленном; остановка при записи, если терминал неактивен */
    short relsig;  /* послать сигнал при освобождении req */
    short acqsig;  /* послать сигнал при захвате */
    short frsig;   /* не используется (устанавливается в 0) */
};
.EE
.in
.IP
которая задаёт режим активного vt.  \fImode\fP имеет одно из значений:
.TS
l l.
VT_AUTO	автоматическое переключение vt
VT_PROCESS	обрабатывать управление переключением
VT_ACKACQ	подтверждающий переключатель
.TE
.TP 
\fBVT_SETMODE\fP
Установить режим активного vt. \fIargp\fP указывает на \fIstruct vt_mode\fP.
.TP 
\fBVT_GETSTATE\fP
Получить общую информацию о состоянии vt. \fIargp\fP указывает на структуру
.IP
.in +4n
.EX
struct vt_stat {
    unsigned short v_active;  /* активный vt */
    unsigned short v_signal;  /* посылаемый сигнал */
    unsigned short v_state;   /* битовая маска vt */
};
.EE
.in
.IP
Для каждого используемого vt устанавливается соответствующий бит в поле
\fIv_state\fP. (В версиях с 1.0 до 1.1.92).
.TP 
\fBVT_RELDISP\fP
Освободить дисплей.
.TP 
\fBVT_ACTIVATE\fP
Переключиться на виртуальный терминал \fIargp\fP (1 <= \fIargp\fP <=
MAX_NR_CONSOLES).
.TP 
\fBVT_WAITACTIVE\fP
Подождать, пока виртуальный терминал \fIargp\fP не станет активным.
.TP 
\fBVT_DISALLOCATE\fP
Освободить память, выделенную виртуальному терминалу \fIargp\fP (начиная с
Linux 1.1.54).
.TP 
\fBVT_RESIZE\fP
Установить представление о размере экрана в ядре. \fIargp\fP указывает на
структуру
.IP
.in +4n
.EX
struct vt_sizes {
    unsigned short v_rows;       /* количество строк */
    unsigned short v_cols;       /* количество столбцов */
    unsigned short v_scrollsize; /* не используется */
};
.EE
.in
.IP
Заметим, что этот вызов не изменяет видеорежим. Смотрите \fBresizecons\fP(8)
(начиная с Linux 1.1.54).
.TP 
\fBVT_RESIZEX\fP
Установить значение различных параметров экрана в ядре. \fIargp\fP указывает на
структуру
.IP
.in +4n
.EX
struct vt_consize {
    unsigned short v_rows;  /* количество строк */
    unsigned short v_cols;  /* количество столбцов */
    unsigned short v_vlin;  /* количество строк на экране
                               в пикселях */
    unsigned short v_clin;  /* количество строк в символе
                               в пикселях */
    unsigned short v_vcol;  /* количество столбцов на экране
                               в пикселях */
    unsigned short v_ccol;  /* количество столбцов в символе
                               в пикселях */
};
.EE
.in
.IP
Любому параметру может быть присвоено нулевое значение, указывающее
"оставить без изменений", но, если задано несколько параметров, то они
должны быть согласованы. Этот вызов не изменяет видеорежим. Смотрите
\fBresizecons\fP(8) (начиная с Linux 1.3.3).
.PP
Действие следующих ioctl зависит от первого байта структуры, указываемой
\fIargp\fP, далее называемой \fIsubcode\fP. Доступны только суперпользователю или
владельцу текущего терминала.
.TP 
\fBTIOCLINUX, subcode=0\fP
Сделать дамп экрана. Удалено в Linux 1.1.92 (c ядром 1.1.92 и более поздним
используйте чтение из \fI/dev/vcsN\fP или \fI/dev/vcsaN\fP).
.TP 
\fBTIOCLINUX, subcode=1\fP
Получить информацию о задании. Удалено в Linux 1.1.92.
.TP 
\fBTIOCLINUX, subcode=2\fP
Произвести выделение. Значение \fIargp\fP указывает на структуру
.IP
.in +4n
.EX
struct {
    char  subcode;
    short xs, ys, xe, ye;
    short sel_mode;
};
.EE
.in
.IP
\fIxs\fP и \fIys\fP — начальные столбец и строка. \fIxe\fP и \fIye\fP — конечные столбец
и строка (у левого верхнего угла строка=столбец=1). Значение \fIsel_mode\fP
равно 0 для выделения «символ за символом», 1 для выделения «слово за
словом» или 2 для выделения «строки за строкой». Выделенные символы
подсвечиваются и сохраняются в статическом массиве sel_buffer из
\fIdevices/char/console.c\fP.
.TP 
\fBTIOCLINUX, subcode=3\fP
Вставить выделение. Символы буфера выделения записываются в \fIfd\fP.
.TP 
\fBTIOCLINUX, subcode=4\fP
Убрать заставку (blank screen)
.TP 
\fBTIOCLINUX, subcode=5\fP
Установить содержимое 256\-битной таблицы поиска определения символов в
«word» для выделения «слово за словом» (начиная с Linux 1.1.32).
.TP 
\fBTIOCLINUX, subcode=6\fP
Значение \fIargp\fP указывает ячейку типа char, которая устанавливает значение
переменной ядра \fIshift_state\fP (начиная с Linux 1.1.32).
.TP 
\fBTIOCLINUX, subcode=7\fP
Значение \fIargp\fP указывает ячейку типа char, которая устанавливает значение
переменной ядра \fIreport_mouse\fP (начиная с Linux 1.1.33).
.TP 
\fBTIOCLINUX, subcode=8\fP
Сделать дамп значений ширины и высоты экрана, позиции курсора и всех пар
символ\-атрибут (только в версиях с 1.1.67 по 1.1.91. С ядром 1.1.92 и более
поздних версий используйте чтение \fI/dev/vcsa*\fP).
.TP 
\fBTIOCLINUX, subcode=9\fP
Восстановить ширину и высоту экрана, позицию курсора и все пары
символ\-атрибут (только в версиях с 1.1.67 по 1.1.91. С ядром 1.1.92 и более
поздних версий используйте запись в \fI/dev/vcsa*\fP).
.TP 
\fBTIOCLINUX, subcode=10\fP
Обработчик функций энергосбережения для нового поколения мониторов. Режим
гашения (blanking) экрана VESA устанавливается равным \fIargp[1]\fP, который
определяет тип гашения:
.RS
.IP 0: 3
Гашение экрана выключено.
.IP 1:
Текущие установки регистров видеоадаптера сохраняются, затем контроллер
программируется на отключение вертикальной синхронизации. Происходит перевод
монитора в режим «ожидания» (standby). Если в мониторе есть таймер Off_Mode,
то он может в итоге сам выключить питание.
.IP 2:
Текущие настройки сохраняются, а затем вертикальная и горизонтальная
синхронизации отключаются. Происходит перевод в режим «выключен» (off). Если
в мониторе нет таймера Off_Mode или вы хотите отключить питание сразу же по
истечении времени blank_timer, то можете выбрать это значение. \fIВнимание:\fP
частое выключение питания может повредить монитор (начиная с Linux 1.1.76).
.RE
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении возвращается 0. В случае ошибки возвращается \-1, а
\fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
Переменная \fIerrno\fP может принимать следующие значения:
.TP 
\fBEBADF\fP
Неправильный файловый дескриптор.
.TP 
\fBEINVAL\fP
Неправильный файловый дескриптор или \fIargp\fP.
.TP 
\fBENOTTY\fP
Файловый дескриптор не связан со специальным символьным устройством, или
указанный запрос к нему неприменим.
.TP 
\fBEPERM\fP
Недостаточно прав.
.SH ЗАМЕЧАНИЯ
\fBПредупреждение\fP: не рассматривайте эту справочную страницу как
документацию о ioctl консоли Linux Она предназначена только для
любознательных, как альтернатива исходному коду. Ioctl — это внутренние
недокументированные возможности Linux, которые могут изменяться без
предупреждения. (И на самом деле, эта страница более или менее полно
описывает параметры ядра версии 1.1.94; они несколько отличаются от
параметров ядра более ранних версий.)
.PP
Очень часто ioctl вводятся для обмена между ядром и какой\-то определённой
известной программой (fdisk, hdparm, setserial, tunelp, loadkeys, selection,
setfont и т.д.), и их поведение изменяется по требованию этой программы.
.PP
Программы, использующие такие ioctl, не могут быть перенесены в другие
версии UNIX, не будут работать в старых версиях Linux и могут не работать в
будущих версия Linux.
.PP
Используйте функции POSIX.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBdumpkeys\fP(1), \fBkbd_mode\fP(1), \fBloadkeys\fP(1), \fBmknod\fP(1), \fBsetleds\fP(1),
\fBsetmetamode\fP(1), \fBexecve\fP(2), \fBfcntl\fP(2), \fBioctl_tty\fP(2), \fBioperm\fP(2),
\fBtermios\fP(3), \fBconsole_codes\fP(4), \fBmt\fP(4), \fBsd\fP(4), \fBtty\fP(4),
\fBttyS\fP(4), \fBvcs\fP(4), \fBvcsa\fP(4), \fBcharsets\fP(7), \fBmapscrn\fP(8),
\fBresizecons\fP(8), \fBsetfont\fP(8)
.PP
\fI/usr/include/linux/kd.h\fP, \fI/usr/include/linux/vt.h\fP
