.\" -*- mode: troff; coding: UTF-8 -*-
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\" and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2005, 2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (C) 2014 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21, Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21, Michael Chastain <mec@shell.portal.com>:
.\"   Fixed typos.
.\" Modified 1997-01-31, Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2002-09-28, aeb
.\" 2009-01-12, mtk, reordered text in DESCRIPTION and added some
.\"     details for dup2().
.\" 2008-10-09, mtk: add description of dup3()
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH DUP 2 2017\-09\-15 Linux "Руководство программиста Linux"
.SH ИМЯ
dup, dup2, dup3 \- создать дубликат файлового дескриптора
.SH ОБЗОР
.nf
\fB#include <unistd.h>\fP
.PP
\fBint dup(int \fP\fIoldfd\fP\fB);\fP
\fBint dup2(int \fP\fIoldfd\fP\fB, int \fP\fInewfd\fP\fB);\fP

\fB#define _GNU_SOURCE\fP             /* Смотрите feature_test_macros(7) */
\fB#include <fcntl.h>\fP              /* Определение констант O_* */
\fB#include <unistd.h>\fP
.PP
\fBint dup3(int \fP\fIoldfd\fP\fB, int \fP\fInewfd\fP\fB, int \fP\fIflags\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
Системный вызов \fBdup\fP() создаёт копию файлового дескриптора \fIoldfd\fP,
используя для нового дескриптора самый маленький свободный номер файлового
дескриптора.
.PP
После успешного выполнения старый и новый файловые дескрипторы являются
взаимозаменяемыми. Они указывают на одно и то же открытое файловое описание
(смотрите \fBopen\fP(2)) и поэтому имеют общее файловое смещение и флаги
состояния файла; например, если файловое смещение изменить с помощью
\fBlseek\fP(2) через один из файловых дескрипторов, то смещение изменится и для
другого.
.PP
.\"
Эти два файловых дескриптора имеют различные флаги дескриптора файла (флаг
close\-on\-exec). Флаг close\-on\-exec (\fBFD_CLOEXEC\fP; см. \fBfcntl\fP(2)) у копии
дескриптора сбрасывается.
.SS dup2()
Системный вызов \fBdup2\fP() выполняет ту же задачу, что и \fBdup\fP(), но вместо
использования самого маленького неиспользуемого номера файлового
дескриптора, он использует номер файлового дескриптора, указанного в
\fInewfd\fP. Если файловый дескриптор \fInewfd\fP уже открыт, то он закрывается
перед повторным использованием.
.PP
Шаги по закрытию и повторному использованию файлового дескриптора \fInewfd\fP
выполняются \fIатомарно\fP. Это важно, так как попытка реализовать подобное с
помощью \fBclose\fP(2) и \fBdup\fP() привело бы к состязательности, в силу чего
\fInewfd\fP мог быть задействован повторно между этими двумя шагами. Такое
повторное использование может произойти, из\-за прерывания основной программы
обработчиком сигналов, который выделяет файловый дескриптор, или из\-за
параллельной нити, выделяющей файловый дескриптор.
.PP
Также заметим следующее:
.IP * 3
Если \fIoldfd\fP является некорректным файловым дескриптором, то вызов
завершается с ошибкой, а \fInewfd\fP не закрывается.
.IP *
.\"
Если \fIoldfd\fP является корректным файловым дескриптором, а номер \fInewfd\fP
совпадает с \fIoldfd\fP, то \fBdup2\fP() не делает ничего и возвращает значение
\fInewfd\fP.
.SS dup3()
\fBdup3\fP() похож на \fBdup2\fP(). Отличия заключаются в следующем:
.IP * 3
Вызывающий может принудительно установить флаг close\-on\-exec flag у нового
файлового дескриптора, указав \fBO_CLOEXEC\fP в \fIflags\fP. Зачем это может быть
нужно смотрите в \fBopen\fP(2).
.IP *
.\" Ulrich Drepper, LKML, 2008-10-09:
.\"	We deliberately decided on this change.  Otherwise, what is the
.\"	result of dup3(fd, fd, O_CLOEXEC)?
Если \fIoldfd\fP равно \fInewfd\fP, то \fBdup3\fP() выдает ошибку \fBEINVAL\fP.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
В случае успеха данные системные вызовы возвращают новый файловый дескриптор
или \-1, если произошла ошибка (в этом случае \fIerrno\fP устанавливается
должным образом).
.SH ОШИБКИ
.TP 
\fBEBADF\fP
Значение \fIoldfd\fP не является открытым файловым дескриптором.
.TP 
\fBEBADF\fP
Значение \fInewfd\fP находится вне допустимого диапазона файловых дескрипторов
(смотрите описание \fBRLIMIT_NOFILE\fP в \fBgetrlimit\fP(2)).
.TP 
\fBEBUSY\fP
(только в Linux) Может случиться в \fBdup2\fP() или \fBdup3\fP() при возникновении
состязательности вызовов \fBopen\fP(2) и \fBdup\fP().
.TP 
\fBEINTR\fP
Вызов \fBdup2\fP() или \fBdup3\fP() был прерван каким\-либо сигналом. Смотрите
\fBsignal\fP(7).
.TP 
\fBEINVAL\fP
(\fBdup3\fP()) \fIflags\fP содержит некорректное значение.
.TP 
\fBEINVAL\fP
(\fBdup3\fP()) \fIoldfd\fP было равно \fInewfd\fP.
.TP 
\fBEMFILE\fP
Было достигнуто ограничение по количеству открытых файловых дескрипторов на
процесс (смотрите описание \fBRLIMIT_NOFILE\fP в \fBgetrlimit\fP(2)).
.SH ВЕРСИИ
Вызов \fBdup3\fP() был добавлен в Linux версии 2.6.27; поддержка в glibc
доступна с версии 2.9.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
\fBdup\fP(), \fBdup2\fP(): POSIX.1\-2001, POSIX.1\-2008, SVr4, 4.3BSD.
.PP
.\" SVr4 documents additional
.\" EINTR and ENOLINK error conditions.  POSIX.1 adds EINTR.
.\" The EBUSY return is Linux-specific.
\fBdup3\fP() есть только в Linux.
.SH ЗАМЕЧАНИЯ
Ошибка, которую возвращает \fBdup2\fP(), отличается от той, что возвращает
\fBfcntl(\fP…, \fBF_DUPFD\fP, …\fB)\fP, когда \fInewfd\fP находится вне допустимых
пределов. На некоторых системах \fBdup2\fP() также иногда возвращает \fBEINVAL\fP
— как \fBF_DUPFD\fP.
.PP
Если был открыт \fInewfd\fP, то любые ошибки, о которых было бы сообщено
\fBclose\fP(2), теряются. Если это важно, то (если программа однонитевая и не
выделяет файловые дескрипторы в обработчиках сигналов) правильней будет
\fIне\fP закрывать \fInewfd\fP перед вызовом \fBdup2\fP(), из\-за состязательности,
описанной выше. Вместо этого можно использовать, например, такой код:
.PP
.EX
    /* Получить копию «newfd», которую затем можно
       использовать для проверки ошибок close(); ошибка EBADF
       означает, что «newfd» не открыт. */

    tmpfd = dup(newfd);
    if (tmpfd == \-1 && errno != EBADF) {
        /* обработка неожидаемой ошибки dup() */
    }

    /* атомарное копирование «oldfd» в «newfd» */

    if (dup2(oldfd, newfd) == \-1) {
        /* обработка ошибки dup2() */
    }

    /* теперь проверим ошибки close() у файла, на который изначально
       ссылался «newfd» */

    if (tmpfd != \-1) {
        if (close(tmpfd) == \-1) {
            /* обработка ошибок закрытия */
        }
    }
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBclose\fP(2), \fBfcntl\fP(2), \fBopen\fP(2)
