.\" -*- mode: troff; coding: UTF-8 -*-
.\" Copyright (C) 2011, Eric Biederman <ebiederm@xmission.com>
.\" and Copyright (C) 2011, 2012, Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(GPLv2_ONELINE)
.\" Licensed under the GPLv2
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SETNS 2 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
setns \- повторно связывает нить с пространством имён
.SH ОБЗОР
.nf
\fB#define _GNU_SOURCE\fP             /* Смотрите feature_test_macros(7) */
\fB#include <sched.h>\fP
.PP
\fBint setns(int \fP\fIfd\fP\fB, int \fP\fInstype\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
Указанный файловый дескриптор, ссылающийся на пространство имён, повторно
связывается (reassociate) в вызвавшей нити с этим пространством имён.
.PP
Аргумент \fIfd\fP представляет собой файловый дескриптор, ссылающийся на одно
из элементов пространств имён в каталоге \fI/proc/[pid]/ns/\fP; подробней о
\fI/proc/[pid]/ns/\fP смотрите в \fBnamespaces\fP(7). Вызывающая нить будет
повторно связана с соответствующим пространством имён с учётом всех
ограничений, устанавливаемых аргументом \fInstype\fP.
.PP
В аргументе \fInstype\fP указывается тип пространства имён, с которым
вызывающая нить может быть повторно связана. Данный аргумент может иметь
одно из следующих значений:
.TP 
\fB0\fP
Разрешить подключиться к пространству имён любого типа.
.TP 
\fBCLONE_NEWCGROUP\fP (начиная с Linux 4.6)
Значение \fIfd\fP должно указывать на пространство имён cgroup.
.TP 
\fBCLONE_NEWIPC\fP (начиная с Linux 3.0)
Значение \fIfd\fP должно указывать на пространство имён IPC.
.TP 
\fBCLONE_NEWNET\fP (начиная с Linux 3.0)
Значение \fIfd\fP должно указывать на пространство имён network.
.TP 
\fBCLONE_NEWNS\fP (начиная с Linux 3.8)
Значение \fIfd\fP должно указывать на пространство имён mount.
.TP 
\fBCLONE_NEWPID\fP (начиная с Linux 3.8)
Значение \fIfd\fP должно указывать на пространство имён PID потомков.
.TP 
\fBCLONE_NEWUSER\fP (начиная с Linux 3.8)
Значение \fIfd\fP должно указывать на пространство имён user.
.TP 
\fBCLONE_NEWUTS\fP (начиная с Linux 3.0)
Значение \fIfd\fP должно указывать на пространство имён UTS.
.PP
.\"
Установка \fInstype\fP в 0 имеет смысл только, если вызывающий знает (или ему
не важно) на какой тип пространства имён ссылается \fIfd\fP. Назначение
ненулевого значения в \fInstype\fP полезно, если вызывающий не знает на какой
тип пространства имён ссылается \fIfd\fP. и хочет быть уверенным, что
пространство имён именно нужного типа (вызывающий может не знать тип
пространства имён на который указывает \fIfd\fP, если файловый дескриптор был
открыт другим процессом и, например, передан вызывающему через доменный
сокет UNIX).
.SS "Информация по определённым типам пространств имён"
Некоторые примечания и ограничения при пересопряжении с некоторыми типами
пространств имён:
.TP 
Пользовательские пространства имён
.\" See kernel/user_namespace.c:userns_install() [3.8 source]
Для пересопряжения процесса с пространством имён пользователя он должен
иметь мандат \fBCAP_SYS_ADMIN\fP в назначаемом пространстве имён пользователя
(эта необходимость подразумевает, что возможно присоединение только
дочернего  пространства имён пользователя). При успешном присоединении к
пространству имён пользователя процесс получает все мандаты в этом
пространстве имён, независимо от своего ID пользователя и группы.
.IP
Многонитевой процесс не может изменить пространство имён пользователя с
помощью \fBsetns\fP().
.IP
Запрещается использовать \fBsetns\fP() для повторного вхождения вызывающего в
текущее пространство имён пользователя. Это не позволяет вызывающему,
оставшемуся без мандатов, повторно получить их через вызов \fBsetns\fP().
.IP
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
.\" https://lwn.net/Articles/543273/
По причинам, связанным с безопасностью, процесс не может войти в новое
пользовательское пространство имён, если он сообща владеет атрибутами
файловых систем (атрибуты, чьё наследование управляется флагом \fBCLONE_FS\fP в
\fBclone\fP(2)) с другим процессом.
.IP
Дополнительную информацию о пользовательских пространствах имён смотрите в
\fBuser_namespaces\fP(7).
.TP 
Пространства имён монтирования
Для смены пространства имён монтирования требуется, чтобы вызывающий процесс
имел мандаты \fBCAP_SYS_CHROOT\fP и \fBCAP_SYS_ADMIN\fP в своём пространстве имён
пользователя и мандат \fBCAP_SYS_ADMIN\fP в пользовательском пространстве имён,
которое принадлежит целевому пространству имён монтирования.
.IP
.\" Above check is in fs/namespace.c:mntns_install() [3.8 source]
Процесс не может войти в новое пространство имён монтирования, если он
сообща владеет атрибутами файловых систем (атрибуты, чьё наследование
управляется флагом \fBCLONE_FS\fP в \fBclone\fP(2)) с другим процессом.
.IP
Подробную информацию взаимодействии пользовательского пространствах имён и
пространства имён монтирования смотрите в \fBuser_namespaces\fP(7).
.TP 
Пространства имён PID
Чтобы пересопрячь новое пространство имён PID c самим собой, вызывающий
должен иметь мандат \fBCAP_SYS_ADMIN\fP в своём пространстве имён пользователя
и пространстве имён пользователя целевого пространства имён PID.
.IP
Если \fIfd\fP ссылается на пространство имён PID, то семантика слегла
отличается от других типов пространств имён: пересопряжение вызывающей нити
с пространством имён PID изменяет только пространство имён PID, в которое
будут помещены все создаваемые далее потомки вызывающего; пространство имён
PID самого вызывающего не изменяется.
.IP
Пересопряжение (reassociating) с пространством имён PID разрешено только,
если пространство имён PID, указанное в \fIfd\fP, является потомком (дочерним,
внучатым и т. д.) пространства имён PID вызывающего.
.IP
Дополнительную информацию о пространствах имён PID смотрите в
\fBpid_namespaces\fP(7).
.TP 
Пространства имён cgroup
Чтобы пересопрячь новое пространство имён cgroup c самим собой, вызывающий
должен иметь мандат \fBCAP_SYS_ADMIN\fP в своём пространстве имён пользователя
и пространстве имён пользователя целевого пространства имён cgroup.
.IP
Использование \fBsetns\fP()  для изменения пространства имён cgroup вызывающего
не изменяет членство cgroup вызывающего.
.TP 
Пространства имён IPC, UTS и сетевое
Чтобы пересопрячь новое пространство имён IPC, UTS или сетевое c самим
собой, вызывающий должен иметь мандат \fBCAP_SYS_ADMIN\fP в своём пространстве
имён пользователя и пространстве имён пользователя целевого пространства
имён PID.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBsetns\fP() возвращает 0. При ошибке возвращается \-1,
и \fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
.TP 
\fBEBADF\fP
Значение \fIfd\fP не является правильным файловым дескриптором.
.TP 
\fBEINVAL\fP
Значение \fIfd\fP ссылается на пространство имён, чей тип не соответствует с
указанным в \fInstype\fP.
.TP 
\fBEINVAL\fP
Эти проблемы возникают при повторном связывании нити с указанным
пространством имён.
.TP 
.\" See kernel/pid_namespace.c::pidns_install() [kernel 3.18 sources]
\fBEINVAL\fP
Вызывающий пытается объединиться с пространством имён PID предка (родителя,
родителя родителя и т. д.).
.TP 
\fBEINVAL\fP
Вызывающий пытается объединиться с пространством имён пользователя, в
которое он уже входит.
.TP 
\fBEINVAL\fP
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
Вызывающий сообща владеет состоянием файловой системы (\fBCLONE_FS\fP) (в
частности, корневой каталог) с другим процессом и пытается объединить новое
пользовательское пространство имён.
.TP 
\fBEINVAL\fP
.\" See kernel/user_namespace.c::userns_install() [kernel 3.15 sources]
Вызывающий состоит из нескольких нитей и пытается объединить новое
пользовательское пространство имён.
.TP 
\fBENOMEM\fP
Невозможно выделить достаточно памяти для изменения указанного пространства
имён.
.TP 
\fBEPERM\fP
Вызывающая нить не имеет требуемого мандата для этой операции.
.SH ВЕРСИИ
Системный вызов \fBsetns\fP() впервые появился в ядре Linux версии 3.0;
поддержка в glibc добавлена в версии 2.14.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Системный вызов \fBsetns\fP() есть только в Linux.
.SH ЗАМЕЧАНИЯ
Не все атрибуты, которыми можно владеть сообща при создании новой нити с
помощью using \fBclone\fP(2), можно изменить с помощью \fBsetns\fP().
.SH ПРИМЕР
Программа, представленная ниже, ожидает два и более аргументов. В первом
аргумент указывается путь к файлу пространства имён в существующем каталоге
\fI/proc/[pid]/ns/\fP. В остальных аргументах указывается команда и её
параметры. Программа открывает файл пространства имён, объединяет это
пространство имён с помощью \fBsetns\fP() и выполняет указанную команду внутри
этого пространства имён.
.PP
В следующем сеансе оболочки показано использование этой программы
(скомпилирована под именем \fIns_exec\fP) вместе с примером для \fBCLONE_NEWUTS\fP
из справочной страницы \fBclone\fP(2) (скомпилирована под именем \fInewuts\fP).
.PP
Сначала мы запускаем программу из \fBclone\fP(2) в фоновом режиме. Эта
программа создаёт потомка в отдельном пространстве имён UTS. Потомок
изменяет имя узла в своём пространстве имён, а затем оба процесса отображают
имена узлов в своих пространствах имён UTS для того, чтобы мы увидели, что
они разные.
.PP
.in +4n
.EX
$ \fBsu\fP                   # Требуются права для выполнения
                          # операций с пространством имён
Password:
# \fB./newuts bizarro &\fP
[1] 3549
clone() returned 3550
uts.nodename in child:  bizarro
uts.nodename in parent: antero
# \fBuname \-n\fP             # проверяем имя узла в оболочке
antero
.EE
.in
.PP
Затем мы запускаем программу, показанную ниже, используя ту же
оболочку. Внутри этой оболочки мы проверяем, что имя узла — одно из
изменённых потомком, созданным первой программой:
.PP
.in +4n
.EX
# \fB./ns_exec /proc/3550/ns/uts /bin/bash\fP
# \fBuname \-n\fP             # выполняется в оболочке, запущенной ns_exec
bizarro
.EE
.in
.SS "Исходный код программы"
.EX
#define _GNU_SOURCE
#include <fcntl.h>
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \e
                        } while (0)

int
main(int argc, char *argv[])
{
    int fd;

    if (argc < 3) {
        fprintf(stderr, "%s /proc/PID/ns/FILE команда аргументы…\en", argv[0]);
        exit(EXIT_FAILURE);
    }

    fd = open(argv[1], O_RDONLY);  /* получаем файловый дескриптор для пространства
                                      имён */
    if (fd == \-1)
        errExit("open");

    if (setns(fd, 0) == \-1)        /* объединяемся с этим пространством имён */
        errExit("setns");

    execvp(argv[2], &argv[2]);     /* выполняем команду в пространстве имён */
    errExit("execvp");
}
.EE
.SH "СМОТРИТЕ ТАКЖЕ"
\fBnsenter\fP(1), \fBclone\fP(2), \fBfork\fP(2), \fBunshare\fP(2), \fBvfork\fP(2),
\fBnamespaces\fP(7), \fBunix\fP(7)
