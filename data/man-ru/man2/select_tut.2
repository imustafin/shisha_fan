.\" -*- mode: troff; coding: UTF-8 -*-
.\" This manpage is copyright (C) 2001 Paul Sheer.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" very minor changes, aeb
.\"
.\" Modified 5 June 2002, Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2006-05-13, mtk, removed much material that is redundant with select.2
.\"             various other changes
.\" 2008-01-26, mtk, substantial changes and rewrites
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SELECT_TUT 2 2019\-03\-06 Linux "Руководство программиста Linux"
.SH ИМЯ
select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \- многопоточный
синхронный ввод\-вывод
.SH ОБЗОР
.nf
/* в соответствии с POSIX.1\-2001, POSIX.1\-2008 */
\fB#include <sys/select.h>\fP
.PP
/* в соответствии с ранними стандартами */
\fB#include <sys/time.h>\fP
\fB#include <sys/types.h>\fP
\fB#include <unistd.h>\fP
.PP
\fBint select(int \fP\fInfds\fP\fB, fd_set *\fP\fIreadfds\fP\fB, fd_set *\fP\fIwritefds\fP\fB,\fP
\fB           fd_set *\fP\fIexceptfds\fP\fB, struct timeval *\fP\fIutimeout\fP\fB);\fP
.PP
\fBvoid FD_CLR(int \fP\fIfd\fP\fB, fd_set *\fP\fIset\fP\fB);\fP
\fBint  FD_ISSET(int \fP\fIfd\fP\fB, fd_set *\fP\fIset\fP\fB);\fP
\fBvoid FD_SET(int \fP\fIfd\fP\fB, fd_set *\fP\fIset\fP\fB);\fP
\fBvoid FD_ZERO(fd_set *\fP\fIset\fP\fB);\fP

\fB#include <sys/select.h>\fP
.PP
\fBint pselect(int \fP\fInfds\fP\fB, fd_set *\fP\fIreadfds\fP\fB, fd_set *\fP\fIwritefds\fP\fB,\fP
\fB            fd_set *\fP\fIexceptfds\fP\fB, const struct timespec *\fP\fIntimeout\fP\fB,\fP
\fB            const sigset_t *\fP\fIsigmask\fP\fB);\fP
.fi
.PP
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.PP
\fBpselect\fP(): _POSIX_C_SOURCE\ >=\ 200112L
.SH ОПИСАНИЕ
Вызов \fBselect\fP() (или \fBpselect\fP()) используется для эффективного слежения
за несколькими файловыми дескрипторами — для ожидания, когда какой\-то из них
не станет «готов», то есть появится возможность чтения\-записи данных, или с
файловым дескриптором не возникнет «исключительная ситуация».
.PP
Основные параметры задаются в виде «набора» файловых дескрипторов:
\fIreadfds\fP, \fIwritefds\fP и \fIexceptfds\fP. Каждый набор имеет тип \fIfd_set\fP и
его содержимое можно изменять с помощью макросов \fBFD_CLR\fP(), \fBFD_ISSET\fP(),
\fBFD_SET\fP() и \fBFD_ZERO\fP(). При создании нового набора сначала его нужно
очистить с помощью \fBFD_ZERO\fP(). Вызов \fBselect\fP() изменяет содержимое
наборов в соответствии с правилами, описанными далее; после вызова
\fBselect\fP() вы можете проверить существует ли ещё файловый дескриптор в
наборе с помощью макроса \fBFD_ISSET\fP(). Макрос \fBFD_ISSET\fP() возвращает
ненулевое значение, если указанный файловый дескриптор присутствует в наборе
и ноль, если отсутствует. Макрос \fBFD_CLR\fP() удаляет файловый дескриптор из
набора.
.SS Аргументы
.TP 
\fIreadfds\fP
Этот набор служит для слежения за появлением данных, доступных для чтения из
любого файлового дескриптора. После возврата из \fBselect\fP() в \fIreadfds\fP
остаются только те дескрипторы файлов, из которых возможно немедленное
чтение.
.TP 
\fIwritefds\fP
Этот набор служит для слежения за появлением места для записи данных в любой
из файловых дескрипторов набора. После возврата из \fBselect\fP() в \fIwritefds\fP
остаются только те файловые дескрипторы, в которые возможна немедленная
запись.
.TP 
\fIexceptfds\fP
Этот набор служит для слежения за «исключительными ситуациями». На самом
деле, отслеживается только одна распространённая исключительная ситуация:
доступность \fIвнепоточных\fP (out\-of\-band — OOB) данных для чтения из сокета
TCP. Более подробно о данных OOB смотрите в \fBrecv\fP(2), \fBsend\fP(2) и
\fBtcp\fP(7). Другая менее распространённая ситуация: \fBselect\fP(2) указывает на
исключительную ситуацию с псевдотерминалом в пакетном режиме; смотрите
\fBioctl_tty\fP(2). После возврата из \fBselect\fP() в \fIexceptfds\fP остаются
только те файловые дескрипторы, в которых произошла исключительная ситуация.
.TP 
\fInfds\fP
Представляет собой целое число, на единицу большее максимального файлового
дескриптора в любом из наборов. Другими словами, при добавлении файловых
дескрипторов в наборы вам необходимо вычислять максимальное целое значение
любого из них, а затем увеличивать это значение на единицу и передавать в
\fInfds\fP.
.TP 
\fIutimeout\fP
Этот аргумент задаёт наибольшее время, которое вызов \fBselect\fP() будет
ожидать событий, по прошествии которого завершит работу, даже если ничего не
произойдёт. Если значение этого аргумента равно NULL, то \fBselect\fP() будет
ожидать бесконечно. Значение \fIutimeout\fP может быть установлено в ноль
секунд; в этом случае \fBselect\fP() возвратит управление немедленно, с
информацией о готовности файловых дескрипторов на момент вызова. Структура
\fIstruct timeval\fP определена следующим образом:
.IP
.in +4n
.EX
struct timeval {
    time_t tv_sec;    /* секунды */
    long tv_usec;     /* микросекунды */
};
.EE
.in
.TP 
\fIntimeout\fP
Этот аргумент \fBpselect\fP() имеет то же значение, что и \fIutimeout\fP, но
структура \fIstruct timespec\fP позволяет указывать время с точностью до
наносекунд:
.IP
.in +4n
.EX
struct timespec {
    long tv_sec;    /* секунды */
    long tv_nsec;   /* наносекунды */
};
.EE
.in
.TP 
\fIsigmask\fP
Этот аргумент содержит набор сигналов, которые ядро должно разблокировать
(то есть удалить из маски сигналов вызывающей нити) на время, пока
вызывающий заблокирован в вызове \fBpselect\fP() (см. \fBsigaddset\fP(3) и
\fBsigprocmask\fP(2)). В качестве аргумента может быть передано значение NULL —
вызов не изменяет маску сигналов при входе и выходе из функции. То есть
\fBpselect\fP() ведёт себя как \fBselect\fP().
.SS "Комбинирование событий сигналов и данных"
Вызов \fBpselect\fP() полезен как для ожидания сигнала, так и для ожидания
готовности файлового дескриптора для ввода\-вывода. Программы, принимающие
сигналы, как правило, лишь выставляют в обработчике сигнала глобальный флаг,
который означает, что требуется обработка события в главном цикле
программы. Появление сигнала заставит вызов \fBselect\fP() (или \fBpselect\fP())
вернуть управление вызвавшей программе; при этом \fIerrno\fP будет присвоено
\fBEINTR\fP. Это поведение продиктовано необходимостью обработки сигналов в
главном цикле программы во избежание бесконечной блокировки \fBselect\fP(). В
главном цикле программы должно быть условие, проверяющее глобальный
флаг. Возникает вопрос: а что если сигнал придёт после проверки этого
условия, но до вызова \fBselect\fP()? В этом случае программа навсегда
останется в \fBselect\fP(), хотя и есть ожидающее событие. Для разрешения этой
проблемы существует вызов \fBpselect\fP(). Этот вызов можно использовать для
установки в сигнальной маске сигналов, которые принимаются только внутри
вызова \fBpselect\fP(). Например, предположим что интересующее нас событие —
это завершение дочернего процесса. Перед запуском главного цикла заблокируем
\fBSIGCHLD\fP с помощью \fBsigprocmask\fP(2). Наш вызов \fBpselect\fP() разблокирует
\fBSIGCHLD\fP, указав пустую маску сигналов. Программа будет выглядеть так:
.PP
.EX
static volatile sig_atomic_t got_SIGCHLD = 0;

static void
child_sig_handler(int sig)
{
    got_SIGCHLD = 1;
}

int
main(int argc, char *argv[])
{
    sigset_t sigmask, empty_mask;
    struct sigaction sa;
    fd_set readfds, writefds, exceptfds;
    int r;

    sigemptyset(&sigmask);
    sigaddset(&sigmask, SIGCHLD);
    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == \-1) {
        perror("sigprocmask");
        exit(EXIT_FAILURE);
    }

    sa.sa_flags = 0;
    sa.sa_handler = child_sig_handler;
    sigemptyset(&sa.sa_mask);
    if (sigaction(SIGCHLD, &sa, NULL) == \-1) {
        perror("sigaction");
        exit(EXIT_FAILURE);
    }

    sigemptyset(&empty_mask);

    for (;;) {          /* главный цикл */
        /* Инициализация readfds, writefds и exceptfds
           до вызова pselect() (код не показан). */

        r = pselect(nfds, &readfds, &writefds, &exceptfds,
                    NULL, &empty_mask);
        if (r == \-1 && errno != EINTR) {
            /* обработка ошибки */
        }

        if (got_SIGCHLD) {
            got_SIGCHLD = 0;

            /* Здесь обработка сигнального события; например с
               помощью wait() для завершения потомком (код не показан). */
        }

        /* код основной программы */
    }
}
.EE
.SS Практика
Итак, какой прок от использования \fBselect\fP()? Разве нельзя просто считывать
и записывать данные в файловые дескрипторы когда этого захочется? Смысл
использования \fBselect\fP() в том, что он позволяет следит за несколькими
дескрипторами одновременно и корректно переводить процесс в режим ожидания,
когда активности не наблюдается. Программисты UNIX часто попадают в
ситуацию, когда необходимо обработать ввод\-вывод из более чем одного
файлового дескриптора в то время как поток данных может быть
неравномерным. Если вы просто создадите последовательность вызовов
\fBread\fP(2) и \fBwrite\fP(2), то можете попасть в ситуацию, когда один из
вызовов будет ожидать данные из/в файлового дескриптора, в то время как
другой будет простаивать, хотя данные для него уже появились. Вызов
\fBselect\fP() позволяет эффективно справиться с такой ситуацией.
.SS "Правила использования"
Многие из тех, кто пытался использовать \fBselect\fP(), сталкивались с
поведением, которое трудно понять, и которое приводило к непереносимым или
просто плохим результатам. Например, вышеприведенная программа тщательно
спланирована так, чтобы ни в каком случае не блокироваться, хотя для её
файловых дескрипторов не установлен неблокирующий режим. Несложно
перечислить не очевидные ошибки, которые лишат всех преимуществ
использования \fBselect\fP(), поэтому вот список основных моментов, на которые
нужно обращать внимание при использовании \fBselect\fP().
.TP  4
1.
Всегда старайтесь использовать \fBselect\fP() без указания времени
ожидания. Ваша программа не должна ничего делать, если нет данных. Код,
зависимый от времени ожидания, обычно плохо переносим и сложен для отладки.
.TP 
2.
Для повышения эффективности значение \fInfds\fP должно правильно вычисляться,
как это объяснялось выше.
.TP 
3.
Файловые дескрипторы не должны добавляться в наборы, если вы не планируете
после вызова \fBselect\fP() проверять результат и соответствующим образом
реагировать. Смотрите следующее правило.
.TP 
4.
После возврата из \fBselect\fP() должны быть проверены все файловые дескрипторы
во всех наборах.
.TP 
5.
Вызовы \fBread\fP(2), \fBrecv\fP(2), \fBwrite\fP(2) и \fBsend\fP(2) \fIне\fP обязательно
считывают/записывают данные в полном объёме. Такое, конечно, возможно при
низком трафике или быстром потоке, однако происходит далеко не всегда. Вы
должны рассчитывать, что ваши функции получают/отправляют только один байт
за раз.
.TP 
6.
Никогда не считывайте/записывайте побайтно, если только вы не абсолютно
уверены в том, что нужно обработать небольшой объём данных. Крайне
неэффективно считывать/записывать меньшее количество байт, чем вы можете
поместить в буфер за один раз. Буферы в вышеприведённом примере имеют размер
1024 байта, однако могут быть легко увеличены до максимального размера
пакета в вашей локальной сети.
.TP 
7.
.\" Nonetheless, you should still cope with these errors for completeness.
Вызовы \fBread\fP(2), \fBrecv\fP(2), \fBwrite\fP(2), \fBsend\fP(2) и \fBselect\fP() могут
завершиться ошибкой \fBEINTR\fP, а вызовы \fBread\fP(2), \fBrecv\fP(2)  \fBwrite\fP(2) и
\fBsend\fP(2) могут завершиться присвоением \fIerrno\fP значения \fBEAGAIN\fP
(\fBEWOULDBLOCK\fP). Эти варианты должны быть правильно обработаны (в
вышеприведенной программе этого не сделано). Если ваша программа не
собирается принимать сигналы, то маловероятно, что вы получите
\fBEINTR\fP. Если ваша программа не использует неблокирующий ввод\-вывод, то вы
не получите \fBEAGAIN\fP.
.TP 
8.
Никогда не вызывайте \fBread\fP(2), \fBrecv\fP(2), \fBwrite\fP(2) или \fBsend\fP(2) с
буфером нулевой длины.
.TP 
9.
Если вызовы \fBread\fP(2), \fBrecv\fP(2), \fBwrite\fP(2) и \fBsend\fP(2) завершаются с
ошибками, отличными от перечисленных в пункте \fB7.\fP или один из вызовов
ввода вернул 0, что указывает на конец файла, то вы \fIне\fP должны передавать
этот файловый дескриптор в \fBselect\fP() снова. В примере выше я немедленно
закрываю файловый дескриптор и устанавливаю его в \-1 для предотвращения его
включения в набор.
.TP 
10.
Значение времени ожидания должно быть инициализировано при каждом новом
вызове \fBselect\fP(), так как некоторые операционные системы изменяют значение
структуры. Однако \fBpselect\fP() не изменяет структуру времени ожидания.
.TP 
11.
.\" "I have heard" does not fill me with confidence, and doesn't
.\" belong in a man page, so I've commented this point out.
.\" .TP
.\" 11.
.\" I have heard that the Windows socket layer does not cope with OOB data
.\" properly.
.\" It also does not cope with
.\" .BR select ()
.\" calls when no file descriptors are set at all.
.\" Having no file descriptors set is a useful
.\" way to sleep the process with subsecond precision by using the timeout.
.\" (See further on.)
Так как \fBselect\fP() изменяет переданные наборы файловых дескрипторов, то при
использовании его в цикле наборы должны повторно инициализироваться перед
каждым вызовом.
.SS "Эмуляция usleep"
В системах, не имеющих функции \fBusleep\fP(3), вы можете использовать
\fBselect\fP() с конечной задержкой и без файловых дескрипторов следующим
образом:
.PP
.in +4n
.EX
struct timeval tv;
tv.tv_sec = 0;
tv.tv_usec = 200000;  /* 0.2 секунды */
select(0, NULL, NULL, NULL, &tv);
.EE
.in
.PP
Однако работа гарантируется только в системах UNIX.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении \fBselect\fP() возвращает общее число файловых
дескрипторов, которые остались в наборах.
.PP
При выходе из \fBselect\fP() по окончании времени ожидания возвращается
ноль. Все наборы файловых дескрипторов будут пусты (но могут быть не пусты
на некоторых системах).
.PP
Значение \-1 указывает на ошибку, при этом \fIerrno\fP устанавливается
соответствующим образом. В случае ошибки содержимое наборов и структуры
\fIstruct timeout\fP не определено и не должно быть использовано. Однако вызов
\fBpselect\fP() никогда не изменяет \fIntimeout\fP.
.SH ЗАМЕЧАНИЯ
В общем случае, все операционные системы, поддерживающие сокеты,
поддерживают также и \fBselect\fP(). Вызов \fBselect\fP() можно применять для
переносимого и эффективного решения многих задач, вместо которого многие
программисты пытаются использовать нити, ветвление процессов, IPC, сигналы,
разделение памяти и другие методы.
.PP
Системный вызов \fBpoll\fP(2) имеет такую же функциональность, как и
\fBselect\fP() и иногда более эффективен для слежения за разреженным набором
файловых дескрипторов. В настоящее время он стал широко распространён, но
исторически является менее переносимым чем \fBselect\fP().
.PP
Программный интерфейс Linux \fBepoll\fP(7) предоставляет более эффективный
метод для слежения за большим количеством файловых дескрипторов чем
\fBselect\fP(2) и \fBpoll\fP(2).
.SH ПРИМЕР
Вот пример, который лучше демонстрирует возможности \fBselect\fP(). Программа
осуществляет перенаправление одного порта TCP в другой.
.PP
.EX
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/types.h>
#include <string.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>

static int forward_port;

#undef max
#define max(x,y) ((x) > (y) ? (x) : (y))

static int
listen_socket(int listen_port)
{
    struct sockaddr_in addr;
    int lfd;
    int yes;

    lfd = socket(AF_INET, SOCK_STREAM, 0);
    if (lfd == \-1) {
        perror("socket");
        return \-1;
    }

    yes = 1;
    if (setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR,
            &yes, sizeof(yes)) == \-1) {
        perror("setsockopt");
        close(lfd);
        return \-1;
    }

    memset(&addr, 0, sizeof(addr));
    addr.sin_port = htons(listen_port);
    addr.sin_family = AF_INET;
    if (bind(lfd, (struct sockaddr *) &addr, sizeof(addr)) == \-1) {
        perror("bind");
        close(lfd);
        return \-1;
    }

    printf("приём соединений на порту %d\en", listen_port);
    listen(lfd, 10);
    return lfd;
}

static int
connect_socket(int connect_port, char *address)
{
    struct sockaddr_in addr;
    int cfd;

    cfd = socket(AF_INET, SOCK_STREAM, 0);
    if (cfd == \-1) {
        perror("socket");
        return \-1;
    }

    memset(&addr, 0, sizeof(addr));
    addr.sin_port = htons(connect_port);
    addr.sin_family = AF_INET;

    if (!inet_aton(address, (struct in_addr *) &addr.sin_addr.s_addr)) {
        fprintf(stderr, "inet_aton(): неправильный формат IP\-адреса\en");
        close(cfd);
        return \-1;
    }

    if (connect(cfd, (struct sockaddr *) &addr, sizeof(addr)) == \-1) {
        perror("connect()");
        shutdown(cfd, SHUT_RDWR);
        close(cfd);
        return \-1;
    }
    return cfd;
}

#define SHUT_FD1 do {                                \e
                     if (fd1 >= 0) {                 \e
                         shutdown(fd1, SHUT_RDWR);   \e
                         close(fd1);                 \e
                         fd1 = \-1;                   \e
                     }                               \e
                 } while (0)

#define SHUT_FD2 do {                                \e
                     if (fd2 >= 0) {                 \e
                         shutdown(fd2, SHUT_RDWR);   \e
                         close(fd2);                 \e
                         fd2 = \-1;                   \e
                     }                               \e
                 } while (0)

#define BUF_SIZE 1024

int
main(int argc, char *argv[])
{
    int h;
    int fd1 = \-1, fd2 = \-1;
    char buf1[BUF_SIZE], buf2[BUF_SIZE];
    int buf1_avail = 0, buf1_written = 0;
    int buf2_avail = 0, buf2_written = 0;

    if (argc != 4) {
        fprintf(stderr, "Использование\en\etfwd <прослушиваемый\-порт> "
                 "<порт\-перенаправления> <ip\-адрес\-перенаправления>\en");
        exit(EXIT_FAILURE);
    }

    signal(SIGPIPE, SIG_IGN);

    forward_port = atoi(argv[2]);

    h = listen_socket(atoi(argv[1]));
    if (h == \-1)
        exit(EXIT_FAILURE);

    for (;;) {
        int ready, nfds = 0;
        ssize_t nbytes;
        fd_set readfds, writefds, exceptfds;

        FD_ZERO(&readfds);
        FD_ZERO(&writefds);
        FD_ZERO(&exceptfds);
        FD_SET(h, &readfds);
        nfds = max(nfds, h);

        if (fd1 > 0 && buf1_avail < BUF_SIZE)
            FD_SET(fd1, &readfds);
            /* Замечание: nfds обновляется ниже, когда добавляется fd1
               в exceptfds. */
        if (fd2 > 0 && buf2_avail < BUF_SIZE)
            FD_SET(fd2, &readfds);

        if (fd1 > 0 && buf2_avail \- buf2_written > 0)
            FD_SET(fd1, &writefds);
        if (fd2 > 0 && buf1_avail \- buf1_written > 0)
            FD_SET(fd2, &writefds);

        if (fd1 > 0) {
            FD_SET(fd1, &exceptfds);
            nfds = max(nfds, fd1);
        }
        if (fd2 > 0) {
            FD_SET(fd2, &exceptfds);
            nfds = max(nfds, fd2);
        }

        ready = select(nfds + 1, &readfds, &writefds, &exceptfds, NULL);

        if (ready == \-1 && errno == EINTR)
            continue;

        if (ready == \-1) {
            perror("select()");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(h, &readfds)) {
            socklen_t addrlen;
            struct sockaddr_in client_addr;
            int fd;

            addrlen = sizeof(client_addr);
            memset(&client_addr, 0, addrlen);
            fd = accept(h, (struct sockaddr *) &client_addr, &addrlen);
            if (fd == \-1) {
                perror("accept()");
            } else {
                SHUT_FD1;
                SHUT_FD2;
                buf1_avail = buf1_written = 0;
                buf2_avail = buf2_written = 0;
                fd1 = fd;
                fd2 = connect_socket(forward_port, argv[3]);
                if (fd2 == \-1)
                    SHUT_FD1;
                else
                    printf("connect from %s\en",
                            inet_ntoa(client_addr.sin_addr));

                /* пропускаем все события для старых, закрытых
                   файловых дескрипторов */
                continue;
            }
        }

        /* Замечание: чтение данных OOB до обычных */

        if (fd1 > 0 && FD_ISSET(fd1, &exceptfds)) {
            char c;

            nbytes = recv(fd1, &c, 1, MSG_OOB);
            if (nbytes < 1)
                SHUT_FD1;
            else
                send(fd2, &c, 1, MSG_OOB);
        }
        if (fd2 > 0 && FD_ISSET(fd2, &exceptfds)) {
            char c;

            nbytes = recv(fd2, &c, 1, MSG_OOB);
            if (nbytes < 1)
                SHUT_FD2;
            else
                send(fd1, &c, 1, MSG_OOB);
        }
        if (fd1 > 0 && FD_ISSET(fd1, &readfds)) {
            nbytes = read(fd1, buf1 + buf1_avail,
                      BUF_SIZE \- buf1_avail);
            if (nbytes < 1)
                SHUT_FD1;
            else
                buf1_avail += nbytes;
        }
        if (fd2 > 0 && FD_ISSET(fd2, &readfds)) {
            nbytes = read(fd2, buf2 + buf2_avail,
                      BUF_SIZE \- buf2_avail);
            if (nbytes < 1)
                SHUT_FD2;
            else
                buf2_avail += nbytes;
        }
        if (fd1 > 0 && FD_ISSET(fd1, &writefds) && buf2_avail > 0) {
            nbytes = write(fd1, buf2 + buf2_written,
                       buf2_avail \- buf2_written);
            if (nbytes < 1)
                SHUT_FD1;
            else
                buf2_written += nbytes;
        }
        if (fd2 > 0 && FD_ISSET(fd2, &writefds) && buf1_avail > 0) {
            nbytes = write(fd2, buf1 + buf1_written,
                       buf1_avail \- buf1_written);
            if (nbytes < 1)
                SHUT_FD2;
            else
                buf1_written += nbytes;
        }

        /* Проверить, что записанные данные были прочитаны */

        if (buf1_written == buf1_avail)
            buf1_written = buf1_avail = 0;
        if (buf2_written == buf2_avail)
            buf2_written = buf2_avail = 0;

        /* Одна из сторон закрыла соединение, продолжать
            записывать, пока другая сторона не закончит */

        if (fd1 < 0 && buf1_avail \- buf1_written == 0)
            SHUT_FD2;
        if (fd2 < 0 && buf2_avail \- buf2_written == 0)
            SHUT_FD1;
    }
    exit(EXIT_SUCCESS);
}
.EE
.PP
Вышеприведенная программа правильно перенаправляет большинство данных задач,
использующих соединения TCP, включая внепоточные (OOB) данные, передаваемые
серверами \fBtelnet\fP. Она справляется со сложной проблемой поддержания
одновременного двустороннего обмена данными. Возможно, вы решите, что
эффективнее использовать \fBfork\fP(2) и выделить отдельную нить для каждого
потока. На самом деле это сложнее, чем кажется. Другой идеей может быть
использование неблокирующего ввода\-вывода с помощью \fBfcntl\fP(2). Это также
может вызвать проблемы из\-за того, что придётся использовать неэффективные
таймауты.
.PP
Программа не обрабатывает более одного соединения, однако она может быть
легко доработана путем добавления связанного списка буферов — по одному на
каждое соединение. В данный момент новые соединения приводят к закрытию
текущего.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBaccept\fP(2), \fBconnect\fP(2), \fBioctl\fP(2), \fBpoll\fP(2), \fBread\fP(2),
\fBrecv\fP(2), \fBselect\fP(2), \fBsend\fP(2), \fBsigprocmask\fP(2), \fBwrite\fP(2),
\fBsigaddset\fP(3), \fBsigdelset\fP(3), \fBsigemptyset\fP(3), \fBsigfillset\fP(3),
\fBsigismember\fP(3), \fBepoll\fP(7)
.\" .SH AUTHORS
.\" This man page was written by Paul Sheer.
